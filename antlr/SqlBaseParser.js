// Generated from SqlBase.g4 by ANTLR 4.9.3
// jshint ignore: start
const antlr4 = require('antlr4');
const SqlBaseListener = require('./SqlBaseListener');

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u00f4\u0743\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00b3\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u00b8\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00be\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00c2\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u00d0\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00d4",
    "\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00d8\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00dc\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00e4\n\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00e8\n\u0005\u0003\u0005\u0005",
    "\u0005\u00eb\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00f2\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u00f9\n\u0005\f\u0005\u000e",
    "\u0005\u00fc\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u0101\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0105\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u010b\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u0112\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u011b\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0121\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u012c\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0133\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u013d\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0144\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u014c\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0154\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u015c\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0166\n",
    "\u0005\f\u0005\u000e\u0005\u0169\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u016e\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u0173\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u0179\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0182",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u018b\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0190\n\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0194\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u019c\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01a3\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u01b0\n\u0005\u0003\u0005\u0005\u0005\u01b3\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005",
    "\u01bb\n\u0005\f\u0005\u000e\u0005\u01be\u000b\u0005\u0005\u0005\u01c0",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u01c7\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01d0\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01d6\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u01db\n\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u01df\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u01e7",
    "\n\u0005\f\u0005\u000e\u0005\u01ea\u000b\u0005\u0005\u0005\u01ec\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u01f6\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0007\u0005\u0201\n\u0005\f\u0005\u000e\u0005\u0204",
    "\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0209\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u020e\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0214\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007",
    "\u0005\u021b\n\u0005\f\u0005\u000e\u0005\u021e\u000b\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u0223\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u022a\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0230\n",
    "\u0005\f\u0005\u000e\u0005\u0233\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0237\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u023b",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u0243\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0249\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0007\u0005\u024e\n\u0005\f\u0005\u000e\u0005\u0251\u000b",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0255\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u0259\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u0263\n\u0005\u0003\u0005\u0005\u0005\u0266\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u026a\n\u0005\u0003\u0005\u0005\u0005\u026d",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005",
    "\u0273\n\u0005\f\u0005\u000e\u0005\u0276\u000b\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u027a\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u028f\n",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0295",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u029b\n\u0005\u0005\u0005\u029d\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u02a3\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u02a9\n\u0005\u0005\u0005\u02ab",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u02b1\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u02c4\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u02c9\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u02d0\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u02dc\n\u0005\u0005\u0005\u02de",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005",
    "\u02f0\n\u0005\f\u0005\u000e\u0005\u02f3\u000b\u0005\u0005\u0005\u02f5",
    "\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u02f9\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u02fd\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007",
    "\u0005\u030d\n\u0005\f\u0005\u000e\u0005\u0310\u000b\u0005\u0005\u0005",
    "\u0312\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u031a\n\u0005\u0003\u0006\u0005\u0006",
    "\u031d\n\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u0323\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007",
    "\u0328\n\u0007\f\u0007\u000e\u0007\u032b\u000b\u0007\u0003\b\u0003\b",
    "\u0005\b\u032f\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0335\n\t",
    "\u0003\t\u0003\t\u0005\t\u0339\n\t\u0003\t\u0003\t\u0005\t\u033d\n\t",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0343\n\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0349\n\u000b\f\u000b\u000e",
    "\u000b\u034c\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0007\u000e\u0358\n\u000e",
    "\f\u000e\u000e\u000e\u035b\u000b\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u0361\n\u000f\u0003\u0010\u0007\u0010",
    "\u0364\n\u0010\f\u0010\u000e\u0010\u0367\u000b\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u036d\n\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u0375\n\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u0379\n\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u037e\n\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u0389\n\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0007\u0019\u0393\n\u0019\f\u0019\u000e\u0019\u0396\u000b\u0019",
    "\u0005\u0019\u0398\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u039d\n\u0019\u0005\u0019\u039f\n\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u03a3\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u03ab\n\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u03b1\n\u001a\u0003",
    "\u001a\u0007\u001a\u03b4\n\u001a\f\u001a\u000e\u001a\u03b7\u000b\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0007\u001b\u03c0\n\u001b\f\u001b\u000e\u001b\u03c3\u000b",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u03c9",
    "\n\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u03cd\n\u001c\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u03d1\n\u001c\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u03d5\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d",
    "\u03da\n\u001d\f\u001d\u000e\u001d\u03dd\u000b\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u03e3\n\u001d\f\u001d\u000e",
    "\u001d\u03e6\u000b\u001d\u0005\u001d\u03e8\n\u001d\u0003\u001d\u0003",
    "\u001d\u0005\u001d\u03ec\n\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0005\u001d\u03f1\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u03f5",
    "\n\u001d\u0003\u001e\u0005\u001e\u03f8\n\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0007\u001e\u03fd\n\u001e\f\u001e\u000e\u001e\u0400\u000b",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0007\u001f\u0408\n\u001f\f\u001f\u000e\u001f\u040b\u000b\u001f",
    "\u0005\u001f\u040d\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0415\n\u001f\f\u001f\u000e",
    "\u001f\u0418\u000b\u001f\u0005\u001f\u041a\n\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007",
    "\u001f\u0423\n\u001f\f\u001f\u000e\u001f\u0426\u000b\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u042a\n\u001f\u0003 \u0003 \u0003 \u0003 \u0007",
    " \u0430\n \f \u000e \u0433\u000b \u0005 \u0435\n \u0003 \u0003 \u0005",
    " \u0439\n \u0003!\u0003!\u0005!\u043d\n!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003\"\u0003\"\u0003#\u0003#\u0005#\u0448\n#\u0003#\u0005",
    "#\u044b\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u0452\n#\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u0465\n$\u0007$\u0467",
    "\n$\f$\u000e$\u046a\u000b$\u0003%\u0005%\u046d\n%\u0003%\u0003%\u0005",
    "%\u0471\n%\u0003%\u0003%\u0005%\u0475\n%\u0003%\u0003%\u0005%\u0479",
    "\n%\u0005%\u047b\n%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0007&\u0484\n&\f&\u000e&\u0487\u000b&\u0003&\u0003&\u0005&\u048b",
    "\n&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'",
    "\u0494\n\'\u0003(\u0003(\u0003)\u0003)\u0005)\u049a\n)\u0003)\u0003",
    ")\u0005)\u049e\n)\u0005)\u04a0\n)\u0003*\u0003*\u0003*\u0003*\u0007",
    "*\u04a6\n*\f*\u000e*\u04a9\u000b*\u0003*\u0003*\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0007+\u04b7\n+\f",
    "+\u000e+\u04ba\u000b+\u0003+\u0003+\u0003+\u0005+\u04bf\n+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u04ca\n+\u0003",
    ",\u0003,\u0003-\u0003-\u0003-\u0005-\u04d1\n-\u0003-\u0003-\u0005-\u04d5",
    "\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007-\u04dd\n-\f-\u000e",
    "-\u04e0\u000b-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0005.\u04ec\n.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0005.\u04f4\n.\u0003.\u0003.\u0003.\u0003.\u0003.\u0007.\u04fb\n",
    ".\f.\u000e.\u04fe\u000b.\u0003.\u0003.\u0003.\u0005.\u0503\n.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u050b\n.\u0003.\u0003.\u0003",
    ".\u0003.\u0005.\u0511\n.\u0003.\u0003.\u0005.\u0515\n.\u0003.\u0003",
    ".\u0003.\u0005.\u051a\n.\u0003.\u0003.\u0003.\u0005.\u051f\n.\u0003",
    "/\u0003/\u0003/\u0003/\u0005/\u0525\n/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0007/\u0533\n/\f",
    "/\u000e/\u0536\u000b/\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00060\u0550\n0\r",
    "0\u000e0\u0551\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0007",
    "0\u055b\n0\f0\u000e0\u055e\u000b0\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00050\u0567\n0\u00030\u00050\u056a\n0\u00030\u0003",
    "0\u00030\u00050\u056f\n0\u00030\u00030\u00030\u00070\u0574\n0\f0\u000e",
    "0\u0577\u000b0\u00050\u0579\n0\u00030\u00030\u00030\u00030\u00030\u0007",
    "0\u0580\n0\f0\u000e0\u0583\u000b0\u00050\u0585\n0\u00030\u00030\u0005",
    "0\u0589\n0\u00030\u00050\u058c\n0\u00030\u00050\u058f\n0\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00070\u0599\n0\f0\u000e",
    "0\u059c\u000b0\u00050\u059e\n0\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0006",
    "0\u05af\n0\r0\u000e0\u05b0\u00030\u00030\u00050\u05b5\n0\u00030\u0003",
    "0\u00030\u00030\u00060\u05bb\n0\r0\u000e0\u05bc\u00030\u00030\u0005",
    "0\u05c1\n0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00070\u05d8\n0\f0\u000e0\u05db\u000b0\u00050\u05dd",
    "\n0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u05e6\n",
    "0\u00030\u00030\u00030\u00030\u00050\u05ec\n0\u00030\u00030\u00030\u0003",
    "0\u00050\u05f2\n0\u00030\u00030\u00030\u00030\u00050\u05f8\n0\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u0602\n0\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u060b\n0\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00070\u061f\n0\f0\u000e",
    "0\u0622\u000b0\u00050\u0624\n0\u00030\u00050\u0627\n0\u00030\u00030",
    "\u00030\u00030\u00030\u00030\u00030\u00030\u00070\u0631\n0\f0\u000e",
    "0\u0634\u000b0\u00031\u00031\u00031\u00031\u00051\u063a\n1\u00051\u063c",
    "\n1\u00032\u00032\u00032\u00032\u00052\u0642\n2\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00053\u064a\n3\u00034\u00034\u00035\u00035\u0003",
    "6\u00036\u00037\u00037\u00057\u0654\n7\u00037\u00037\u00037\u00037\u0005",
    "7\u065a\n7\u00038\u00038\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0007",
    ":\u0664\n:\f:\u000e:\u0667\u000b:\u0005:\u0669\n:\u0003:\u0003:\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0007;\u0682\n;\f;\u000e;\u0685\u000b;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0007;\u068e\n;\f;\u000e;\u0691\u000b;\u0003",
    ";\u0003;\u0005;\u0695\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u069c",
    "\n;\u0003;\u0003;\u0007;\u06a0\n;\f;\u000e;\u06a3\u000b;\u0003<\u0003",
    "<\u0005<\u06a7\n<\u0003=\u0003=\u0003=\u0003=\u0005=\u06ad\n=\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0007@\u06c1\n@\f",
    "@\u000e@\u06c4\u000b@\u0005@\u06c6\n@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0007@\u06cd\n@\f@\u000e@\u06d0\u000b@\u0005@\u06d2\n@\u0003@\u0005",
    "@\u06d5\n@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005",
    "A\u06e9\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0005B\u06f4\nB\u0003C\u0003C\u0003C\u0003C\u0005C\u06fa\nC\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0005D\u0701\nD\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0005E\u070a\nE\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0005F\u0711\nF\u0003G\u0003G\u0003G\u0003G\u0005G\u0717\nG\u0003",
    "H\u0003H\u0003H\u0007H\u071c\nH\fH\u000eH\u071f\u000bH\u0003I\u0003",
    "I\u0003I\u0005I\u0724\nI\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u072b",
    "\nJ\u0003K\u0003K\u0003K\u0007K\u0730\nK\fK\u000eK\u0733\u000bK\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0005L\u073a\nL\u0003M\u0003M\u0003M\u0005",
    "M\u073f\nM\u0003N\u0003N\u0003N\u0002\b2FX\\^tO\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u0002\u0019\u0004",
    "\u0002\u001c\u001c\u009c\u009c\u0004\u000233aa\u0004\u0002KKYY\u0004",
    "\u0002??ZZ\u0003\u0002\u00a5\u00a6\u0004\u0002\u000e\u000e\u00e6\u00e6",
    "\u0004\u0002>>\u00c7\u00c7\u0004\u0002\u0015\u001555\u0004\u0002GGh",
    "h\u0004\u0002\u000e\u000e88\u0004\u0002\u0017\u0017\u00b6\u00b6\u0003",
    "\u0002\u00dd\u00de\u0003\u0002\u00df\u00e1\u0003\u0002\u00d7\u00dc\u0005",
    "\u0002\u000e\u000e\u0012\u0012\u00b1\u00b1\u0004\u0002EE\u00c1\u00c1",
    "\u0007\u000211VVst\u00a9\u00a9\u00d5\u00d5\u0003\u0002wz\u0004\u0002",
    "HH\u008f\u008f\u0005\u0002RRee\u00bb\u00bb\u0006\u000299bbpp\u00cc\u00cc",
    "\u0004\u0002\u0084\u0084\u00d4\u00d41\u0002\f\u000e\u0010\u0010\u0012",
    "\u0013\u0015\u0017\u001a\u001c\u001f$))++/133557799??BBDDFHJJMRVXZZ",
    "\\\\__abdegikkmmpuw|\u0080\u0082\u0084\u0085\u0088\u0088\u008a\u008f",
    "\u0091\u0094\u0096\u009f\u00a1\u00a3\u00a5\u00aa\u00ac\u00b6\u00b8\u00bb",
    "\u00bd\u00c0\u00c2\u00c3\u00c5\u00c6\u00c9\u00ca\u00cc\u00cc\u00ce\u00cf",
    "\u00d3\u00d6\u0002\u0867\u0002\u009c\u0003\u0002\u0002\u0002\u0004\u009f",
    "\u0003\u0002\u0002\u0002\u0006\u00a2\u0003\u0002\u0002\u0002\b\u0319",
    "\u0003\u0002\u0002\u0002\n\u031c\u0003\u0002\u0002\u0002\f\u0320\u0003",
    "\u0002\u0002\u0002\u000e\u032e\u0003\u0002\u0002\u0002\u0010\u0330\u0003",
    "\u0002\u0002\u0002\u0012\u033e\u0003\u0002\u0002\u0002\u0014\u0344\u0003",
    "\u0002\u0002\u0002\u0016\u034f\u0003\u0002\u0002\u0002\u0018\u0353\u0003",
    "\u0002\u0002\u0002\u001a\u0359\u0003\u0002\u0002\u0002\u001c\u0360\u0003",
    "\u0002\u0002\u0002\u001e\u0365\u0003\u0002\u0002\u0002 \u0368\u0003",
    "\u0002\u0002\u0002\"\u036c\u0003\u0002\u0002\u0002$\u036e\u0003\u0002",
    "\u0002\u0002&\u0371\u0003\u0002\u0002\u0002(\u0378\u0003\u0002\u0002",
    "\u0002*\u037d\u0003\u0002\u0002\u0002,\u0388\u0003\u0002\u0002\u0002",
    ".\u038a\u0003\u0002\u0002\u00020\u038c\u0003\u0002\u0002\u00022\u03a4",
    "\u0003\u0002\u0002\u00024\u03c8\u0003\u0002\u0002\u00026\u03ca\u0003",
    "\u0002\u0002\u00028\u03d2\u0003\u0002\u0002\u0002:\u03f7\u0003\u0002",
    "\u0002\u0002<\u0429\u0003\u0002\u0002\u0002>\u0438\u0003\u0002\u0002",
    "\u0002@\u043a\u0003\u0002\u0002\u0002B\u0443\u0003\u0002\u0002\u0002",
    "D\u0451\u0003\u0002\u0002\u0002F\u0453\u0003\u0002\u0002\u0002H\u047a",
    "\u0003\u0002\u0002\u0002J\u048a\u0003\u0002\u0002\u0002L\u048c\u0003",
    "\u0002\u0002\u0002N\u0495\u0003\u0002\u0002\u0002P\u0497\u0003\u0002",
    "\u0002\u0002R\u04a1\u0003\u0002\u0002\u0002T\u04c9\u0003\u0002\u0002",
    "\u0002V\u04cb\u0003\u0002\u0002\u0002X\u04d4\u0003\u0002\u0002\u0002",
    "Z\u051e\u0003\u0002\u0002\u0002\\\u0524\u0003\u0002\u0002\u0002^\u0626",
    "\u0003\u0002\u0002\u0002`\u063b\u0003\u0002\u0002\u0002b\u0641\u0003",
    "\u0002\u0002\u0002d\u0649\u0003\u0002\u0002\u0002f\u064b\u0003\u0002",
    "\u0002\u0002h\u064d\u0003\u0002\u0002\u0002j\u064f\u0003\u0002\u0002",
    "\u0002l\u0651\u0003\u0002\u0002\u0002n\u065b\u0003\u0002\u0002\u0002",
    "p\u065d\u0003\u0002\u0002\u0002r\u065f\u0003\u0002\u0002\u0002t\u069b",
    "\u0003\u0002\u0002\u0002v\u06a6\u0003\u0002\u0002\u0002x\u06ac\u0003",
    "\u0002\u0002\u0002z\u06ae\u0003\u0002\u0002\u0002|\u06b3\u0003\u0002",
    "\u0002\u0002~\u06b9\u0003\u0002\u0002\u0002\u0080\u06e8\u0003\u0002",
    "\u0002\u0002\u0082\u06f3\u0003\u0002\u0002\u0002\u0084\u06f9\u0003\u0002",
    "\u0002\u0002\u0086\u0700\u0003\u0002\u0002\u0002\u0088\u0709\u0003\u0002",
    "\u0002\u0002\u008a\u0710\u0003\u0002\u0002\u0002\u008c\u0716\u0003\u0002",
    "\u0002\u0002\u008e\u0718\u0003\u0002\u0002\u0002\u0090\u0723\u0003\u0002",
    "\u0002\u0002\u0092\u072a\u0003\u0002\u0002\u0002\u0094\u072c\u0003\u0002",
    "\u0002\u0002\u0096\u0739\u0003\u0002\u0002\u0002\u0098\u073e\u0003\u0002",
    "\u0002\u0002\u009a\u0740\u0003\u0002\u0002\u0002\u009c\u009d\u0005\b",
    "\u0005\u0002\u009d\u009e\u0007\u0002\u0002\u0003\u009e\u0003\u0003\u0002",
    "\u0002\u0002\u009f\u00a0\u0005V,\u0002\u00a0\u00a1\u0007\u0002\u0002",
    "\u0003\u00a1\u0005\u0003\u0002\u0002\u0002\u00a2\u00a3\u0005\"\u0012",
    "\u0002\u00a3\u00a4\u0007\u0002\u0002\u0003\u00a4\u0007\u0003\u0002\u0002",
    "\u0002\u00a5\u031a\u0005\n\u0006\u0002\u00a6\u00a7\u0007\u00c9\u0002",
    "\u0002\u00a7\u031a\u0005\u0096L\u0002\u00a8\u00a9\u0007\u00c9\u0002",
    "\u0002\u00a9\u00aa\u0005\u0096L\u0002\u00aa\u00ab\u0007\u0003\u0002",
    "\u0002\u00ab\u00ac\u0005\u0096L\u0002\u00ac\u031a\u0003\u0002\u0002",
    "\u0002\u00ad\u00ae\u0007&\u0002\u0002\u00ae\u00b2\u0007\u00a7\u0002",
    "\u0002\u00af\u00b0\u0007W\u0002\u0002\u00b0\u00b1\u0007~\u0002\u0002",
    "\u00b1\u00b3\u0007A\u0002\u0002\u00b2\u00af\u0003\u0002\u0002\u0002",
    "\u00b2\u00b3\u0003\u0002\u0002\u0002\u00b3\u00b4\u0003\u0002\u0002\u0002",
    "\u00b4\u00b7\u0005\u008eH\u0002\u00b5\u00b6\u0007\u00d2\u0002\u0002",
    "\u00b6\u00b8\u0005\u0014\u000b\u0002\u00b7\u00b5\u0003\u0002\u0002\u0002",
    "\u00b7\u00b8\u0003\u0002\u0002\u0002\u00b8\u031a\u0003\u0002\u0002\u0002",
    "\u00b9\u00ba\u0007:\u0002\u0002\u00ba\u00bd\u0007\u00a7\u0002\u0002",
    "\u00bb\u00bc\u0007W\u0002\u0002\u00bc\u00be\u0007A\u0002\u0002\u00bd",
    "\u00bb\u0003\u0002\u0002\u0002\u00bd\u00be\u0003\u0002\u0002\u0002\u00be",
    "\u00bf\u0003\u0002\u0002\u0002\u00bf\u00c1\u0005\u008eH\u0002\u00c0",
    "\u00c2\t\u0002\u0002\u0002\u00c1\u00c0\u0003\u0002\u0002\u0002\u00c1",
    "\u00c2\u0003\u0002\u0002\u0002\u00c2\u031a\u0003\u0002\u0002\u0002\u00c3",
    "\u00c4\u0007\u000f\u0002\u0002\u00c4\u00c5\u0007\u00a7\u0002\u0002\u00c5",
    "\u00c6\u0005\u008eH\u0002\u00c6\u00c7\u0007\u0097\u0002\u0002\u00c7",
    "\u00c8\u0007\u00bf\u0002\u0002\u00c8\u00c9\u0005\u0096L\u0002\u00c9",
    "\u031a\u0003\u0002\u0002\u0002\u00ca\u00cb\u0007&\u0002\u0002\u00cb",
    "\u00cf\u0007\u00b7\u0002\u0002\u00cc\u00cd\u0007W\u0002\u0002\u00cd",
    "\u00ce\u0007~\u0002\u0002\u00ce\u00d0\u0007A\u0002\u0002\u00cf\u00cc",
    "\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002\u0002\u0002\u00d0\u00d1",
    "\u0003\u0002\u0002\u0002\u00d1\u00d3\u0005\u008eH\u0002\u00d2\u00d4",
    "\u0005R*\u0002\u00d3\u00d2\u0003\u0002\u0002\u0002\u00d3\u00d4\u0003",
    "\u0002\u0002\u0002\u00d4\u00d7\u0003\u0002\u0002\u0002\u00d5\u00d6\u0007",
    "\"\u0002\u0002\u00d6\u00d8\u0005`1\u0002\u00d7\u00d5\u0003\u0002\u0002",
    "\u0002\u00d7\u00d8\u0003\u0002\u0002\u0002\u00d8\u00db\u0003\u0002\u0002",
    "\u0002\u00d9\u00da\u0007\u00d2\u0002\u0002\u00da\u00dc\u0005\u0014\u000b",
    "\u0002\u00db\u00d9\u0003\u0002\u0002\u0002\u00db\u00dc\u0003\u0002\u0002",
    "\u0002\u00dc\u00dd\u0003\u0002\u0002\u0002\u00dd\u00e3\u0007\u0014\u0002",
    "\u0002\u00de\u00e4\u0005\n\u0006\u0002\u00df\u00e0\u0007\u0004\u0002",
    "\u0002\u00e0\u00e1\u0005\n\u0006\u0002\u00e1\u00e2\u0007\u0005\u0002",
    "\u0002\u00e2\u00e4\u0003\u0002\u0002\u0002\u00e3\u00de\u0003\u0002\u0002",
    "\u0002\u00e3\u00df\u0003\u0002\u0002\u0002\u00e4\u00ea\u0003\u0002\u0002",
    "\u0002\u00e5\u00e7\u0007\u00d2\u0002\u0002\u00e6\u00e8\u0007{\u0002",
    "\u0002\u00e7\u00e6\u0003\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002",
    "\u0002\u00e8\u00e9\u0003\u0002\u0002\u0002\u00e9\u00eb\u0007/\u0002",
    "\u0002\u00ea\u00e5\u0003\u0002\u0002\u0002\u00ea\u00eb\u0003\u0002\u0002",
    "\u0002\u00eb\u031a\u0003\u0002\u0002\u0002\u00ec\u00ed\u0007&\u0002",
    "\u0002\u00ed\u00f1\u0007\u00b7\u0002\u0002\u00ee\u00ef\u0007W\u0002",
    "\u0002\u00ef\u00f0\u0007~\u0002\u0002\u00f0\u00f2\u0007A\u0002\u0002",
    "\u00f1\u00ee\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002",
    "\u00f2\u00f3\u0003\u0002\u0002\u0002\u00f3\u00f4\u0005\u008eH\u0002",
    "\u00f4\u00f5\u0007\u0004\u0002\u0002\u00f5\u00fa\u0005\u000e\b\u0002",
    "\u00f6\u00f7\u0007\u0006\u0002\u0002\u00f7\u00f9\u0005\u000e\b\u0002",
    "\u00f8\u00f6\u0003\u0002\u0002\u0002\u00f9\u00fc\u0003\u0002\u0002\u0002",
    "\u00fa\u00f8\u0003\u0002\u0002\u0002\u00fa\u00fb\u0003\u0002\u0002\u0002",
    "\u00fb\u00fd\u0003\u0002\u0002\u0002\u00fc\u00fa\u0003\u0002\u0002\u0002",
    "\u00fd\u0100\u0007\u0005\u0002\u0002\u00fe\u00ff\u0007\"\u0002\u0002",
    "\u00ff\u0101\u0005`1\u0002\u0100\u00fe\u0003\u0002\u0002\u0002\u0100",
    "\u0101\u0003\u0002\u0002\u0002\u0101\u0104\u0003\u0002\u0002\u0002\u0102",
    "\u0103\u0007\u00d2\u0002\u0002\u0103\u0105\u0005\u0014\u000b\u0002\u0104",
    "\u0102\u0003\u0002\u0002\u0002\u0104\u0105\u0003\u0002\u0002\u0002\u0105",
    "\u031a\u0003\u0002\u0002\u0002\u0106\u0107\u0007:\u0002\u0002\u0107",
    "\u010a\u0007\u00b7\u0002\u0002\u0108\u0109\u0007W\u0002\u0002\u0109",
    "\u010b\u0007A\u0002\u0002\u010a\u0108\u0003\u0002\u0002\u0002\u010a",
    "\u010b\u0003\u0002\u0002\u0002\u010b\u010c\u0003\u0002\u0002\u0002\u010c",
    "\u031a\u0005\u008eH\u0002\u010d\u010e\u0007]\u0002\u0002\u010e\u010f",
    "\u0007`\u0002\u0002\u010f\u0111\u0005\u008eH\u0002\u0110\u0112\u0005",
    "R*\u0002\u0111\u0110\u0003\u0002\u0002\u0002\u0111\u0112\u0003\u0002",
    "\u0002\u0002\u0112\u0113\u0003\u0002\u0002\u0002\u0113\u0114\u0005\n",
    "\u0006\u0002\u0114\u031a\u0003\u0002\u0002\u0002\u0115\u0116\u00074",
    "\u0002\u0002\u0116\u0117\u0007K\u0002\u0002\u0117\u011a\u0005\u008e",
    "H\u0002\u0118\u0119\u0007\u00d1\u0002\u0002\u0119\u011b\u0005X-\u0002",
    "\u011a\u0118\u0003\u0002\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002",
    "\u011b\u031a\u0003\u0002\u0002\u0002\u011c\u011d\u0007\u000f\u0002\u0002",
    "\u011d\u0120\u0007\u00b7\u0002\u0002\u011e\u011f\u0007W\u0002\u0002",
    "\u011f\u0121\u0007A\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002",
    "\u0120\u0121\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002\u0002\u0002",
    "\u0122\u0123\u0005\u008eH\u0002\u0123\u0124\u0007\u0097\u0002\u0002",
    "\u0124\u0125\u0007\u00bf\u0002\u0002\u0125\u0126\u0005\u008eH\u0002",
    "\u0126\u031a\u0003\u0002\u0002\u0002\u0127\u0128\u0007\u000f\u0002\u0002",
    "\u0128\u012b\u0007\u00b7\u0002\u0002\u0129\u012a\u0007W\u0002\u0002",
    "\u012a\u012c\u0007A\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002",
    "\u012b\u012c\u0003\u0002\u0002\u0002\u012c\u012d\u0003\u0002\u0002\u0002",
    "\u012d\u012e\u0005\u008eH\u0002\u012e\u012f\u0007\u0097\u0002\u0002",
    "\u012f\u0132\u0007 \u0002\u0002\u0130\u0131\u0007W\u0002\u0002\u0131",
    "\u0133\u0007A\u0002\u0002\u0132\u0130\u0003\u0002\u0002\u0002\u0132",
    "\u0133\u0003\u0002\u0002\u0002\u0133\u0134\u0003\u0002\u0002\u0002\u0134",
    "\u0135\u0005\u0096L\u0002\u0135\u0136\u0007\u00bf\u0002\u0002\u0136",
    "\u0137\u0005\u0096L\u0002\u0137\u031a\u0003\u0002\u0002\u0002\u0138",
    "\u0139\u0007\u000f\u0002\u0002\u0139\u013c\u0007\u00b7\u0002\u0002\u013a",
    "\u013b\u0007W\u0002\u0002\u013b\u013d\u0007A\u0002\u0002\u013c\u013a",
    "\u0003\u0002\u0002\u0002\u013c\u013d\u0003\u0002\u0002\u0002\u013d\u013e",
    "\u0003\u0002\u0002\u0002\u013e\u013f\u0005\u008eH\u0002\u013f\u0140",
    "\u0007:\u0002\u0002\u0140\u0143\u0007 \u0002\u0002\u0141\u0142\u0007",
    "W\u0002\u0002\u0142\u0144\u0007A\u0002\u0002\u0143\u0141\u0003\u0002",
    "\u0002\u0002\u0143\u0144\u0003\u0002\u0002\u0002\u0144\u0145\u0003\u0002",
    "\u0002\u0002\u0145\u0146\u0005\u008eH\u0002\u0146\u031a\u0003\u0002",
    "\u0002\u0002\u0147\u0148\u0007\u000f\u0002\u0002\u0148\u014b\u0007\u00b7",
    "\u0002\u0002\u0149\u014a\u0007W\u0002\u0002\u014a\u014c\u0007A\u0002",
    "\u0002\u014b\u0149\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002",
    "\u0002\u014c\u014d\u0003\u0002\u0002\u0002\u014d\u014e\u0005\u008eH",
    "\u0002\u014e\u014f\u0007\f\u0002\u0002\u014f\u0153\u0007 \u0002\u0002",
    "\u0150\u0151\u0007W\u0002\u0002\u0151\u0152\u0007~\u0002\u0002\u0152",
    "\u0154\u0007A\u0002\u0002\u0153\u0150\u0003\u0002\u0002\u0002\u0153",
    "\u0154\u0003\u0002\u0002\u0002\u0154\u0155\u0003\u0002\u0002\u0002\u0155",
    "\u0156\u0005\u0010\t\u0002\u0156\u031a\u0003\u0002\u0002\u0002\u0157",
    "\u0158\u0007\u0010\u0002\u0002\u0158\u015b\u0005\u008eH\u0002\u0159",
    "\u015a\u0007\u00d2\u0002\u0002\u015a\u015c\u0005\u0014\u000b\u0002\u015b",
    "\u0159\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c",
    "\u031a\u0003\u0002\u0002\u0002\u015d\u015e\u0007&\u0002\u0002\u015e",
    "\u015f\u0007\u00c3\u0002\u0002\u015f\u0160\u0005\u008eH\u0002\u0160",
    "\u016d\u0007\u0014\u0002\u0002\u0161\u0162\u0007\u0004\u0002\u0002\u0162",
    "\u0167\u0005\u0018\r\u0002\u0163\u0164\u0007\u0006\u0002\u0002\u0164",
    "\u0166\u0005\u0018\r\u0002\u0165\u0163\u0003\u0002\u0002\u0002\u0166",
    "\u0169\u0003\u0002\u0002\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0167",
    "\u0168\u0003\u0002\u0002\u0002\u0168\u016a\u0003\u0002\u0002\u0002\u0169",
    "\u0167\u0003\u0002\u0002\u0002\u016a\u016b\u0007\u0005\u0002\u0002\u016b",
    "\u016e\u0003\u0002\u0002\u0002\u016c\u016e\u0005t;\u0002\u016d\u0161",
    "\u0003\u0002\u0002\u0002\u016d\u016c\u0003\u0002\u0002\u0002\u016e\u031a",
    "\u0003\u0002\u0002\u0002\u016f\u0172\u0007&\u0002\u0002\u0170\u0171",
    "\u0007\u0086\u0002\u0002\u0171\u0173\u0007\u0099\u0002\u0002\u0172\u0170",
    "\u0003\u0002\u0002\u0002\u0172\u0173\u0003\u0002\u0002\u0002\u0173\u0174",
    "\u0003\u0002\u0002\u0002\u0174\u0175\u0007\u00cf\u0002\u0002\u0175\u0178",
    "\u0005\u008eH\u0002\u0176\u0177\u0007\u00aa\u0002\u0002\u0177\u0179",
    "\t\u0003\u0002\u0002\u0178\u0176\u0003\u0002\u0002\u0002\u0178\u0179",
    "\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002\u0002\u017a\u017b",
    "\u0007\u0014\u0002\u0002\u017b\u017c\u0005\n\u0006\u0002\u017c\u031a",
    "\u0003\u0002\u0002\u0002\u017d\u017e\u0007:\u0002\u0002\u017e\u0181",
    "\u0007\u00cf\u0002\u0002\u017f\u0180\u0007W\u0002\u0002\u0180\u0182",
    "\u0007A\u0002\u0002\u0181\u017f\u0003\u0002\u0002\u0002\u0181\u0182",
    "\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002\u0002\u0002\u0183\u031a",
    "\u0005\u008eH\u0002\u0184\u0185\u0007&\u0002\u0002\u0185\u0186\u0007",
    "r\u0002\u0002\u0186\u018a\u0007\u00cf\u0002\u0002\u0187\u0188\u0007",
    "W\u0002\u0002\u0188\u0189\u0007~\u0002\u0002\u0189\u018b\u0007A\u0002",
    "\u0002\u018a\u0187\u0003\u0002\u0002\u0002\u018a\u018b\u0003\u0002\u0002",
    "\u0002\u018b\u018c\u0003\u0002\u0002\u0002\u018c\u018f\u0005\u008eH",
    "\u0002\u018d\u018e\u0007\"\u0002\u0002\u018e\u0190\u0005`1\u0002\u018f",
    "\u018d\u0003\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002\u0002\u0190",
    "\u0193\u0003\u0002\u0002\u0002\u0191\u0192\u0007\u00d2\u0002\u0002\u0192",
    "\u0194\u0005\u0014\u000b\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0193",
    "\u0194\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002\u0002\u0002\u0195",
    "\u019b\u0007\u0014\u0002\u0002\u0196\u019c\u0005\n\u0006\u0002\u0197",
    "\u0198\u0007\u0004\u0002\u0002\u0198\u0199\u0005\n\u0006\u0002\u0199",
    "\u019a\u0007\u0005\u0002\u0002\u019a\u019c\u0003\u0002\u0002\u0002\u019b",
    "\u0196\u0003\u0002\u0002\u0002\u019b\u0197\u0003\u0002\u0002\u0002\u019c",
    "\u031a\u0003\u0002\u0002\u0002\u019d\u019e\u0007:\u0002\u0002\u019e",
    "\u019f\u0007r\u0002\u0002\u019f\u01a2\u0007\u00cf\u0002\u0002\u01a0",
    "\u01a1\u0007W\u0002\u0002\u01a1\u01a3\u0007A\u0002\u0002\u01a2\u01a0",
    "\u0003\u0002\u0002\u0002\u01a2\u01a3\u0003\u0002\u0002\u0002\u01a3\u01a4",
    "\u0003\u0002\u0002\u0002\u01a4\u031a\u0005\u008eH\u0002\u01a5\u01a6",
    "\u0007\u0096\u0002\u0002\u01a6\u01a7\u0007r\u0002\u0002\u01a7\u01a8",
    "\u0007\u00cf\u0002\u0002\u01a8\u01a9\u0005\u008eH\u0002\u01a9\u01aa",
    "\u0007\u00d1\u0002\u0002\u01aa\u01ab\u0005X-\u0002\u01ab\u031a\u0003",
    "\u0002\u0002\u0002\u01ac\u01af\u0007&\u0002\u0002\u01ad\u01ae\u0007",
    "\u0086\u0002\u0002\u01ae\u01b0\u0007\u0099\u0002\u0002\u01af\u01ad\u0003",
    "\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b2\u0003",
    "\u0002\u0002\u0002\u01b1\u01b3\u0007\u00ba\u0002\u0002\u01b2\u01b1\u0003",
    "\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003",
    "\u0002\u0002\u0002\u01b4\u01b5\u0007M\u0002\u0002\u01b5\u01b6\u0005",
    "\u008eH\u0002\u01b6\u01bf\u0007\u0004\u0002\u0002\u01b7\u01bc\u0005",
    "\u0018\r\u0002\u01b8\u01b9\u0007\u0006\u0002\u0002\u01b9\u01bb\u0005",
    "\u0018\r\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002\u01bb\u01be\u0003",
    "\u0002\u0002\u0002\u01bc\u01ba\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003",
    "\u0002\u0002\u0002\u01bd\u01c0\u0003\u0002\u0002\u0002\u01be\u01bc\u0003",
    "\u0002\u0002\u0002\u01bf\u01b7\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003",
    "\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1\u01c2\u0007",
    "\u0005\u0002\u0002\u01c2\u01c3\u0007\u009e\u0002\u0002\u01c3\u01c6\u0005",
    "t;\u0002\u01c4\u01c5\u0007\"\u0002\u0002\u01c5\u01c7\u0005`1\u0002\u01c6",
    "\u01c4\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7",
    "\u01c8\u0003\u0002\u0002\u0002\u01c8\u01c9\u0005\u001a\u000e\u0002\u01c9",
    "\u01ca\u0005\"\u0012\u0002\u01ca\u031a\u0003\u0002\u0002\u0002\u01cb",
    "\u01cc\u0007\u000f\u0002\u0002\u01cc\u01cd\u0007M\u0002\u0002\u01cd",
    "\u01cf\u0005\u008eH\u0002\u01ce\u01d0\u0005r:\u0002\u01cf\u01ce\u0003",
    "\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003",
    "\u0002\u0002\u0002\u01d1\u01d2\u0005\u001e\u0010\u0002\u01d2\u031a\u0003",
    "\u0002\u0002\u0002\u01d3\u01d5\u0007:\u0002\u0002\u01d4\u01d6\u0007",
    "\u00ba\u0002\u0002\u01d5\u01d4\u0003\u0002\u0002\u0002\u01d5\u01d6\u0003",
    "\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01da\u0007",
    "M\u0002\u0002\u01d8\u01d9\u0007W\u0002\u0002\u01d9\u01db\u0007A\u0002",
    "\u0002\u01da\u01d8\u0003\u0002\u0002\u0002\u01da\u01db\u0003\u0002\u0002",
    "\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01de\u0005\u008eH",
    "\u0002\u01dd\u01df\u0005r:\u0002\u01de\u01dd\u0003\u0002\u0002\u0002",
    "\u01de\u01df\u0003\u0002\u0002\u0002\u01df\u031a\u0003\u0002\u0002\u0002",
    "\u01e0\u01e1\u0007\u001a\u0002\u0002\u01e1\u01e2\u0005\u008eH\u0002",
    "\u01e2\u01eb\u0007\u0004\u0002\u0002\u01e3\u01e8\u0005\u008aF\u0002",
    "\u01e4\u01e5\u0007\u0006\u0002\u0002\u01e5\u01e7\u0005\u008aF\u0002",
    "\u01e6\u01e4\u0003\u0002\u0002\u0002\u01e7\u01ea\u0003\u0002\u0002\u0002",
    "\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003\u0002\u0002\u0002",
    "\u01e9\u01ec\u0003\u0002\u0002\u0002\u01ea\u01e8\u0003\u0002\u0002\u0002",
    "\u01eb\u01e3\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002",
    "\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ee\u0007\u0005\u0002\u0002",
    "\u01ee\u031a\u0003\u0002\u0002\u0002\u01ef\u01f0\u0007&\u0002\u0002",
    "\u01f0\u01f1\u0007\u00a1\u0002\u0002\u01f1\u01f5\u0005\u0096L\u0002",
    "\u01f2\u01f3\u0007\u00d2\u0002\u0002\u01f3\u01f4\u0007\r\u0002\u0002",
    "\u01f4\u01f6\u0005\u0090I\u0002\u01f5\u01f2\u0003\u0002\u0002\u0002",
    "\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u031a\u0003\u0002\u0002\u0002",
    "\u01f7\u01f8\u0007:\u0002\u0002\u01f8\u01f9\u0007\u00a1\u0002\u0002",
    "\u01f9\u031a\u0005\u0096L\u0002\u01fa\u01fb\u0007O\u0002\u0002\u01fb",
    "\u01fc\u0005\u0094K\u0002\u01fc\u01fd\u0007\u00bf\u0002\u0002\u01fd",
    "\u0202\u0005\u0092J\u0002\u01fe\u01ff\u0007\u0006\u0002\u0002\u01ff",
    "\u0201\u0005\u0092J\u0002\u0200\u01fe\u0003\u0002\u0002\u0002\u0201",
    "\u0204\u0003\u0002\u0002\u0002\u0202\u0200\u0003\u0002\u0002\u0002\u0202",
    "\u0203\u0003\u0002\u0002\u0002\u0203\u0208\u0003\u0002\u0002\u0002\u0204",
    "\u0202\u0003\u0002\u0002\u0002\u0205\u0206\u0007\u00d2\u0002\u0002\u0206",
    "\u0207\u0007\r\u0002\u0002\u0207\u0209\u0007\u0085\u0002\u0002\u0208",
    "\u0205\u0003\u0002\u0002\u0002\u0208\u0209\u0003\u0002\u0002\u0002\u0209",
    "\u020d\u0003\u0002\u0002\u0002\u020a\u020b\u0007P\u0002\u0002\u020b",
    "\u020c\u0007\u0019\u0002\u0002\u020c\u020e\u0005\u0090I\u0002\u020d",
    "\u020a\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e",
    "\u031a\u0003\u0002\u0002\u0002\u020f\u0213\u0007\u009f\u0002\u0002\u0210",
    "\u0211\u0007\r\u0002\u0002\u0211\u0212\u0007\u0085\u0002\u0002\u0212",
    "\u0214\u0007I\u0002\u0002\u0213\u0210\u0003\u0002\u0002\u0002\u0213",
    "\u0214\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215",
    "\u0216\u0005\u0094K\u0002\u0216\u0217\u0007K\u0002\u0002\u0217\u021c",
    "\u0005\u0092J\u0002\u0218\u0219\u0007\u0006\u0002\u0002\u0219\u021b",
    "\u0005\u0092J\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021b\u021e",
    "\u0003\u0002\u0002\u0002\u021c\u021a\u0003\u0002\u0002\u0002\u021c\u021d",
    "\u0003\u0002\u0002\u0002\u021d\u0222\u0003\u0002\u0002\u0002\u021e\u021c",
    "\u0003\u0002\u0002\u0002\u021f\u0220\u0007P\u0002\u0002\u0220\u0221",
    "\u0007\u0019\u0002\u0002\u0221\u0223\u0005\u0090I\u0002\u0222\u021f",
    "\u0003\u0002\u0002\u0002\u0222\u0223\u0003\u0002\u0002\u0002\u0223\u031a",
    "\u0003\u0002\u0002\u0002\u0224\u0225\u0007\u00ae\u0002\u0002\u0225\u0229",
    "\u0007\u00a1\u0002\u0002\u0226\u022a\u0007\u000e\u0002\u0002\u0227\u022a",
    "\u0007|\u0002\u0002\u0228\u022a\u0005\u0096L\u0002\u0229\u0226\u0003",
    "\u0002\u0002\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u0229\u0228\u0003",
    "\u0002\u0002\u0002\u022a\u031a\u0003\u0002\u0002\u0002\u022b\u0236\u0007",
    "O\u0002\u0002\u022c\u0231\u0005\u008cG\u0002\u022d\u022e\u0007\u0006",
    "\u0002\u0002\u022e\u0230\u0005\u008cG\u0002\u022f\u022d\u0003\u0002",
    "\u0002\u0002\u0230\u0233\u0003\u0002\u0002\u0002\u0231\u022f\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0237\u0003\u0002",
    "\u0002\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0234\u0235\u0007\u000e",
    "\u0002\u0002\u0235\u0237\u0007\u0091\u0002\u0002\u0236\u022c\u0003\u0002",
    "\u0002\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002",
    "\u0002\u0002\u0238\u023a\u0007\u0083\u0002\u0002\u0239\u023b\u0007\u00b7",
    "\u0002\u0002\u023a\u0239\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002",
    "\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002\u023c\u023d\u0005\u008e",
    "H\u0002\u023d\u023e\u0007\u00bf\u0002\u0002\u023e\u0242\u0005\u0092",
    "J\u0002\u023f\u0240\u0007\u00d2\u0002\u0002\u0240\u0241\u0007O\u0002",
    "\u0002\u0241\u0243\u0007\u0085\u0002\u0002\u0242\u023f\u0003\u0002\u0002",
    "\u0002\u0242\u0243\u0003\u0002\u0002\u0002\u0243\u031a\u0003\u0002\u0002",
    "\u0002\u0244\u0248\u0007\u009f\u0002\u0002\u0245\u0246\u0007O\u0002",
    "\u0002\u0246\u0247\u0007\u0085\u0002\u0002\u0247\u0249\u0007I\u0002",
    "\u0002\u0248\u0245\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002\u0002",
    "\u0002\u0249\u0254\u0003\u0002\u0002\u0002\u024a\u024f\u0005\u008cG",
    "\u0002\u024b\u024c\u0007\u0006\u0002\u0002\u024c\u024e\u0005\u008cG",
    "\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024e\u0251\u0003\u0002\u0002",
    "\u0002\u024f\u024d\u0003\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002",
    "\u0002\u0250\u0255\u0003\u0002\u0002\u0002\u0251\u024f\u0003\u0002\u0002",
    "\u0002\u0252\u0253\u0007\u000e\u0002\u0002\u0253\u0255\u0007\u0091\u0002",
    "\u0002\u0254\u024a\u0003\u0002\u0002\u0002\u0254\u0252\u0003\u0002\u0002",
    "\u0002\u0255\u0256\u0003\u0002\u0002\u0002\u0256\u0258\u0007\u0083\u0002",
    "\u0002\u0257\u0259\u0007\u00b7\u0002\u0002\u0258\u0257\u0003\u0002\u0002",
    "\u0002\u0258\u0259\u0003\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002",
    "\u0002\u025a\u025b\u0005\u008eH\u0002\u025b\u025c\u0007K\u0002\u0002",
    "\u025c\u025d\u0005\u0092J\u0002\u025d\u031a\u0003\u0002\u0002\u0002",
    "\u025e\u025f\u0007\u00b0\u0002\u0002\u025f\u0265\u0007Q\u0002\u0002",
    "\u0260\u0262\u0007\u0083\u0002\u0002\u0261\u0263\u0007\u00b7\u0002\u0002",
    "\u0262\u0261\u0003\u0002\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002",
    "\u0263\u0264\u0003\u0002\u0002\u0002\u0264\u0266\u0005\u008eH\u0002",
    "\u0265\u0260\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002",
    "\u0266\u031a\u0003\u0002\u0002\u0002\u0267\u0269\u0007B\u0002\u0002",
    "\u0268\u026a\u0007\u0010\u0002\u0002\u0269\u0268\u0003\u0002\u0002\u0002",
    "\u0269\u026a\u0003\u0002\u0002\u0002\u026a\u026c\u0003\u0002\u0002\u0002",
    "\u026b\u026d\u0007\u00ce\u0002\u0002\u026c\u026b\u0003\u0002\u0002\u0002",
    "\u026c\u026d\u0003\u0002\u0002\u0002\u026d\u0279\u0003\u0002\u0002\u0002",
    "\u026e\u026f\u0007\u0004\u0002\u0002\u026f\u0274\u0005\u0084C\u0002",
    "\u0270\u0271\u0007\u0006\u0002\u0002\u0271\u0273\u0005\u0084C\u0002",
    "\u0272\u0270\u0003\u0002\u0002\u0002\u0273\u0276\u0003\u0002\u0002\u0002",
    "\u0274\u0272\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002",
    "\u0275\u0277\u0003\u0002\u0002\u0002\u0276\u0274\u0003\u0002\u0002\u0002",
    "\u0277\u0278\u0007\u0005\u0002\u0002\u0278\u027a\u0003\u0002\u0002\u0002",
    "\u0279\u026e\u0003\u0002\u0002\u0002\u0279\u027a\u0003\u0002\u0002\u0002",
    "\u027a\u027b\u0003\u0002\u0002\u0002\u027b\u031a\u0005\b\u0005\u0002",
    "\u027c\u027d\u0007\u00b0\u0002\u0002\u027d\u027e\u0007&\u0002\u0002",
    "\u027e\u027f\u0007\u00b7\u0002\u0002\u027f\u031a\u0005\u008eH\u0002",
    "\u0280\u0281\u0007\u00b0\u0002\u0002\u0281\u0282\u0007&\u0002\u0002",
    "\u0282\u0283\u0007\u00cf\u0002\u0002\u0283\u031a\u0005\u008eH\u0002",
    "\u0284\u0285\u0007\u00b0\u0002\u0002\u0285\u0286\u0007&\u0002\u0002",
    "\u0286\u0287\u0007r\u0002\u0002\u0287\u0288\u0007\u00cf\u0002\u0002",
    "\u0288\u031a\u0005\u008eH\u0002\u0289\u028a\u0007\u00b0\u0002\u0002",
    "\u028a\u028b\u0007&\u0002\u0002\u028b\u028c\u0007M\u0002\u0002\u028c",
    "\u028e\u0005\u008eH\u0002\u028d\u028f\u0005r:\u0002\u028e\u028d\u0003",
    "\u0002\u0002\u0002\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u031a\u0003",
    "\u0002\u0002\u0002\u0290\u0291\u0007\u00b0\u0002\u0002\u0291\u0294\u0007",
    "\u00b8\u0002\u0002\u0292\u0293\t\u0004\u0002\u0002\u0293\u0295\u0005",
    "\u008eH\u0002\u0294\u0292\u0003\u0002\u0002\u0002\u0294\u0295\u0003",
    "\u0002\u0002\u0002\u0295\u029c\u0003\u0002\u0002\u0002\u0296\u0297\u0007",
    "l\u0002\u0002\u0297\u029a\u0005`1\u0002\u0298\u0299\u0007=\u0002\u0002",
    "\u0299\u029b\u0005`1\u0002\u029a\u0298\u0003\u0002\u0002\u0002\u029a",
    "\u029b\u0003\u0002\u0002\u0002\u029b\u029d\u0003\u0002\u0002\u0002\u029c",
    "\u0296\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d",
    "\u031a\u0003\u0002\u0002\u0002\u029e\u029f\u0007\u00b0\u0002\u0002\u029f",
    "\u02a2\u0007\u00a8\u0002\u0002\u02a0\u02a1\t\u0004\u0002\u0002\u02a1",
    "\u02a3\u0005\u0096L\u0002\u02a2\u02a0\u0003\u0002\u0002\u0002\u02a2",
    "\u02a3\u0003\u0002\u0002\u0002\u02a3\u02aa\u0003\u0002\u0002\u0002\u02a4",
    "\u02a5\u0007l\u0002\u0002\u02a5\u02a8\u0005`1\u0002\u02a6\u02a7\u0007",
    "=\u0002\u0002\u02a7\u02a9\u0005`1\u0002\u02a8\u02a6\u0003\u0002\u0002",
    "\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02ab\u0003\u0002\u0002",
    "\u0002\u02aa\u02a4\u0003\u0002\u0002\u0002\u02aa\u02ab\u0003\u0002\u0002",
    "\u0002\u02ab\u031a\u0003\u0002\u0002\u0002\u02ac\u02ad\u0007\u00b0\u0002",
    "\u0002\u02ad\u02b0\u0007\u001f\u0002\u0002\u02ae\u02af\u0007l\u0002",
    "\u0002\u02af\u02b1\u0005`1\u0002\u02b0\u02ae\u0003\u0002\u0002\u0002",
    "\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1\u031a\u0003\u0002\u0002\u0002",
    "\u02b2\u02b3\u0007\u00b0\u0002\u0002\u02b3\u02b4\u0007!\u0002\u0002",
    "\u02b4\u02b5\t\u0004\u0002\u0002\u02b5\u031a\u0005\u008eH\u0002\u02b6",
    "\u02b7\u0007\u00b0\u0002\u0002\u02b7\u02b8\u0007\u00b4\u0002\u0002\u02b8",
    "\u02b9\u0007I\u0002\u0002\u02b9\u031a\u0005\u008eH\u0002\u02ba\u02bb",
    "\u0007\u00b0\u0002\u0002\u02bb\u02bc\u0007\u00b4\u0002\u0002\u02bc\u02bd",
    "\u0007I\u0002\u0002\u02bd\u02be\u0007\u0004\u0002\u0002\u02be\u02bf",
    "\u00058\u001d\u0002\u02bf\u02c0\u0007\u0005\u0002\u0002\u02c0\u031a",
    "\u0003\u0002\u0002\u0002\u02c1\u02c3\u0007\u00b0\u0002\u0002\u02c2\u02c4",
    "\u0007)\u0002\u0002\u02c3\u02c2\u0003\u0002\u0002\u0002\u02c3\u02c4",
    "\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003\u0002\u0002\u0002\u02c5\u02c8",
    "\u0007\u00a2\u0002\u0002\u02c6\u02c7\t\u0004\u0002\u0002\u02c7\u02c9",
    "\u0005\u0096L\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8\u02c9",
    "\u0003\u0002\u0002\u0002\u02c9\u031a\u0003\u0002\u0002\u0002\u02ca\u02cb",
    "\u0007\u00b0\u0002\u0002\u02cb\u02cc\u0007\u00a1\u0002\u0002\u02cc\u02cf",
    "\u0007Q\u0002\u0002\u02cd\u02ce\t\u0004\u0002\u0002\u02ce\u02d0\u0005",
    "\u0096L\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02cf\u02d0\u0003",
    "\u0002\u0002\u0002\u02d0\u031a\u0003\u0002\u0002\u0002\u02d1\u02d2\u0007",
    "6\u0002\u0002\u02d2\u031a\u0005\u008eH\u0002\u02d3\u02d4\u00075\u0002",
    "\u0002\u02d4\u031a\u0005\u008eH\u0002\u02d5\u02d6\u0007\u00b0\u0002",
    "\u0002\u02d6\u02dd\u0007N\u0002\u0002\u02d7\u02d8\u0007l\u0002\u0002",
    "\u02d8\u02db\u0005`1\u0002\u02d9\u02da\u0007=\u0002\u0002\u02da\u02dc",
    "\u0005`1\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02db\u02dc\u0003",
    "\u0002\u0002\u0002\u02dc\u02de\u0003\u0002\u0002\u0002\u02dd\u02d7\u0003",
    "\u0002\u0002\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de\u031a\u0003",
    "\u0002\u0002\u0002\u02df\u02e0\u0007\u00b0\u0002\u0002\u02e0\u031a\u0007",
    "\u00ad\u0002\u0002\u02e1\u02e2\u0007\u00ae\u0002\u0002\u02e2\u02e3\u0007",
    "\u00ad\u0002\u0002\u02e3\u02e4\u0005\u008eH\u0002\u02e4\u02e5\u0007",
    "\u00d7\u0002\u0002\u02e5\u02e6\u0005V,\u0002\u02e6\u031a\u0003\u0002",
    "\u0002\u0002\u02e7\u02e8\u0007\u009a\u0002\u0002\u02e8\u02e9\u0007\u00ad",
    "\u0002\u0002\u02e9\u031a\u0005\u008eH\u0002\u02ea\u02eb\u0007\u00b3",
    "\u0002\u0002\u02eb\u02f4\u0007\u00c0\u0002\u0002\u02ec\u02f1\u0005\u0086",
    "D\u0002\u02ed\u02ee\u0007\u0006\u0002\u0002\u02ee\u02f0\u0005\u0086",
    "D\u0002\u02ef\u02ed\u0003\u0002\u0002\u0002\u02f0\u02f3\u0003\u0002",
    "\u0002\u0002\u02f1\u02ef\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002",
    "\u0002\u0002\u02f2\u02f5\u0003\u0002\u0002\u0002\u02f3\u02f1\u0003\u0002",
    "\u0002\u0002\u02f4\u02ec\u0003\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002",
    "\u0002\u0002\u02f5\u031a\u0003\u0002\u0002\u0002\u02f6\u02f8\u0007#",
    "\u0002\u0002\u02f7\u02f9\u0007\u00d3\u0002\u0002\u02f8\u02f7\u0003\u0002",
    "\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u031a\u0003\u0002",
    "\u0002\u0002\u02fa\u02fc\u0007\u00a3\u0002\u0002\u02fb\u02fd\u0007\u00d3",
    "\u0002\u0002\u02fc\u02fb\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002",
    "\u0002\u0002\u02fd\u031a\u0003\u0002\u0002\u0002\u02fe\u02ff\u0007\u0090",
    "\u0002\u0002\u02ff\u0300\u0005\u0096L\u0002\u0300\u0301\u0007K\u0002",
    "\u0002\u0301\u0302\u0005\b\u0005\u0002\u0302\u031a\u0003\u0002\u0002",
    "\u0002\u0303\u0304\u00072\u0002\u0002\u0304\u0305\u0007\u0090\u0002",
    "\u0002\u0305\u031a\u0005\u0096L\u0002\u0306\u0307\u0007@\u0002\u0002",
    "\u0307\u0311\u0005\u0096L\u0002\u0308\u0309\u0007\u00cb\u0002\u0002",
    "\u0309\u030e\u0005V,\u0002\u030a\u030b\u0007\u0006\u0002\u0002\u030b",
    "\u030d\u0005V,\u0002\u030c\u030a\u0003\u0002\u0002\u0002\u030d\u0310",
    "\u0003\u0002\u0002\u0002\u030e\u030c\u0003\u0002\u0002\u0002\u030e\u030f",
    "\u0003\u0002\u0002\u0002\u030f\u0312\u0003\u0002\u0002\u0002\u0310\u030e",
    "\u0003\u0002\u0002\u0002\u0311\u0308\u0003\u0002\u0002\u0002\u0311\u0312",
    "\u0003\u0002\u0002\u0002\u0312\u031a\u0003\u0002\u0002\u0002\u0313\u0314",
    "\u00076\u0002\u0002\u0314\u0315\u0007\\\u0002\u0002\u0315\u031a\u0005",
    "\u0096L\u0002\u0316\u0317\u00076\u0002\u0002\u0317\u0318\u0007\u008a",
    "\u0002\u0002\u0318\u031a\u0005\u0096L\u0002\u0319\u00a5\u0003\u0002",
    "\u0002\u0002\u0319\u00a6\u0003\u0002\u0002\u0002\u0319\u00a8\u0003\u0002",
    "\u0002\u0002\u0319\u00ad\u0003\u0002\u0002\u0002\u0319\u00b9\u0003\u0002",
    "\u0002\u0002\u0319\u00c3\u0003\u0002\u0002\u0002\u0319\u00ca\u0003\u0002",
    "\u0002\u0002\u0319\u00ec\u0003\u0002\u0002\u0002\u0319\u0106\u0003\u0002",
    "\u0002\u0002\u0319\u010d\u0003\u0002\u0002\u0002\u0319\u0115\u0003\u0002",
    "\u0002\u0002\u0319\u011c\u0003\u0002\u0002\u0002\u0319\u0127\u0003\u0002",
    "\u0002\u0002\u0319\u0138\u0003\u0002\u0002\u0002\u0319\u0147\u0003\u0002",
    "\u0002\u0002\u0319\u0157\u0003\u0002\u0002\u0002\u0319\u015d\u0003\u0002",
    "\u0002\u0002\u0319\u016f\u0003\u0002\u0002\u0002\u0319\u017d\u0003\u0002",
    "\u0002\u0002\u0319\u0184\u0003\u0002\u0002\u0002\u0319\u019d\u0003\u0002",
    "\u0002\u0002\u0319\u01a5\u0003\u0002\u0002\u0002\u0319\u01ac\u0003\u0002",
    "\u0002\u0002\u0319\u01cb\u0003\u0002\u0002\u0002\u0319\u01d3\u0003\u0002",
    "\u0002\u0002\u0319\u01e0\u0003\u0002\u0002\u0002\u0319\u01ef\u0003\u0002",
    "\u0002\u0002\u0319\u01f7\u0003\u0002\u0002\u0002\u0319\u01fa\u0003\u0002",
    "\u0002\u0002\u0319\u020f\u0003\u0002\u0002\u0002\u0319\u0224\u0003\u0002",
    "\u0002\u0002\u0319\u022b\u0003\u0002\u0002\u0002\u0319\u0244\u0003\u0002",
    "\u0002\u0002\u0319\u025e\u0003\u0002\u0002\u0002\u0319\u0267\u0003\u0002",
    "\u0002\u0002\u0319\u027c\u0003\u0002\u0002\u0002\u0319\u0280\u0003\u0002",
    "\u0002\u0002\u0319\u0284\u0003\u0002\u0002\u0002\u0319\u0289\u0003\u0002",
    "\u0002\u0002\u0319\u0290\u0003\u0002\u0002\u0002\u0319\u029e\u0003\u0002",
    "\u0002\u0002\u0319\u02ac\u0003\u0002\u0002\u0002\u0319\u02b2\u0003\u0002",
    "\u0002\u0002\u0319\u02b6\u0003\u0002\u0002\u0002\u0319\u02ba\u0003\u0002",
    "\u0002\u0002\u0319\u02c1\u0003\u0002\u0002\u0002\u0319\u02ca\u0003\u0002",
    "\u0002\u0002\u0319\u02d1\u0003\u0002\u0002\u0002\u0319\u02d3\u0003\u0002",
    "\u0002\u0002\u0319\u02d5\u0003\u0002\u0002\u0002\u0319\u02df\u0003\u0002",
    "\u0002\u0002\u0319\u02e1\u0003\u0002\u0002\u0002\u0319\u02e7\u0003\u0002",
    "\u0002\u0002\u0319\u02ea\u0003\u0002\u0002\u0002\u0319\u02f6\u0003\u0002",
    "\u0002\u0002\u0319\u02fa\u0003\u0002\u0002\u0002\u0319\u02fe\u0003\u0002",
    "\u0002\u0002\u0319\u0303\u0003\u0002\u0002\u0002\u0319\u0306\u0003\u0002",
    "\u0002\u0002\u0319\u0313\u0003\u0002\u0002\u0002\u0319\u0316\u0003\u0002",
    "\u0002\u0002\u031a\t\u0003\u0002\u0002\u0002\u031b\u031d\u0005\f\u0007",
    "\u0002\u031c\u031b\u0003\u0002\u0002\u0002\u031c\u031d\u0003\u0002\u0002",
    "\u0002\u031d\u031e\u0003\u0002\u0002\u0002\u031e\u031f\u00050\u0019",
    "\u0002\u031f\u000b\u0003\u0002\u0002\u0002\u0320\u0322\u0007\u00d2\u0002",
    "\u0002\u0321\u0323\u0007\u0095\u0002\u0002\u0322\u0321\u0003\u0002\u0002",
    "\u0002\u0322\u0323\u0003\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002",
    "\u0002\u0324\u0329\u0005@!\u0002\u0325\u0326\u0007\u0006\u0002\u0002",
    "\u0326\u0328\u0005@!\u0002\u0327\u0325\u0003\u0002\u0002\u0002\u0328",
    "\u032b\u0003\u0002\u0002\u0002\u0329\u0327\u0003\u0002\u0002\u0002\u0329",
    "\u032a\u0003\u0002\u0002\u0002\u032a\r\u0003\u0002\u0002\u0002\u032b",
    "\u0329\u0003\u0002\u0002\u0002\u032c\u032f\u0005\u0010\t\u0002\u032d",
    "\u032f\u0005\u0012\n\u0002\u032e\u032c\u0003\u0002\u0002\u0002\u032e",
    "\u032d\u0003\u0002\u0002\u0002\u032f\u000f\u0003\u0002\u0002\u0002\u0330",
    "\u0331\u0005\u0096L\u0002\u0331\u0334\u0005t;\u0002\u0332\u0333\u0007",
    "~\u0002\u0002\u0333\u0335\u0007\u007f\u0002\u0002\u0334\u0332\u0003",
    "\u0002\u0002\u0002\u0334\u0335\u0003\u0002\u0002\u0002\u0335\u0338\u0003",
    "\u0002\u0002\u0002\u0336\u0337\u0007\"\u0002\u0002\u0337\u0339\u0005",
    "`1\u0002\u0338\u0336\u0003\u0002\u0002\u0002\u0338\u0339\u0003\u0002",
    "\u0002\u0002\u0339\u033c\u0003\u0002\u0002\u0002\u033a\u033b\u0007\u00d2",
    "\u0002\u0002\u033b\u033d\u0005\u0014\u000b\u0002\u033c\u033a\u0003\u0002",
    "\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u0011\u0003\u0002",
    "\u0002\u0002\u033e\u033f\u0007l\u0002\u0002\u033f\u0342\u0005\u008e",
    "H\u0002\u0340\u0341\t\u0005\u0002\u0002\u0341\u0343\u0007\u0092\u0002",
    "\u0002\u0342\u0340\u0003\u0002\u0002\u0002\u0342\u0343\u0003\u0002\u0002",
    "\u0002\u0343\u0013\u0003\u0002\u0002\u0002\u0344\u0345\u0007\u0004\u0002",
    "\u0002\u0345\u034a\u0005\u0016\f\u0002\u0346\u0347\u0007\u0006\u0002",
    "\u0002\u0347\u0349\u0005\u0016\f\u0002\u0348\u0346\u0003\u0002\u0002",
    "\u0002\u0349\u034c\u0003\u0002\u0002\u0002\u034a\u0348\u0003\u0002\u0002",
    "\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b\u034d\u0003\u0002\u0002",
    "\u0002\u034c\u034a\u0003\u0002\u0002\u0002\u034d\u034e\u0007\u0005\u0002",
    "\u0002\u034e\u0015\u0003\u0002\u0002\u0002\u034f\u0350\u0005\u0096L",
    "\u0002\u0350\u0351\u0007\u00d7\u0002\u0002\u0351\u0352\u0005V,\u0002",
    "\u0352\u0017\u0003\u0002\u0002\u0002\u0353\u0354\u0005\u0096L\u0002",
    "\u0354\u0355\u0005t;\u0002\u0355\u0019\u0003\u0002\u0002\u0002\u0356",
    "\u0358\u0005\u001c\u000f\u0002\u0357\u0356\u0003\u0002\u0002\u0002\u0358",
    "\u035b\u0003\u0002\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002\u0359",
    "\u035a\u0003\u0002\u0002\u0002\u035a\u001b\u0003\u0002\u0002\u0002\u035b",
    "\u0359\u0003\u0002\u0002\u0002\u035c\u035d\u0007g\u0002\u0002\u035d",
    "\u0361\u0005(\u0015\u0002\u035e\u0361\u0005*\u0016\u0002\u035f\u0361",
    "\u0005,\u0017\u0002\u0360\u035c\u0003\u0002\u0002\u0002\u0360\u035e",
    "\u0003\u0002\u0002\u0002\u0360\u035f\u0003\u0002\u0002\u0002\u0361\u001d",
    "\u0003\u0002\u0002\u0002\u0362\u0364\u0005 \u0011\u0002\u0363\u0362",
    "\u0003\u0002\u0002\u0002\u0364\u0367\u0003\u0002\u0002\u0002\u0365\u0363",
    "\u0003\u0002\u0002\u0002\u0365\u0366\u0003\u0002\u0002\u0002\u0366\u001f",
    "\u0003\u0002\u0002\u0002\u0367\u0365\u0003\u0002\u0002\u0002\u0368\u0369",
    "\u0005,\u0017\u0002\u0369!\u0003\u0002\u0002\u0002\u036a\u036d\u0005",
    "$\u0013\u0002\u036b\u036d\u0005&\u0014\u0002\u036c\u036a\u0003\u0002",
    "\u0002\u0002\u036c\u036b\u0003\u0002\u0002\u0002\u036d#\u0003\u0002",
    "\u0002\u0002\u036e\u036f\u0007\u009d\u0002\u0002\u036f\u0370\u0005V",
    ",\u0002\u0370%\u0003\u0002\u0002\u0002\u0371\u0374\u0007D\u0002\u0002",
    "\u0372\u0373\u0007u\u0002\u0002\u0373\u0375\u0005.\u0018\u0002\u0374",
    "\u0372\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002\u0002\u0002\u0375",
    "\'\u0003\u0002\u0002\u0002\u0376\u0379\u0007\u00b2\u0002\u0002\u0377",
    "\u0379\u0005\u0096L\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0378",
    "\u0377\u0003\u0002\u0002\u0002\u0379)\u0003\u0002\u0002\u0002\u037a",
    "\u037e\u00077\u0002\u0002\u037b\u037c\u0007~\u0002\u0002\u037c\u037e",
    "\u00077\u0002\u0002\u037d\u037a\u0003\u0002\u0002\u0002\u037d\u037b",
    "\u0003\u0002\u0002\u0002\u037e+\u0003\u0002\u0002\u0002\u037f\u0380",
    "\u0007\u009e\u0002\u0002\u0380\u0381\u0007\u007f\u0002\u0002\u0381\u0382",
    "\u0007\u0083\u0002\u0002\u0382\u0383\u0007\u007f\u0002\u0002\u0383\u0389",
    "\u0007\\\u0002\u0002\u0384\u0385\u0007\u001b\u0002\u0002\u0385\u0386",
    "\u0007\u0083\u0002\u0002\u0386\u0387\u0007\u007f\u0002\u0002\u0387\u0389",
    "\u0007\\\u0002\u0002\u0388\u037f\u0003\u0002\u0002\u0002\u0388\u0384",
    "\u0003\u0002\u0002\u0002\u0389-\u0003\u0002\u0002\u0002\u038a\u038b",
    "\u0005\u0096L\u0002\u038b/\u0003\u0002\u0002\u0002\u038c\u0397\u0005",
    "2\u001a\u0002\u038d\u038e\u0007\u0087\u0002\u0002\u038e\u038f\u0007",
    "\u0019\u0002\u0002\u038f\u0394\u00056\u001c\u0002\u0390\u0391\u0007",
    "\u0006\u0002\u0002\u0391\u0393\u00056\u001c\u0002\u0392\u0390\u0003",
    "\u0002\u0002\u0002\u0393\u0396\u0003\u0002\u0002\u0002\u0394\u0392\u0003",
    "\u0002\u0002\u0002\u0394\u0395\u0003\u0002\u0002\u0002\u0395\u0398\u0003",
    "\u0002\u0002\u0002\u0396\u0394\u0003\u0002\u0002\u0002\u0397\u038d\u0003",
    "\u0002\u0002\u0002\u0397\u0398\u0003\u0002\u0002\u0002\u0398\u039e\u0003",
    "\u0002\u0002\u0002\u0399\u039a\u0007\u0082\u0002\u0002\u039a\u039c\u0007",
    "\u00e6\u0002\u0002\u039b\u039d\t\u0006\u0002\u0002\u039c\u039b\u0003",
    "\u0002\u0002\u0002\u039c\u039d\u0003\u0002\u0002\u0002\u039d\u039f\u0003",
    "\u0002\u0002\u0002\u039e\u0399\u0003\u0002\u0002\u0002\u039e\u039f\u0003",
    "\u0002\u0002\u0002\u039f\u03a2\u0003\u0002\u0002\u0002\u03a0\u03a1\u0007",
    "m\u0002\u0002\u03a1\u03a3\t\u0007\u0002\u0002\u03a2\u03a0\u0003\u0002",
    "\u0002\u0002\u03a2\u03a3\u0003\u0002\u0002\u0002\u03a31\u0003\u0002",
    "\u0002\u0002\u03a4\u03a5\b\u001a\u0001\u0002\u03a5\u03a6\u00054\u001b",
    "\u0002\u03a6\u03b5\u0003\u0002\u0002\u0002\u03a7\u03a8\f\u0004\u0002",
    "\u0002\u03a8\u03aa\u0007^\u0002\u0002\u03a9\u03ab\u0005B\"\u0002\u03aa",
    "\u03a9\u0003\u0002\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002\u0002\u03ab",
    "\u03ac\u0003\u0002\u0002\u0002\u03ac\u03b4\u00052\u001a\u0005\u03ad",
    "\u03ae\f\u0003\u0002\u0002\u03ae\u03b0\t\b\u0002\u0002\u03af\u03b1\u0005",
    "B\"\u0002\u03b0\u03af\u0003\u0002\u0002\u0002\u03b0\u03b1\u0003\u0002",
    "\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002\u0002\u03b2\u03b4\u00052",
    "\u001a\u0004\u03b3\u03a7\u0003\u0002\u0002\u0002\u03b3\u03ad\u0003\u0002",
    "\u0002\u0002\u03b4\u03b7\u0003\u0002\u0002\u0002\u03b5\u03b3\u0003\u0002",
    "\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b63\u0003\u0002",
    "\u0002\u0002\u03b7\u03b5\u0003\u0002\u0002\u0002\u03b8\u03c9\u00058",
    "\u001d\u0002\u03b9\u03ba\u0007\u00b7\u0002\u0002\u03ba\u03c9\u0005\u008e",
    "H\u0002\u03bb\u03bc\u0007\u00cd\u0002\u0002\u03bc\u03c1\u0005V,\u0002",
    "\u03bd\u03be\u0007\u0006\u0002\u0002\u03be\u03c0\u0005V,\u0002\u03bf",
    "\u03bd\u0003\u0002\u0002\u0002\u03c0\u03c3\u0003\u0002\u0002\u0002\u03c1",
    "\u03bf\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2",
    "\u03c9\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c4",
    "\u03c5\u0007\u0004\u0002\u0002\u03c5\u03c6\u00050\u0019\u0002\u03c6",
    "\u03c7\u0007\u0005\u0002\u0002\u03c7\u03c9\u0003\u0002\u0002\u0002\u03c8",
    "\u03b8\u0003\u0002\u0002\u0002\u03c8\u03b9\u0003\u0002\u0002\u0002\u03c8",
    "\u03bb\u0003\u0002\u0002\u0002\u03c8\u03c4\u0003\u0002\u0002\u0002\u03c9",
    "5\u0003\u0002\u0002\u0002\u03ca\u03cc\u0005V,\u0002\u03cb\u03cd\t\t",
    "\u0002\u0002\u03cc\u03cb\u0003\u0002\u0002\u0002\u03cc\u03cd\u0003\u0002",
    "\u0002\u0002\u03cd\u03d0\u0003\u0002\u0002\u0002\u03ce\u03cf\u0007\u0081",
    "\u0002\u0002\u03cf\u03d1\t\n\u0002\u0002\u03d0\u03ce\u0003\u0002\u0002",
    "\u0002\u03d0\u03d1\u0003\u0002\u0002\u0002\u03d17\u0003\u0002\u0002",
    "\u0002\u03d2\u03d4\u0007\u00ab\u0002\u0002\u03d3\u03d5\u0005B\"\u0002",
    "\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002\u0002",
    "\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6\u03db\u0005D#\u0002\u03d7",
    "\u03d8\u0007\u0006\u0002\u0002\u03d8\u03da\u0005D#\u0002\u03d9\u03d7",
    "\u0003\u0002\u0002\u0002\u03da\u03dd\u0003\u0002\u0002\u0002\u03db\u03d9",
    "\u0003\u0002\u0002\u0002\u03db\u03dc\u0003\u0002\u0002\u0002\u03dc\u03e7",
    "\u0003\u0002\u0002\u0002\u03dd\u03db\u0003\u0002\u0002\u0002\u03de\u03df",
    "\u0007K\u0002\u0002\u03df\u03e4\u0005F$\u0002\u03e0\u03e1\u0007\u0006",
    "\u0002\u0002\u03e1\u03e3\u0005F$\u0002\u03e2\u03e0\u0003\u0002\u0002",
    "\u0002\u03e3\u03e6\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003\u0002\u0002",
    "\u0002\u03e4\u03e5\u0003\u0002\u0002\u0002\u03e5\u03e8\u0003\u0002\u0002",
    "\u0002\u03e6\u03e4\u0003\u0002\u0002\u0002\u03e7\u03de\u0003\u0002\u0002",
    "\u0002\u03e7\u03e8\u0003\u0002\u0002\u0002\u03e8\u03eb\u0003\u0002\u0002",
    "\u0002\u03e9\u03ea\u0007\u00d1\u0002\u0002\u03ea\u03ec\u0005X-\u0002",
    "\u03eb\u03e9\u0003\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002",
    "\u03ec\u03f0\u0003\u0002\u0002\u0002\u03ed\u03ee\u0007S\u0002\u0002",
    "\u03ee\u03ef\u0007\u0019\u0002\u0002\u03ef\u03f1\u0005:\u001e\u0002",
    "\u03f0\u03ed\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002\u0002\u0002",
    "\u03f1\u03f4\u0003\u0002\u0002\u0002\u03f2\u03f3\u0007U\u0002\u0002",
    "\u03f3\u03f5\u0005X-\u0002\u03f4\u03f2\u0003\u0002\u0002\u0002\u03f4",
    "\u03f5\u0003\u0002\u0002\u0002\u03f59\u0003\u0002\u0002\u0002\u03f6",
    "\u03f8\u0005B\"\u0002\u03f7\u03f6\u0003\u0002\u0002\u0002\u03f7\u03f8",
    "\u0003\u0002\u0002\u0002\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9\u03fe",
    "\u0005<\u001f\u0002\u03fa\u03fb\u0007\u0006\u0002\u0002\u03fb\u03fd",
    "\u0005<\u001f\u0002\u03fc\u03fa\u0003\u0002\u0002\u0002\u03fd\u0400",
    "\u0003\u0002\u0002\u0002\u03fe\u03fc\u0003\u0002\u0002\u0002\u03fe\u03ff",
    "\u0003\u0002\u0002\u0002\u03ff;\u0003\u0002\u0002\u0002\u0400\u03fe",
    "\u0003\u0002\u0002\u0002\u0401\u042a\u0005> \u0002\u0402\u0403\u0007",
    "\u00a4\u0002\u0002\u0403\u040c\u0007\u0004\u0002\u0002\u0404\u0409\u0005",
    "V,\u0002\u0405\u0406\u0007\u0006\u0002\u0002\u0406\u0408\u0005V,\u0002",
    "\u0407\u0405\u0003\u0002\u0002\u0002\u0408\u040b\u0003\u0002\u0002\u0002",
    "\u0409\u0407\u0003\u0002\u0002\u0002\u0409\u040a\u0003\u0002\u0002\u0002",
    "\u040a\u040d\u0003\u0002\u0002\u0002\u040b\u0409\u0003\u0002\u0002\u0002",
    "\u040c\u0404\u0003\u0002\u0002\u0002\u040c\u040d\u0003\u0002\u0002\u0002",
    "\u040d\u040e\u0003\u0002\u0002\u0002\u040e\u042a\u0007\u0005\u0002\u0002",
    "\u040f\u0410\u0007(\u0002\u0002\u0410\u0419\u0007\u0004\u0002\u0002",
    "\u0411\u0416\u0005V,\u0002\u0412\u0413\u0007\u0006\u0002\u0002\u0413",
    "\u0415\u0005V,\u0002\u0414\u0412\u0003\u0002\u0002\u0002\u0415\u0418",
    "\u0003\u0002\u0002\u0002\u0416\u0414\u0003\u0002\u0002\u0002\u0416\u0417",
    "\u0003\u0002\u0002\u0002\u0417\u041a\u0003\u0002\u0002\u0002\u0418\u0416",
    "\u0003\u0002\u0002\u0002\u0419\u0411\u0003\u0002\u0002\u0002\u0419\u041a",
    "\u0003\u0002\u0002\u0002\u041a\u041b\u0003\u0002\u0002\u0002\u041b\u042a",
    "\u0007\u0005\u0002\u0002\u041c\u041d\u0007T\u0002\u0002\u041d\u041e",
    "\u0007\u00af\u0002\u0002\u041e\u041f\u0007\u0004\u0002\u0002\u041f\u0424",
    "\u0005> \u0002\u0420\u0421\u0007\u0006\u0002\u0002\u0421\u0423\u0005",
    "> \u0002\u0422\u0420\u0003\u0002\u0002\u0002\u0423\u0426\u0003\u0002",
    "\u0002\u0002\u0424\u0422\u0003\u0002\u0002\u0002\u0424\u0425\u0003\u0002",
    "\u0002\u0002\u0425\u0427\u0003\u0002\u0002\u0002\u0426\u0424\u0003\u0002",
    "\u0002\u0002\u0427\u0428\u0007\u0005\u0002\u0002\u0428\u042a\u0003\u0002",
    "\u0002\u0002\u0429\u0401\u0003\u0002\u0002\u0002\u0429\u0402\u0003\u0002",
    "\u0002\u0002\u0429\u040f\u0003\u0002\u0002\u0002\u0429\u041c\u0003\u0002",
    "\u0002\u0002\u042a=\u0003\u0002\u0002\u0002\u042b\u0434\u0007\u0004",
    "\u0002\u0002\u042c\u0431\u0005V,\u0002\u042d\u042e\u0007\u0006\u0002",
    "\u0002\u042e\u0430\u0005V,\u0002\u042f\u042d\u0003\u0002\u0002\u0002",
    "\u0430\u0433\u0003\u0002\u0002\u0002\u0431\u042f\u0003\u0002\u0002\u0002",
    "\u0431\u0432\u0003\u0002\u0002\u0002\u0432\u0435\u0003\u0002\u0002\u0002",
    "\u0433\u0431\u0003\u0002\u0002\u0002\u0434\u042c\u0003\u0002\u0002\u0002",
    "\u0434\u0435\u0003\u0002\u0002\u0002\u0435\u0436\u0003\u0002\u0002\u0002",
    "\u0436\u0439\u0007\u0005\u0002\u0002\u0437\u0439\u0005V,\u0002\u0438",
    "\u042b\u0003\u0002\u0002\u0002\u0438\u0437\u0003\u0002\u0002\u0002\u0439",
    "?\u0003\u0002\u0002\u0002\u043a\u043c\u0005\u0096L\u0002\u043b\u043d",
    "\u0005R*\u0002\u043c\u043b\u0003\u0002\u0002\u0002\u043c\u043d\u0003",
    "\u0002\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e\u043f\u0007",
    "\u0014\u0002\u0002\u043f\u0440\u0007\u0004\u0002\u0002\u0440\u0441\u0005",
    "\n\u0006\u0002\u0441\u0442\u0007\u0005\u0002\u0002\u0442A\u0003\u0002",
    "\u0002\u0002\u0443\u0444\t\u000b\u0002\u0002\u0444C\u0003\u0002\u0002",
    "\u0002\u0445\u044a\u0005V,\u0002\u0446\u0448\u0007\u0014\u0002\u0002",
    "\u0447\u0446\u0003\u0002\u0002\u0002\u0447\u0448\u0003\u0002\u0002\u0002",
    "\u0448\u0449\u0003\u0002\u0002\u0002\u0449\u044b\u0005\u0096L\u0002",
    "\u044a\u0447\u0003\u0002\u0002\u0002\u044a\u044b\u0003\u0002\u0002\u0002",
    "\u044b\u0452\u0003\u0002\u0002\u0002\u044c\u044d\u0005\u008eH\u0002",
    "\u044d\u044e\u0007\u0003\u0002\u0002\u044e\u044f\u0007\u00df\u0002\u0002",
    "\u044f\u0452\u0003\u0002\u0002\u0002\u0450\u0452\u0007\u00df\u0002\u0002",
    "\u0451\u0445\u0003\u0002\u0002\u0002\u0451\u044c\u0003\u0002\u0002\u0002",
    "\u0451\u0450\u0003\u0002\u0002\u0002\u0452E\u0003\u0002\u0002\u0002",
    "\u0453\u0454\b$\u0001\u0002\u0454\u0455\u0005L\'\u0002\u0455\u0468\u0003",
    "\u0002\u0002\u0002\u0456\u0464\f\u0004\u0002\u0002\u0457\u0458\u0007",
    "\'\u0002\u0002\u0458\u0459\u0007f\u0002\u0002\u0459\u0465\u0005L\'\u0002",
    "\u045a\u045b\u0005H%\u0002\u045b\u045c\u0007f\u0002\u0002\u045c\u045d",
    "\u0005F$\u0002\u045d\u045e\u0005J&\u0002\u045e\u0465\u0003\u0002\u0002",
    "\u0002\u045f\u0460\u0007v\u0002\u0002\u0460\u0461\u0005H%\u0002\u0461",
    "\u0462\u0007f\u0002\u0002\u0462\u0463\u0005L\'\u0002\u0463\u0465\u0003",
    "\u0002\u0002\u0002\u0464\u0457\u0003\u0002\u0002\u0002\u0464\u045a\u0003",
    "\u0002\u0002\u0002\u0464\u045f\u0003\u0002\u0002\u0002\u0465\u0467\u0003",
    "\u0002\u0002\u0002\u0466\u0456\u0003\u0002\u0002\u0002\u0467\u046a\u0003",
    "\u0002\u0002\u0002\u0468\u0466\u0003\u0002\u0002\u0002\u0468\u0469\u0003",
    "\u0002\u0002\u0002\u0469G\u0003\u0002\u0002\u0002\u046a\u0468\u0003",
    "\u0002\u0002\u0002\u046b\u046d\u0007[\u0002\u0002\u046c\u046b\u0003",
    "\u0002\u0002\u0002\u046c\u046d\u0003\u0002\u0002\u0002\u046d\u047b\u0003",
    "\u0002\u0002\u0002\u046e\u0470\u0007j\u0002\u0002\u046f\u0471\u0007",
    "\u0089\u0002\u0002\u0470\u046f\u0003\u0002\u0002\u0002\u0470\u0471\u0003",
    "\u0002\u0002\u0002\u0471\u047b\u0003\u0002\u0002\u0002\u0472\u0474\u0007",
    "\u00a0\u0002\u0002\u0473\u0475\u0007\u0089\u0002\u0002\u0474\u0473\u0003",
    "\u0002\u0002\u0002\u0474\u0475\u0003\u0002\u0002\u0002\u0475\u047b\u0003",
    "\u0002\u0002\u0002\u0476\u0478\u0007L\u0002\u0002\u0477\u0479\u0007",
    "\u0089\u0002\u0002\u0478\u0477\u0003\u0002\u0002\u0002\u0478\u0479\u0003",
    "\u0002\u0002\u0002\u0479\u047b\u0003\u0002\u0002\u0002\u047a\u046c\u0003",
    "\u0002\u0002\u0002\u047a\u046e\u0003\u0002\u0002\u0002\u047a\u0472\u0003",
    "\u0002\u0002\u0002\u047a\u0476\u0003\u0002\u0002\u0002\u047bI\u0003",
    "\u0002\u0002\u0002\u047c\u047d\u0007\u0083\u0002\u0002\u047d\u048b\u0005",
    "X-\u0002\u047e\u047f\u0007\u00cb\u0002\u0002\u047f\u0480\u0007\u0004",
    "\u0002\u0002\u0480\u0485\u0005\u0096L\u0002\u0481\u0482\u0007\u0006",
    "\u0002\u0002\u0482\u0484\u0005\u0096L\u0002\u0483\u0481\u0003\u0002",
    "\u0002\u0002\u0484\u0487\u0003\u0002\u0002\u0002\u0485\u0483\u0003\u0002",
    "\u0002\u0002\u0485\u0486\u0003\u0002\u0002\u0002\u0486\u0488\u0003\u0002",
    "\u0002\u0002\u0487\u0485\u0003\u0002\u0002\u0002\u0488\u0489\u0007\u0005",
    "\u0002\u0002\u0489\u048b\u0003\u0002\u0002\u0002\u048a\u047c\u0003\u0002",
    "\u0002\u0002\u048a\u047e\u0003\u0002\u0002\u0002\u048bK\u0003\u0002",
    "\u0002\u0002\u048c\u0493\u0005P)\u0002\u048d\u048e\u0007\u00b9\u0002",
    "\u0002\u048e\u048f\u0005N(\u0002\u048f\u0490\u0007\u0004\u0002\u0002",
    "\u0490\u0491\u0005V,\u0002\u0491\u0492\u0007\u0005\u0002\u0002\u0492",
    "\u0494\u0003\u0002\u0002\u0002\u0493\u048d\u0003\u0002\u0002\u0002\u0493",
    "\u0494\u0003\u0002\u0002\u0002\u0494M\u0003\u0002\u0002\u0002\u0495",
    "\u0496\t\f\u0002\u0002\u0496O\u0003\u0002\u0002\u0002\u0497\u049f\u0005",
    "T+\u0002\u0498\u049a\u0007\u0014\u0002\u0002\u0499\u0498\u0003\u0002",
    "\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002\u049a\u049b\u0003\u0002",
    "\u0002\u0002\u049b\u049d\u0005\u0096L\u0002\u049c\u049e\u0005R*\u0002",
    "\u049d\u049c\u0003\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002\u0002",
    "\u049e\u04a0\u0003\u0002\u0002\u0002\u049f\u0499\u0003\u0002\u0002\u0002",
    "\u049f\u04a0\u0003\u0002\u0002\u0002\u04a0Q\u0003\u0002\u0002\u0002",
    "\u04a1\u04a2\u0007\u0004\u0002\u0002\u04a2\u04a7\u0005\u0096L\u0002",
    "\u04a3\u04a4\u0007\u0006\u0002\u0002\u04a4\u04a6\u0005\u0096L\u0002",
    "\u04a5\u04a3\u0003\u0002\u0002\u0002\u04a6\u04a9\u0003\u0002\u0002\u0002",
    "\u04a7\u04a5\u0003\u0002\u0002\u0002\u04a7\u04a8\u0003\u0002\u0002\u0002",
    "\u04a8\u04aa\u0003\u0002\u0002\u0002\u04a9\u04a7\u0003\u0002\u0002\u0002",
    "\u04aa\u04ab\u0007\u0005\u0002\u0002\u04abS\u0003\u0002\u0002\u0002",
    "\u04ac\u04ca\u0005\u008eH\u0002\u04ad\u04ae\u0007\u0004\u0002\u0002",
    "\u04ae\u04af\u0005\n\u0006\u0002\u04af\u04b0\u0007\u0005\u0002\u0002",
    "\u04b0\u04ca\u0003\u0002\u0002\u0002\u04b1\u04b2\u0007\u00c8\u0002\u0002",
    "\u04b2\u04b3\u0007\u0004\u0002\u0002\u04b3\u04b8\u0005V,\u0002\u04b4",
    "\u04b5\u0007\u0006\u0002\u0002\u04b5\u04b7\u0005V,\u0002\u04b6\u04b4",
    "\u0003\u0002\u0002\u0002\u04b7\u04ba\u0003\u0002\u0002\u0002\u04b8\u04b6",
    "\u0003\u0002\u0002\u0002\u04b8\u04b9\u0003\u0002\u0002\u0002\u04b9\u04bb",
    "\u0003\u0002\u0002\u0002\u04ba\u04b8\u0003\u0002\u0002\u0002\u04bb\u04be",
    "\u0007\u0005\u0002\u0002\u04bc\u04bd\u0007\u00d2\u0002\u0002\u04bd\u04bf",
    "\u0007\u0088\u0002\u0002\u04be\u04bc\u0003\u0002\u0002\u0002\u04be\u04bf",
    "\u0003\u0002\u0002\u0002\u04bf\u04ca\u0003\u0002\u0002\u0002\u04c0\u04c1",
    "\u0007i\u0002\u0002\u04c1\u04c2\u0007\u0004\u0002\u0002\u04c2\u04c3",
    "\u0005\n\u0006\u0002\u04c3\u04c4\u0007\u0005\u0002\u0002\u04c4\u04ca",
    "\u0003\u0002\u0002\u0002\u04c5\u04c6\u0007\u0004\u0002\u0002\u04c6\u04c7",
    "\u0005F$\u0002\u04c7\u04c8\u0007\u0005\u0002\u0002\u04c8\u04ca\u0003",
    "\u0002\u0002\u0002\u04c9\u04ac\u0003\u0002\u0002\u0002\u04c9\u04ad\u0003",
    "\u0002\u0002\u0002\u04c9\u04b1\u0003\u0002\u0002\u0002\u04c9\u04c0\u0003",
    "\u0002\u0002\u0002\u04c9\u04c5\u0003\u0002\u0002\u0002\u04caU\u0003",
    "\u0002\u0002\u0002\u04cb\u04cc\u0005X-\u0002\u04ccW\u0003\u0002\u0002",
    "\u0002\u04cd\u04ce\b-\u0001\u0002\u04ce\u04d0\u0005\\/\u0002\u04cf\u04d1",
    "\u0005Z.\u0002\u04d0\u04cf\u0003\u0002\u0002\u0002\u04d0\u04d1\u0003",
    "\u0002\u0002\u0002\u04d1\u04d5\u0003\u0002\u0002\u0002\u04d2\u04d3\u0007",
    "~\u0002\u0002\u04d3\u04d5\u0005X-\u0005\u04d4\u04cd\u0003\u0002\u0002",
    "\u0002\u04d4\u04d2\u0003\u0002\u0002\u0002\u04d5\u04de\u0003\u0002\u0002",
    "\u0002\u04d6\u04d7\f\u0004\u0002\u0002\u04d7\u04d8\u0007\u0011\u0002",
    "\u0002\u04d8\u04dd\u0005X-\u0005\u04d9\u04da\f\u0003\u0002\u0002\u04da",
    "\u04db\u0007\u0086\u0002\u0002\u04db\u04dd\u0005X-\u0004\u04dc\u04d6",
    "\u0003\u0002\u0002\u0002\u04dc\u04d9\u0003\u0002\u0002\u0002\u04dd\u04e0",
    "\u0003\u0002\u0002\u0002\u04de\u04dc\u0003\u0002\u0002\u0002\u04de\u04df",
    "\u0003\u0002\u0002\u0002\u04dfY\u0003\u0002\u0002\u0002\u04e0\u04de",
    "\u0003\u0002\u0002\u0002\u04e1\u04e2\u0005f4\u0002\u04e2\u04e3\u0005",
    "\\/\u0002\u04e3\u051f\u0003\u0002\u0002\u0002\u04e4\u04e5\u0005f4\u0002",
    "\u04e5\u04e6\u0005h5\u0002\u04e6\u04e7\u0007\u0004\u0002\u0002\u04e7",
    "\u04e8\u0005\n\u0006\u0002\u04e8\u04e9\u0007\u0005\u0002\u0002\u04e9",
    "\u051f\u0003\u0002\u0002\u0002\u04ea\u04ec\u0007~\u0002\u0002\u04eb",
    "\u04ea\u0003\u0002\u0002\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002\u04ec",
    "\u04ed\u0003\u0002\u0002\u0002\u04ed\u04ee\u0007\u0018\u0002\u0002\u04ee",
    "\u04ef\u0005\\/\u0002\u04ef\u04f0\u0007\u0011\u0002\u0002\u04f0\u04f1",
    "\u0005\\/\u0002\u04f1\u051f\u0003\u0002\u0002\u0002\u04f2\u04f4\u0007",
    "~\u0002\u0002\u04f3\u04f2\u0003\u0002\u0002\u0002\u04f3\u04f4\u0003",
    "\u0002\u0002\u0002\u04f4\u04f5\u0003\u0002\u0002\u0002\u04f5\u04f6\u0007",
    "Y\u0002\u0002\u04f6\u04f7\u0007\u0004\u0002\u0002\u04f7\u04fc\u0005",
    "V,\u0002\u04f8\u04f9\u0007\u0006\u0002\u0002\u04f9\u04fb\u0005V,\u0002",
    "\u04fa\u04f8\u0003\u0002\u0002\u0002\u04fb\u04fe\u0003\u0002\u0002\u0002",
    "\u04fc\u04fa\u0003\u0002\u0002\u0002\u04fc\u04fd\u0003\u0002\u0002\u0002",
    "\u04fd\u04ff\u0003\u0002\u0002\u0002\u04fe\u04fc\u0003\u0002\u0002\u0002",
    "\u04ff\u0500\u0007\u0005\u0002\u0002\u0500\u051f\u0003\u0002\u0002\u0002",
    "\u0501\u0503\u0007~\u0002\u0002\u0502\u0501\u0003\u0002\u0002\u0002",
    "\u0502\u0503\u0003\u0002\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002",
    "\u0504\u0505\u0007Y\u0002\u0002\u0505\u0506\u0007\u0004\u0002\u0002",
    "\u0506\u0507\u0005\n\u0006\u0002\u0507\u0508\u0007\u0005\u0002\u0002",
    "\u0508\u051f\u0003\u0002\u0002\u0002\u0509\u050b\u0007~\u0002\u0002",
    "\u050a\u0509\u0003\u0002\u0002\u0002\u050a\u050b\u0003\u0002\u0002\u0002",
    "\u050b\u050c\u0003\u0002\u0002\u0002\u050c\u050d\u0007l\u0002\u0002",
    "\u050d\u0510\u0005\\/\u0002\u050e\u050f\u0007=\u0002\u0002\u050f\u0511",
    "\u0005\\/\u0002\u0510\u050e\u0003\u0002\u0002\u0002\u0510\u0511\u0003",
    "\u0002\u0002\u0002\u0511\u051f\u0003\u0002\u0002\u0002\u0512\u0514\u0007",
    "c\u0002\u0002\u0513\u0515\u0007~\u0002\u0002\u0514\u0513\u0003\u0002",
    "\u0002\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515\u0516\u0003\u0002",
    "\u0002\u0002\u0516\u051f\u0007\u007f\u0002\u0002\u0517\u0519\u0007c",
    "\u0002\u0002\u0518\u051a\u0007~\u0002\u0002\u0519\u0518\u0003\u0002",
    "\u0002\u0002\u0519\u051a\u0003\u0002\u0002\u0002\u051a\u051b\u0003\u0002",
    "\u0002\u0002\u051b\u051c\u00078\u0002\u0002\u051c\u051d\u0007K\u0002",
    "\u0002\u051d\u051f\u0005\\/\u0002\u051e\u04e1\u0003\u0002\u0002\u0002",
    "\u051e\u04e4\u0003\u0002\u0002\u0002\u051e\u04eb\u0003\u0002\u0002\u0002",
    "\u051e\u04f3\u0003\u0002\u0002\u0002\u051e\u0502\u0003\u0002\u0002\u0002",
    "\u051e\u050a\u0003\u0002\u0002\u0002\u051e\u0512\u0003\u0002\u0002\u0002",
    "\u051e\u0517\u0003\u0002\u0002\u0002\u051f[\u0003\u0002\u0002\u0002",
    "\u0520\u0521\b/\u0001\u0002\u0521\u0525\u0005^0\u0002\u0522\u0523\t",
    "\r\u0002\u0002\u0523\u0525\u0005\\/\u0006\u0524\u0520\u0003\u0002\u0002",
    "\u0002\u0524\u0522\u0003\u0002\u0002\u0002\u0525\u0534\u0003\u0002\u0002",
    "\u0002\u0526\u0527\f\u0005\u0002\u0002\u0527\u0528\t\u000e\u0002\u0002",
    "\u0528\u0533\u0005\\/\u0006\u0529\u052a\f\u0004\u0002\u0002\u052a\u052b",
    "\t\r\u0002\u0002\u052b\u0533\u0005\\/\u0005\u052c\u052d\f\u0003\u0002",
    "\u0002\u052d\u052e\u0007\u00e2\u0002\u0002\u052e\u0533\u0005\\/\u0004",
    "\u052f\u0530\f\u0007\u0002\u0002\u0530\u0531\u0007\u0016\u0002\u0002",
    "\u0531\u0533\u0005d3\u0002\u0532\u0526\u0003\u0002\u0002\u0002\u0532",
    "\u0529\u0003\u0002\u0002\u0002\u0532\u052c\u0003\u0002\u0002\u0002\u0532",
    "\u052f\u0003\u0002\u0002\u0002\u0533\u0536\u0003\u0002\u0002\u0002\u0534",
    "\u0532\u0003\u0002\u0002\u0002\u0534\u0535\u0003\u0002\u0002\u0002\u0535",
    "]\u0003\u0002\u0002\u0002\u0536\u0534\u0003\u0002\u0002\u0002\u0537",
    "\u0538\b0\u0001\u0002\u0538\u0627\u0007\u007f\u0002\u0002\u0539\u0627",
    "\u0005l7\u0002\u053a\u053b\u0005\u0096L\u0002\u053b\u053c\u0005`1\u0002",
    "\u053c\u0627\u0003\u0002\u0002\u0002\u053d\u053e\u0007\u00ef\u0002\u0002",
    "\u053e\u0627\u0005`1\u0002\u053f\u0627\u0005\u0098M\u0002\u0540\u0627",
    "\u0005j6\u0002\u0541\u0627\u0005`1\u0002\u0542\u0627\u0007\u00e5\u0002",
    "\u0002\u0543\u0627\u0007\u0007\u0002\u0002\u0544\u0545\u0007\u008e\u0002",
    "\u0002\u0545\u0546\u0007\u0004\u0002\u0002\u0546\u0547\u0005\\/\u0002",
    "\u0547\u0548\u0007Y\u0002\u0002\u0548\u0549\u0005\\/\u0002\u0549\u054a",
    "\u0007\u0005\u0002\u0002\u054a\u0627\u0003\u0002\u0002\u0002\u054b\u054c",
    "\u0007\u0004\u0002\u0002\u054c\u054f\u0005V,\u0002\u054d\u054e\u0007",
    "\u0006\u0002\u0002\u054e\u0550\u0005V,\u0002\u054f\u054d\u0003\u0002",
    "\u0002\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551\u054f\u0003\u0002",
    "\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002\u0552\u0553\u0003\u0002",
    "\u0002\u0002\u0553\u0554\u0007\u0005\u0002\u0002\u0554\u0627\u0003\u0002",
    "\u0002\u0002\u0555\u0556\u0007\u00a5\u0002\u0002\u0556\u0557\u0007\u0004",
    "\u0002\u0002\u0557\u055c\u0005V,\u0002\u0558\u0559\u0007\u0006\u0002",
    "\u0002\u0559\u055b\u0005V,\u0002\u055a\u0558\u0003\u0002\u0002\u0002",
    "\u055b\u055e\u0003\u0002\u0002\u0002\u055c\u055a\u0003\u0002\u0002\u0002",
    "\u055c\u055d\u0003\u0002\u0002\u0002\u055d\u055f\u0003\u0002\u0002\u0002",
    "\u055e\u055c\u0003\u0002\u0002\u0002\u055f\u0560\u0007\u0005\u0002\u0002",
    "\u0560\u0627\u0003\u0002\u0002\u0002\u0561\u0562\u0005\u008eH\u0002",
    "\u0562\u0563\u0007\u0004\u0002\u0002\u0563\u0564\u0007\u00df\u0002\u0002",
    "\u0564\u0566\u0007\u0005\u0002\u0002\u0565\u0567\u0005|?\u0002\u0566",
    "\u0565\u0003\u0002\u0002\u0002\u0566\u0567\u0003\u0002\u0002\u0002\u0567",
    "\u0569\u0003\u0002\u0002\u0002\u0568\u056a\u0005~@\u0002\u0569\u0568",
    "\u0003\u0002\u0002\u0002\u0569\u056a\u0003\u0002\u0002\u0002\u056a\u0627",
    "\u0003\u0002\u0002\u0002\u056b\u056c\u0005\u008eH\u0002\u056c\u0578",
    "\u0007\u0004\u0002\u0002\u056d\u056f\u0005B\"\u0002\u056e\u056d\u0003",
    "\u0002\u0002\u0002\u056e\u056f\u0003\u0002\u0002\u0002\u056f\u0570\u0003",
    "\u0002\u0002\u0002\u0570\u0575\u0005V,\u0002\u0571\u0572\u0007\u0006",
    "\u0002\u0002\u0572\u0574\u0005V,\u0002\u0573\u0571\u0003\u0002\u0002",
    "\u0002\u0574\u0577\u0003\u0002\u0002\u0002\u0575\u0573\u0003\u0002\u0002",
    "\u0002\u0575\u0576\u0003\u0002\u0002\u0002\u0576\u0579\u0003\u0002\u0002",
    "\u0002\u0577\u0575\u0003\u0002\u0002\u0002\u0578\u056e\u0003\u0002\u0002",
    "\u0002\u0578\u0579\u0003\u0002\u0002\u0002\u0579\u0584\u0003\u0002\u0002",
    "\u0002\u057a\u057b\u0007\u0087\u0002\u0002\u057b\u057c\u0007\u0019\u0002",
    "\u0002\u057c\u0581\u00056\u001c\u0002\u057d\u057e\u0007\u0006\u0002",
    "\u0002\u057e\u0580\u00056\u001c\u0002\u057f\u057d\u0003\u0002\u0002",
    "\u0002\u0580\u0583\u0003\u0002\u0002\u0002\u0581\u057f\u0003\u0002\u0002",
    "\u0002\u0581\u0582\u0003\u0002\u0002\u0002\u0582\u0585\u0003\u0002\u0002",
    "\u0002\u0583\u0581\u0003\u0002\u0002\u0002\u0584\u057a\u0003\u0002\u0002",
    "\u0002\u0584\u0585\u0003\u0002\u0002\u0002\u0585\u0586\u0003\u0002\u0002",
    "\u0002\u0586\u0588\u0007\u0005\u0002\u0002\u0587\u0589\u0005|?\u0002",
    "\u0588\u0587\u0003\u0002\u0002\u0002\u0588\u0589\u0003\u0002\u0002\u0002",
    "\u0589\u058e\u0003\u0002\u0002\u0002\u058a\u058c\u0005b2\u0002\u058b",
    "\u058a\u0003\u0002\u0002\u0002\u058b\u058c\u0003\u0002\u0002\u0002\u058c",
    "\u058d\u0003\u0002\u0002\u0002\u058d\u058f\u0005~@\u0002\u058e\u058b",
    "\u0003\u0002\u0002\u0002\u058e\u058f\u0003\u0002\u0002\u0002\u058f\u0627",
    "\u0003\u0002\u0002\u0002\u0590\u0591\u0005\u0096L\u0002\u0591\u0592",
    "\u0007\b\u0002\u0002\u0592\u0593\u0005V,\u0002\u0593\u0627\u0003\u0002",
    "\u0002\u0002\u0594\u059d\u0007\u0004\u0002\u0002\u0595\u059a\u0005\u0096",
    "L\u0002\u0596\u0597\u0007\u0006\u0002\u0002\u0597\u0599\u0005\u0096",
    "L\u0002\u0598\u0596\u0003\u0002\u0002\u0002\u0599\u059c\u0003\u0002",
    "\u0002\u0002\u059a\u0598\u0003\u0002\u0002\u0002\u059a\u059b\u0003\u0002",
    "\u0002\u0002\u059b\u059e\u0003\u0002\u0002\u0002\u059c\u059a\u0003\u0002",
    "\u0002\u0002\u059d\u0595\u0003\u0002\u0002\u0002\u059d\u059e\u0003\u0002",
    "\u0002\u0002\u059e\u059f\u0003\u0002\u0002\u0002\u059f\u05a0\u0007\u0005",
    "\u0002\u0002\u05a0\u05a1\u0007\b\u0002\u0002\u05a1\u0627\u0005V,\u0002",
    "\u05a2\u05a3\u0007\u0004\u0002\u0002\u05a3\u05a4\u0005\n\u0006\u0002",
    "\u05a4\u05a5\u0007\u0005\u0002\u0002\u05a5\u0627\u0003\u0002\u0002\u0002",
    "\u05a6\u05a7\u0007A\u0002\u0002\u05a7\u05a8\u0007\u0004\u0002\u0002",
    "\u05a8\u05a9\u0005\n\u0006\u0002\u05a9\u05aa\u0007\u0005\u0002\u0002",
    "\u05aa\u0627\u0003\u0002\u0002\u0002\u05ab\u05ac\u0007\u001d\u0002\u0002",
    "\u05ac\u05ae\u0005\\/\u0002\u05ad\u05af\u0005z>\u0002\u05ae\u05ad\u0003",
    "\u0002\u0002\u0002\u05af\u05b0\u0003\u0002\u0002\u0002\u05b0\u05ae\u0003",
    "\u0002\u0002\u0002\u05b0\u05b1\u0003\u0002\u0002\u0002\u05b1\u05b4\u0003",
    "\u0002\u0002\u0002\u05b2\u05b3\u0007;\u0002\u0002\u05b3\u05b5\u0005",
    "V,\u0002\u05b4\u05b2\u0003\u0002\u0002\u0002\u05b4\u05b5\u0003\u0002",
    "\u0002\u0002\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6\u05b7\u0007<",
    "\u0002\u0002\u05b7\u0627\u0003\u0002\u0002\u0002\u05b8\u05ba\u0007\u001d",
    "\u0002\u0002\u05b9\u05bb\u0005z>\u0002\u05ba\u05b9\u0003\u0002\u0002",
    "\u0002\u05bb\u05bc\u0003\u0002\u0002\u0002\u05bc\u05ba\u0003\u0002\u0002",
    "\u0002\u05bc\u05bd\u0003\u0002\u0002\u0002\u05bd\u05c0\u0003\u0002\u0002",
    "\u0002\u05be\u05bf\u0007;\u0002\u0002\u05bf\u05c1\u0005V,\u0002\u05c0",
    "\u05be\u0003\u0002\u0002\u0002\u05c0\u05c1\u0003\u0002\u0002\u0002\u05c1",
    "\u05c2\u0003\u0002\u0002\u0002\u05c2\u05c3\u0007<\u0002\u0002\u05c3",
    "\u0627\u0003\u0002\u0002\u0002\u05c4\u05c5\u0007\u001e\u0002\u0002\u05c5",
    "\u05c6\u0007\u0004\u0002\u0002\u05c6\u05c7\u0005V,\u0002\u05c7\u05c8",
    "\u0007\u0014\u0002\u0002\u05c8\u05c9\u0005t;\u0002\u05c9\u05ca\u0007",
    "\u0005\u0002\u0002\u05ca\u0627\u0003\u0002\u0002\u0002\u05cb\u05cc\u0007",
    "\u00c2\u0002\u0002\u05cc\u05cd\u0007\u0004\u0002\u0002\u05cd\u05ce\u0005",
    "V,\u0002\u05ce\u05cf\u0007\u0014\u0002\u0002\u05cf\u05d0\u0005t;\u0002",
    "\u05d0\u05d1\u0007\u0005\u0002\u0002\u05d1\u0627\u0003\u0002\u0002\u0002",
    "\u05d2\u05d3\u0007\u0013\u0002\u0002\u05d3\u05dc\u0007\t\u0002\u0002",
    "\u05d4\u05d9\u0005V,\u0002\u05d5\u05d6\u0007\u0006\u0002\u0002\u05d6",
    "\u05d8\u0005V,\u0002\u05d7\u05d5\u0003\u0002\u0002\u0002\u05d8\u05db",
    "\u0003\u0002\u0002\u0002\u05d9\u05d7\u0003\u0002\u0002\u0002\u05d9\u05da",
    "\u0003\u0002\u0002\u0002\u05da\u05dd\u0003\u0002\u0002\u0002\u05db\u05d9",
    "\u0003\u0002\u0002\u0002\u05dc\u05d4\u0003\u0002\u0002\u0002\u05dc\u05dd",
    "\u0003\u0002\u0002\u0002\u05dd\u05de\u0003\u0002\u0002\u0002\u05de\u0627",
    "\u0007\n\u0002\u0002\u05df\u0627\u0005\u0096L\u0002\u05e0\u0627\u0007",
    "*\u0002\u0002\u05e1\u05e5\u0007,\u0002\u0002\u05e2\u05e3\u0007\u0004",
    "\u0002\u0002\u05e3\u05e4\u0007\u00e6\u0002\u0002\u05e4\u05e6\u0007\u0005",
    "\u0002\u0002\u05e5\u05e2\u0003\u0002\u0002\u0002\u05e5\u05e6\u0003\u0002",
    "\u0002\u0002\u05e6\u0627\u0003\u0002\u0002\u0002\u05e7\u05eb\u0007-",
    "\u0002\u0002\u05e8\u05e9\u0007\u0004\u0002\u0002\u05e9\u05ea\u0007\u00e6",
    "\u0002\u0002\u05ea\u05ec\u0007\u0005\u0002\u0002\u05eb\u05e8\u0003\u0002",
    "\u0002\u0002\u05eb\u05ec\u0003\u0002\u0002\u0002\u05ec\u0627\u0003\u0002",
    "\u0002\u0002\u05ed\u05f1\u0007n\u0002\u0002\u05ee\u05ef\u0007\u0004",
    "\u0002\u0002\u05ef\u05f0\u0007\u00e6\u0002\u0002\u05f0\u05f2\u0007\u0005",
    "\u0002\u0002\u05f1\u05ee\u0003\u0002\u0002\u0002\u05f1\u05f2\u0003\u0002",
    "\u0002\u0002\u05f2\u0627\u0003\u0002\u0002\u0002\u05f3\u05f7\u0007o",
    "\u0002\u0002\u05f4\u05f5\u0007\u0004\u0002\u0002\u05f5\u05f6\u0007\u00e6",
    "\u0002\u0002\u05f6\u05f8\u0007\u0005\u0002\u0002\u05f7\u05f4\u0003\u0002",
    "\u0002\u0002\u05f7\u05f8\u0003\u0002\u0002\u0002\u05f8\u0627\u0003\u0002",
    "\u0002\u0002\u05f9\u0627\u0007.\u0002\u0002\u05fa\u05fb\u0007\u00b5",
    "\u0002\u0002\u05fb\u05fc\u0007\u0004\u0002\u0002\u05fc\u05fd\u0005\\",
    "/\u0002\u05fd\u05fe\u0007K\u0002\u0002\u05fe\u0601\u0005\\/\u0002\u05ff",
    "\u0600\u0007I\u0002\u0002\u0600\u0602\u0005\\/\u0002\u0601\u05ff\u0003",
    "\u0002\u0002\u0002\u0601\u0602\u0003\u0002\u0002\u0002\u0602\u0603\u0003",
    "\u0002\u0002\u0002\u0603\u0604\u0007\u0005\u0002\u0002\u0604\u0627\u0003",
    "\u0002\u0002\u0002\u0605\u0606\u0007}\u0002\u0002\u0606\u0607\u0007",
    "\u0004\u0002\u0002\u0607\u060a\u0005\\/\u0002\u0608\u0609\u0007\u0006",
    "\u0002\u0002\u0609\u060b\u0005p9\u0002\u060a\u0608\u0003\u0002\u0002",
    "\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b\u060c\u0003\u0002\u0002",
    "\u0002\u060c\u060d\u0007\u0005\u0002\u0002\u060d\u0627\u0003\u0002\u0002",
    "\u0002\u060e\u060f\u0007C\u0002\u0002\u060f\u0610\u0007\u0004\u0002",
    "\u0002\u0610\u0611\u0005\u0096L\u0002\u0611\u0612\u0007K\u0002\u0002",
    "\u0612\u0613\u0005\\/\u0002\u0613\u0614\u0007\u0005\u0002\u0002\u0614",
    "\u0627\u0003\u0002\u0002\u0002\u0615\u0616\u0007\u0004\u0002\u0002\u0616",
    "\u0617\u0005V,\u0002\u0617\u0618\u0007\u0005\u0002\u0002\u0618\u0627",
    "\u0003\u0002\u0002\u0002\u0619\u061a\u0007T\u0002\u0002\u061a\u0623",
    "\u0007\u0004\u0002\u0002\u061b\u0620\u0005\u008eH\u0002\u061c\u061d",
    "\u0007\u0006\u0002\u0002\u061d\u061f\u0005\u008eH\u0002\u061e\u061c",
    "\u0003\u0002\u0002\u0002\u061f\u0622\u0003\u0002\u0002\u0002\u0620\u061e",
    "\u0003\u0002\u0002\u0002\u0620\u0621\u0003\u0002\u0002\u0002\u0621\u0624",
    "\u0003\u0002\u0002\u0002\u0622\u0620\u0003\u0002\u0002\u0002\u0623\u061b",
    "\u0003\u0002\u0002\u0002\u0623\u0624\u0003\u0002\u0002\u0002\u0624\u0625",
    "\u0003\u0002\u0002\u0002\u0625\u0627\u0007\u0005\u0002\u0002\u0626\u0537",
    "\u0003\u0002\u0002\u0002\u0626\u0539\u0003\u0002\u0002\u0002\u0626\u053a",
    "\u0003\u0002\u0002\u0002\u0626\u053d\u0003\u0002\u0002\u0002\u0626\u053f",
    "\u0003\u0002\u0002\u0002\u0626\u0540\u0003\u0002\u0002\u0002\u0626\u0541",
    "\u0003\u0002\u0002\u0002\u0626\u0542\u0003\u0002\u0002\u0002\u0626\u0543",
    "\u0003\u0002\u0002\u0002\u0626\u0544\u0003\u0002\u0002\u0002\u0626\u054b",
    "\u0003\u0002\u0002\u0002\u0626\u0555\u0003\u0002\u0002\u0002\u0626\u0561",
    "\u0003\u0002\u0002\u0002\u0626\u056b\u0003\u0002\u0002\u0002\u0626\u0590",
    "\u0003\u0002\u0002\u0002\u0626\u0594\u0003\u0002\u0002\u0002\u0626\u05a2",
    "\u0003\u0002\u0002\u0002\u0626\u05a6\u0003\u0002\u0002\u0002\u0626\u05ab",
    "\u0003\u0002\u0002\u0002\u0626\u05b8\u0003\u0002\u0002\u0002\u0626\u05c4",
    "\u0003\u0002\u0002\u0002\u0626\u05cb\u0003\u0002\u0002\u0002\u0626\u05d2",
    "\u0003\u0002\u0002\u0002\u0626\u05df\u0003\u0002\u0002\u0002\u0626\u05e0",
    "\u0003\u0002\u0002\u0002\u0626\u05e1\u0003\u0002\u0002\u0002\u0626\u05e7",
    "\u0003\u0002\u0002\u0002\u0626\u05ed\u0003\u0002\u0002\u0002\u0626\u05f3",
    "\u0003\u0002\u0002\u0002\u0626\u05f9\u0003\u0002\u0002\u0002\u0626\u05fa",
    "\u0003\u0002\u0002\u0002\u0626\u0605\u0003\u0002\u0002\u0002\u0626\u060e",
    "\u0003\u0002\u0002\u0002\u0626\u0615\u0003\u0002\u0002\u0002\u0626\u0619",
    "\u0003\u0002\u0002\u0002\u0627\u0632\u0003\u0002\u0002\u0002\u0628\u0629",
    "\f\u0010\u0002\u0002\u0629\u062a\u0007\t\u0002\u0002\u062a\u062b\u0005",
    "\\/\u0002\u062b\u062c\u0007\n\u0002\u0002\u062c\u0631\u0003\u0002\u0002",
    "\u0002\u062d\u062e\f\u000e\u0002\u0002\u062e\u062f\u0007\u0003\u0002",
    "\u0002\u062f\u0631\u0005\u0096L\u0002\u0630\u0628\u0003\u0002\u0002",
    "\u0002\u0630\u062d\u0003\u0002\u0002\u0002\u0631\u0634\u0003\u0002\u0002",
    "\u0002\u0632\u0630\u0003\u0002\u0002\u0002\u0632\u0633\u0003\u0002\u0002",
    "\u0002\u0633_\u0003\u0002\u0002\u0002\u0634\u0632\u0003\u0002\u0002",
    "\u0002\u0635\u063c\u0007\u00e3\u0002\u0002\u0636\u0639\u0007\u00e4\u0002",
    "\u0002\u0637\u0638\u0007\u00c4\u0002\u0002\u0638\u063a\u0007\u00e3\u0002",
    "\u0002\u0639\u0637\u0003\u0002\u0002\u0002\u0639\u063a\u0003\u0002\u0002",
    "\u0002\u063a\u063c\u0003\u0002\u0002\u0002\u063b\u0635\u0003\u0002\u0002",
    "\u0002\u063b\u0636\u0003\u0002\u0002\u0002\u063ca\u0003\u0002\u0002",
    "\u0002\u063d\u063e\u0007X\u0002\u0002\u063e\u0642\u0007\u0081\u0002",
    "\u0002\u063f\u0640\u0007\u009b\u0002\u0002\u0640\u0642\u0007\u0081\u0002",
    "\u0002\u0641\u063d\u0003\u0002\u0002\u0002\u0641\u063f\u0003\u0002\u0002",
    "\u0002\u0642c\u0003\u0002\u0002\u0002\u0643\u0644\u0007\u00bd\u0002",
    "\u0002\u0644\u0645\u0007\u00d6\u0002\u0002\u0645\u064a\u0005l7\u0002",
    "\u0646\u0647\u0007\u00bd\u0002\u0002\u0647\u0648\u0007\u00d6\u0002\u0002",
    "\u0648\u064a\u0005`1\u0002\u0649\u0643\u0003\u0002\u0002\u0002\u0649",
    "\u0646\u0003\u0002\u0002\u0002\u064ae\u0003\u0002\u0002\u0002\u064b",
    "\u064c\t\u000f\u0002\u0002\u064cg\u0003\u0002\u0002\u0002\u064d\u064e",
    "\t\u0010\u0002\u0002\u064ei\u0003\u0002\u0002\u0002\u064f\u0650\t\u0011",
    "\u0002\u0002\u0650k\u0003\u0002\u0002\u0002\u0651\u0653\u0007_\u0002",
    "\u0002\u0652\u0654\t\r\u0002\u0002\u0653\u0652\u0003\u0002\u0002\u0002",
    "\u0653\u0654\u0003\u0002\u0002\u0002\u0654\u0655\u0003\u0002\u0002\u0002",
    "\u0655\u0656\u0005`1\u0002\u0656\u0659\u0005n8\u0002\u0657\u0658\u0007",
    "\u00bf\u0002\u0002\u0658\u065a\u0005n8\u0002\u0659\u0657\u0003\u0002",
    "\u0002\u0002\u0659\u065a\u0003\u0002\u0002\u0002\u065am\u0003\u0002",
    "\u0002\u0002\u065b\u065c\t\u0012\u0002\u0002\u065co\u0003\u0002\u0002",
    "\u0002\u065d\u065e\t\u0013\u0002\u0002\u065eq\u0003\u0002\u0002\u0002",
    "\u065f\u0668\u0007\u0004\u0002\u0002\u0660\u0665\u0005t;\u0002\u0661",
    "\u0662\u0007\u0006\u0002\u0002\u0662\u0664\u0005t;\u0002\u0663\u0661",
    "\u0003\u0002\u0002\u0002\u0664\u0667\u0003\u0002\u0002\u0002\u0665\u0663",
    "\u0003\u0002\u0002\u0002\u0665\u0666\u0003\u0002\u0002\u0002\u0666\u0669",
    "\u0003\u0002\u0002\u0002\u0667\u0665\u0003\u0002\u0002\u0002\u0668\u0660",
    "\u0003\u0002\u0002\u0002\u0668\u0669\u0003\u0002\u0002\u0002\u0669\u066a",
    "\u0003\u0002\u0002\u0002\u066a\u066b\u0007\u0005\u0002\u0002\u066bs",
    "\u0003\u0002\u0002\u0002\u066c\u066d\b;\u0001\u0002\u066d\u066e\u0007",
    "\u0013\u0002\u0002\u066e\u066f\u0007\u00d9\u0002\u0002\u066f\u0670\u0005",
    "t;\u0002\u0670\u0671\u0007\u00db\u0002\u0002\u0671\u069c\u0003\u0002",
    "\u0002\u0002\u0672\u0673\u0007q\u0002\u0002\u0673\u0674\u0007\u00d9",
    "\u0002\u0002\u0674\u0675\u0005t;\u0002\u0675\u0676\u0007\u0006\u0002",
    "\u0002\u0676\u0677\u0005t;\u0002\u0677\u0678\u0007\u00db\u0002\u0002",
    "\u0678\u069c\u0003\u0002\u0002\u0002\u0679\u067a\u0007\u00a5\u0002\u0002",
    "\u067a\u067b\u0007\u0004\u0002\u0002\u067b\u067c\u0005\u0096L\u0002",
    "\u067c\u0683\u0005t;\u0002\u067d\u067e\u0007\u0006\u0002\u0002\u067e",
    "\u067f\u0005\u0096L\u0002\u067f\u0680\u0005t;\u0002\u0680\u0682\u0003",
    "\u0002\u0002\u0002\u0681\u067d\u0003\u0002\u0002\u0002\u0682\u0685\u0003",
    "\u0002\u0002\u0002\u0683\u0681\u0003\u0002\u0002\u0002\u0683\u0684\u0003",
    "\u0002\u0002\u0002\u0684\u0686\u0003\u0002\u0002\u0002\u0685\u0683\u0003",
    "\u0002\u0002\u0002\u0686\u0687\u0007\u0005\u0002\u0002\u0687\u069c\u0003",
    "\u0002\u0002\u0002\u0688\u0694\u0005x=\u0002\u0689\u068a\u0007\u0004",
    "\u0002\u0002\u068a\u068f\u0005v<\u0002\u068b\u068c\u0007\u0006\u0002",
    "\u0002\u068c\u068e\u0005v<\u0002\u068d\u068b\u0003\u0002\u0002\u0002",
    "\u068e\u0691\u0003\u0002\u0002\u0002\u068f\u068d\u0003\u0002\u0002\u0002",
    "\u068f\u0690\u0003\u0002\u0002\u0002\u0690\u0692\u0003\u0002\u0002\u0002",
    "\u0691\u068f\u0003\u0002\u0002\u0002\u0692\u0693\u0007\u0005\u0002\u0002",
    "\u0693\u0695\u0003\u0002\u0002\u0002\u0694\u0689\u0003\u0002\u0002\u0002",
    "\u0694\u0695\u0003\u0002\u0002\u0002\u0695\u069c\u0003\u0002\u0002\u0002",
    "\u0696\u0697\u0007_\u0002\u0002\u0697\u0698\u0005n8\u0002\u0698\u0699",
    "\u0007\u00bf\u0002\u0002\u0699\u069a\u0005n8\u0002\u069a\u069c\u0003",
    "\u0002\u0002\u0002\u069b\u066c\u0003\u0002\u0002\u0002\u069b\u0672\u0003",
    "\u0002\u0002\u0002\u069b\u0679\u0003\u0002\u0002\u0002\u069b\u0688\u0003",
    "\u0002\u0002\u0002\u069b\u0696\u0003\u0002\u0002\u0002\u069c\u06a1\u0003",
    "\u0002\u0002\u0002\u069d\u069e\f\b\u0002\u0002\u069e\u06a0\u0007\u0013",
    "\u0002\u0002\u069f\u069d\u0003\u0002\u0002\u0002\u06a0\u06a3\u0003\u0002",
    "\u0002\u0002\u06a1\u069f\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002",
    "\u0002\u0002\u06a2u\u0003\u0002\u0002\u0002\u06a3\u06a1\u0003\u0002",
    "\u0002\u0002\u06a4\u06a7\u0007\u00e6\u0002\u0002\u06a5\u06a7\u0005t",
    ";\u0002\u06a6\u06a4\u0003\u0002\u0002\u0002\u06a6\u06a5\u0003\u0002",
    "\u0002\u0002\u06a7w\u0003\u0002\u0002\u0002\u06a8\u06ad\u0007\u00ed",
    "\u0002\u0002\u06a9\u06ad\u0007\u00ee\u0002\u0002\u06aa\u06ad\u0007\u00ef",
    "\u0002\u0002\u06ab\u06ad\u0005\u008eH\u0002\u06ac\u06a8\u0003\u0002",
    "\u0002\u0002\u06ac\u06a9\u0003\u0002\u0002\u0002\u06ac\u06aa\u0003\u0002",
    "\u0002\u0002\u06ac\u06ab\u0003\u0002\u0002\u0002\u06ady\u0003\u0002",
    "\u0002\u0002\u06ae\u06af\u0007\u00d0\u0002\u0002\u06af\u06b0\u0005V",
    ",\u0002\u06b0\u06b1\u0007\u00bc\u0002\u0002\u06b1\u06b2\u0005V,\u0002",
    "\u06b2{\u0003\u0002\u0002\u0002\u06b3\u06b4\u0007F\u0002\u0002\u06b4",
    "\u06b5\u0007\u0004\u0002\u0002\u06b5\u06b6\u0007\u00d1\u0002\u0002\u06b6",
    "\u06b7\u0005X-\u0002\u06b7\u06b8\u0007\u0005\u0002\u0002\u06b8}\u0003",
    "\u0002\u0002\u0002\u06b9\u06ba\u0007\u008b\u0002\u0002\u06ba\u06c5\u0007",
    "\u0004\u0002\u0002\u06bb\u06bc\u0007\u008c\u0002\u0002\u06bc\u06bd\u0007",
    "\u0019\u0002\u0002\u06bd\u06c2\u0005V,\u0002\u06be\u06bf\u0007\u0006",
    "\u0002\u0002\u06bf\u06c1\u0005V,\u0002\u06c0\u06be\u0003\u0002\u0002",
    "\u0002\u06c1\u06c4\u0003\u0002\u0002\u0002\u06c2\u06c0\u0003\u0002\u0002",
    "\u0002\u06c2\u06c3\u0003\u0002\u0002\u0002\u06c3\u06c6\u0003\u0002\u0002",
    "\u0002\u06c4\u06c2\u0003\u0002\u0002\u0002\u06c5\u06bb\u0003\u0002\u0002",
    "\u0002\u06c5\u06c6\u0003\u0002\u0002\u0002\u06c6\u06d1\u0003\u0002\u0002",
    "\u0002\u06c7\u06c8\u0007\u0087\u0002\u0002\u06c8\u06c9\u0007\u0019\u0002",
    "\u0002\u06c9\u06ce\u00056\u001c\u0002\u06ca\u06cb\u0007\u0006\u0002",
    "\u0002\u06cb\u06cd\u00056\u001c\u0002\u06cc\u06ca\u0003\u0002\u0002",
    "\u0002\u06cd\u06d0\u0003\u0002\u0002\u0002\u06ce\u06cc\u0003\u0002\u0002",
    "\u0002\u06ce\u06cf\u0003\u0002\u0002\u0002\u06cf\u06d2\u0003\u0002\u0002",
    "\u0002\u06d0\u06ce\u0003\u0002\u0002\u0002\u06d1\u06c7\u0003\u0002\u0002",
    "\u0002\u06d1\u06d2\u0003\u0002\u0002\u0002\u06d2\u06d4\u0003\u0002\u0002",
    "\u0002\u06d3\u06d5\u0005\u0080A\u0002\u06d4\u06d3\u0003\u0002\u0002",
    "\u0002\u06d4\u06d5\u0003\u0002\u0002\u0002\u06d5\u06d6\u0003\u0002\u0002",
    "\u0002\u06d6\u06d7\u0007\u0005\u0002\u0002\u06d7\u007f\u0003\u0002\u0002",
    "\u0002\u06d8\u06d9\u0007\u0093\u0002\u0002\u06d9\u06e9\u0005\u0082B",
    "\u0002\u06da\u06db\u0007\u00a6\u0002\u0002\u06db\u06e9\u0005\u0082B",
    "\u0002\u06dc\u06dd\u0007\u0093\u0002\u0002\u06dd\u06de\u0007\u0018\u0002",
    "\u0002\u06de\u06df\u0005\u0082B\u0002\u06df\u06e0\u0007\u0011\u0002",
    "\u0002\u06e0\u06e1\u0005\u0082B\u0002\u06e1\u06e9\u0003\u0002\u0002",
    "\u0002\u06e2\u06e3\u0007\u00a6\u0002\u0002\u06e3\u06e4\u0007\u0018\u0002",
    "\u0002\u06e4\u06e5\u0005\u0082B\u0002\u06e5\u06e6\u0007\u0011\u0002",
    "\u0002\u06e6\u06e7\u0005\u0082B\u0002\u06e7\u06e9\u0003\u0002\u0002",
    "\u0002\u06e8\u06d8\u0003\u0002\u0002\u0002\u06e8\u06da\u0003\u0002\u0002",
    "\u0002\u06e8\u06dc\u0003\u0002\u0002\u0002\u06e8\u06e2\u0003\u0002\u0002",
    "\u0002\u06e9\u0081\u0003\u0002\u0002\u0002\u06ea\u06eb\u0007\u00c5\u0002",
    "\u0002\u06eb\u06f4\u0007\u008f\u0002\u0002\u06ec\u06ed\u0007\u00c5\u0002",
    "\u0002\u06ed\u06f4\u0007H\u0002\u0002\u06ee\u06ef\u0007)\u0002\u0002",
    "\u06ef\u06f4\u0007\u00a5\u0002\u0002\u06f0\u06f1\u0005V,\u0002\u06f1",
    "\u06f2\t\u0014\u0002\u0002\u06f2\u06f4\u0003\u0002\u0002\u0002\u06f3",
    "\u06ea\u0003\u0002\u0002\u0002\u06f3\u06ec\u0003\u0002\u0002\u0002\u06f3",
    "\u06ee\u0003\u0002\u0002\u0002\u06f3\u06f0\u0003\u0002\u0002\u0002\u06f4",
    "\u0083\u0003\u0002\u0002\u0002\u06f5\u06f6\u0007J\u0002\u0002\u06f6",
    "\u06fa\t\u0015\u0002\u0002\u06f7\u06f8\u0007\u00c3\u0002\u0002\u06f8",
    "\u06fa\t\u0016\u0002\u0002\u06f9\u06f5\u0003\u0002\u0002\u0002\u06f9",
    "\u06f7\u0003\u0002\u0002\u0002\u06fa\u0085\u0003\u0002\u0002\u0002\u06fb",
    "\u06fc\u0007d\u0002\u0002\u06fc\u06fd\u0007k\u0002\u0002\u06fd\u0701",
    "\u0005\u0088E\u0002\u06fe\u06ff\u0007\u0094\u0002\u0002\u06ff\u0701",
    "\t\u0017\u0002\u0002\u0700\u06fb\u0003\u0002\u0002\u0002\u0700\u06fe",
    "\u0003\u0002\u0002\u0002\u0701\u0087\u0003\u0002\u0002\u0002\u0702\u0703",
    "\u0007\u0094\u0002\u0002\u0703\u070a\u0007\u00c6\u0002\u0002\u0704\u0705",
    "\u0007\u0094\u0002\u0002\u0705\u070a\u0007$\u0002\u0002\u0706\u0707",
    "\u0007\u0098\u0002\u0002\u0707\u070a\u0007\u0094\u0002\u0002\u0708\u070a",
    "\u0007\u00ac\u0002\u0002\u0709\u0702\u0003\u0002\u0002\u0002\u0709\u0704",
    "\u0003\u0002\u0002\u0002\u0709\u0706\u0003\u0002\u0002\u0002\u0709\u0708",
    "\u0003\u0002\u0002\u0002\u070a\u0089\u0003\u0002\u0002\u0002\u070b\u0711",
    "\u0005V,\u0002\u070c\u070d\u0005\u0096L\u0002\u070d\u070e\u0007\u000b",
    "\u0002\u0002\u070e\u070f\u0005V,\u0002\u070f\u0711\u0003\u0002\u0002",
    "\u0002\u0710\u070b\u0003\u0002\u0002\u0002\u0710\u070c\u0003\u0002\u0002",
    "\u0002\u0711\u008b\u0003\u0002\u0002\u0002\u0712\u0717\u0007\u00ab\u0002",
    "\u0002\u0713\u0717\u00074\u0002\u0002\u0714\u0717\u0007]\u0002\u0002",
    "\u0715\u0717\u0005\u0096L\u0002\u0716\u0712\u0003\u0002\u0002\u0002",
    "\u0716\u0713\u0003\u0002\u0002\u0002\u0716\u0714\u0003\u0002\u0002\u0002",
    "\u0716\u0715\u0003\u0002\u0002\u0002\u0717\u008d\u0003\u0002\u0002\u0002",
    "\u0718\u071d\u0005\u0096L\u0002\u0719\u071a\u0007\u0003\u0002\u0002",
    "\u071a\u071c\u0005\u0096L\u0002\u071b\u0719\u0003\u0002\u0002\u0002",
    "\u071c\u071f\u0003\u0002\u0002\u0002\u071d\u071b\u0003\u0002\u0002\u0002",
    "\u071d\u071e\u0003\u0002\u0002\u0002\u071e\u008f\u0003\u0002\u0002\u0002",
    "\u071f\u071d\u0003\u0002\u0002\u0002\u0720\u0724\u0007.\u0002\u0002",
    "\u0721\u0724\u0007+\u0002\u0002\u0722\u0724\u0005\u0092J\u0002\u0723",
    "\u0720\u0003\u0002\u0002\u0002\u0723\u0721\u0003\u0002\u0002\u0002\u0723",
    "\u0722\u0003\u0002\u0002\u0002\u0724\u0091\u0003\u0002\u0002\u0002\u0725",
    "\u0726\u0007\u00ca\u0002\u0002\u0726\u072b\u0005\u0096L\u0002\u0727",
    "\u0728\u0007\u00a1\u0002\u0002\u0728\u072b\u0005\u0096L\u0002\u0729",
    "\u072b\u0005\u0096L\u0002\u072a\u0725\u0003\u0002\u0002\u0002\u072a",
    "\u0727\u0003\u0002\u0002\u0002\u072a\u0729\u0003\u0002\u0002\u0002\u072b",
    "\u0093\u0003\u0002\u0002\u0002\u072c\u0731\u0005\u0096L\u0002\u072d",
    "\u072e\u0007\u0006\u0002\u0002\u072e\u0730\u0005\u0096L\u0002\u072f",
    "\u072d\u0003\u0002\u0002\u0002\u0730\u0733\u0003\u0002\u0002\u0002\u0731",
    "\u072f\u0003\u0002\u0002\u0002\u0731\u0732\u0003\u0002\u0002\u0002\u0732",
    "\u0095\u0003\u0002\u0002\u0002\u0733\u0731\u0003\u0002\u0002\u0002\u0734",
    "\u073a\u0007\u00e9\u0002\u0002\u0735\u073a\u0007\u00eb\u0002\u0002\u0736",
    "\u073a\u0005\u009aN\u0002\u0737\u073a\u0007\u00ec\u0002\u0002\u0738",
    "\u073a\u0007\u00ea\u0002\u0002\u0739\u0734\u0003\u0002\u0002\u0002\u0739",
    "\u0735\u0003\u0002\u0002\u0002\u0739\u0736\u0003\u0002\u0002\u0002\u0739",
    "\u0737\u0003\u0002\u0002\u0002\u0739\u0738\u0003\u0002\u0002\u0002\u073a",
    "\u0097\u0003\u0002\u0002\u0002\u073b\u073f\u0007\u00e7\u0002\u0002\u073c",
    "\u073f\u0007\u00e8\u0002\u0002\u073d\u073f\u0007\u00e6\u0002\u0002\u073e",
    "\u073b\u0003\u0002\u0002\u0002\u073e\u073c\u0003\u0002\u0002\u0002\u073e",
    "\u073d\u0003\u0002\u0002\u0002\u073f\u0099\u0003\u0002\u0002\u0002\u0740",
    "\u0741\t\u0018\u0002\u0002\u0741\u009b\u0003\u0002\u0002\u0002\u00f0",
    "\u00b2\u00b7\u00bd\u00c1\u00cf\u00d3\u00d7\u00db\u00e3\u00e7\u00ea\u00f1",
    "\u00fa\u0100\u0104\u010a\u0111\u011a\u0120\u012b\u0132\u013c\u0143\u014b",
    "\u0153\u015b\u0167\u016d\u0172\u0178\u0181\u018a\u018f\u0193\u019b\u01a2",
    "\u01af\u01b2\u01bc\u01bf\u01c6\u01cf\u01d5\u01da\u01de\u01e8\u01eb\u01f5",
    "\u0202\u0208\u020d\u0213\u021c\u0222\u0229\u0231\u0236\u023a\u0242\u0248",
    "\u024f\u0254\u0258\u0262\u0265\u0269\u026c\u0274\u0279\u028e\u0294\u029a",
    "\u029c\u02a2\u02a8\u02aa\u02b0\u02c3\u02c8\u02cf\u02db\u02dd\u02f1\u02f4",
    "\u02f8\u02fc\u030e\u0311\u0319\u031c\u0322\u0329\u032e\u0334\u0338\u033c",
    "\u0342\u034a\u0359\u0360\u0365\u036c\u0374\u0378\u037d\u0388\u0394\u0397",
    "\u039c\u039e\u03a2\u03aa\u03b0\u03b3\u03b5\u03c1\u03c8\u03cc\u03d0\u03d4",
    "\u03db\u03e4\u03e7\u03eb\u03f0\u03f4\u03f7\u03fe\u0409\u040c\u0416\u0419",
    "\u0424\u0429\u0431\u0434\u0438\u043c\u0447\u044a\u0451\u0464\u0468\u046c",
    "\u0470\u0474\u0478\u047a\u0485\u048a\u0493\u0499\u049d\u049f\u04a7\u04b8",
    "\u04be\u04c9\u04d0\u04d4\u04dc\u04de\u04eb\u04f3\u04fc\u0502\u050a\u0510",
    "\u0514\u0519\u051e\u0524\u0532\u0534\u0551\u055c\u0566\u0569\u056e\u0575",
    "\u0578\u0581\u0584\u0588\u058b\u058e\u059a\u059d\u05b0\u05b4\u05bc\u05c0",
    "\u05d9\u05dc\u05e5\u05eb\u05f1\u05f7\u0601\u060a\u0620\u0623\u0626\u0630",
    "\u0632\u0639\u063b\u0641\u0649\u0653\u0659\u0665\u0668\u0683\u068f\u0694",
    "\u069b\u06a1\u06a6\u06ac\u06c2\u06c5\u06ce\u06d1\u06d4\u06e8\u06f3\u06f9",
    "\u0700\u0709\u0710\u0716\u071d\u0723\u072a\u0731\u0739\u073e"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

class SqlBaseParser extends antlr4.Parser {

    static grammarFileName = "SqlBase.g4";
    static literalNames = [ null, "'.'", "'('", "')'", "','", "'?'", "'->'", 
                            "'['", "']'", "'=>'", null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, "'='", 
                            null, "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", 
                            "'*'", "'/'", "'%'", "'||'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, "ADD", "ADMIN", "ALL", "ALTER", 
                             "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", 
                             "AT", "BERNOULLI", "BETWEEN", "BY", "CALL", 
                             "CALLED", "CASCADE", "CASE", "CAST", "CATALOGS", 
                             "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
                             "CONSTRAINT", "CREATE", "CROSS", "CUBE", "CURRENT", 
                             "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", 
                             "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", 
                             "DATE", "DAY", "DEALLOCATE", "DEFINER", "DELETE", 
                             "DESC", "DESCRIBE", "DETERMINISTIC", "DISTINCT", 
                             "DISTRIBUTED", "DROP", "ELSE", "END", "ESCAPE", 
                             "EXCEPT", "EXCLUDING", "EXECUTE", "EXISTS", 
                             "EXPLAIN", "EXTRACT", "EXTERNAL", "FALSE", 
                             "FILTER", "FIRST", "FOLLOWING", "FOR", "FORMAT", 
                             "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GRANT", 
                             "GRANTED", "GRANTS", "GRAPHVIZ", "GROUP", "GROUPING", 
                             "HAVING", "HOUR", "IF", "IGNORE", "IN", "INCLUDING", 
                             "INNER", "INPUT", "INSERT", "INTERSECT", "INTERVAL", 
                             "INTO", "INVOKER", "IO", "IS", "ISOLATION", 
                             "JSON", "JOIN", "LANGUAGE", "LAST", "LATERAL", 
                             "LEFT", "LEVEL", "LIKE", "LIMIT", "LOCALTIME", 
                             "LOCALTIMESTAMP", "LOGICAL", "MAP", "MATERIALIZED", 
                             "MINUTE", "MONTH", "NAME", "NATURAL", "NFC", 
                             "NFD", "NFKC", "NFKD", "NO", "NONE", "NORMALIZE", 
                             "NOT", "NULL", "NULLIF", "NULLS", "OFFSET", 
                             "ON", "ONLY", "OPTION", "OR", "ORDER", "ORDINALITY", 
                             "OUTER", "OUTPUT", "OVER", "PARTITION", "PARTITIONS", 
                             "POSITION", "PRECEDING", "PREPARE", "PRIVILEGES", 
                             "PROPERTIES", "RANGE", "READ", "RECURSIVE", 
                             "REFRESH", "RENAME", "REPEATABLE", "REPLACE", 
                             "RESET", "RESPECT", "RESTRICT", "RETURN", "RETURNS", 
                             "REVOKE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", 
                             "ROLLUP", "ROW", "ROWS", "SCHEMA", "SCHEMAS", 
                             "SECOND", "SECURITY", "SELECT", "SERIALIZABLE", 
                             "SESSION", "SET", "SETS", "SHOW", "SOME", "SQL", 
                             "START", "STATS", "SUBSTRING", "SYSTEM", "TABLE", 
                             "TABLES", "TABLESAMPLE", "TEMPORARY", "TEXT", 
                             "THEN", "TIME", "TIMESTAMP", "TO", "TRANSACTION", 
                             "TRUE", "TRY_CAST", "TYPE", "UESCAPE", "UNBOUNDED", 
                             "UNCOMMITTED", "UNION", "UNNEST", "USE", "USER", 
                             "USING", "VALIDATE", "VALUES", "VERBOSE", "VIEW", 
                             "WHEN", "WHERE", "WITH", "WORK", "WRITE", "YEAR", 
                             "ZONE", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
                             "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", 
                             "CONCAT", "STRING", "UNICODE_STRING", "BINARY_LITERAL", 
                             "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_VALUE", 
                             "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
                             "BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", 
                             "TIMESTAMP_WITH_TIME_ZONE", "DOUBLE_PRECISION", 
                             "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", 
                             "UNRECOGNIZED", "DELIMITER" ];
    static ruleNames = [ "singleStatement", "standaloneExpression", "standaloneRoutineBody", 
                         "statement", "query", "with", "tableElement", "columnDefinition", 
                         "likeClause", "properties", "property", "sqlParameterDeclaration", 
                         "routineCharacteristics", "routineCharacteristic", 
                         "alterRoutineCharacteristics", "alterRoutineCharacteristic", 
                         "routineBody", "returnStatement", "externalBodyReference", 
                         "language", "determinism", "nullCallClause", "externalRoutineName", 
                         "queryNoWith", "queryTerm", "queryPrimary", "sortItem", 
                         "querySpecification", "groupBy", "groupingElement", 
                         "groupingSet", "namedQuery", "setQuantifier", "selectItem", 
                         "relation", "joinType", "joinCriteria", "sampledRelation", 
                         "sampleType", "aliasedRelation", "columnAliases", 
                         "relationPrimary", "expression", "booleanExpression", 
                         "predicate", "valueExpression", "primaryExpression", 
                         "string", "nullTreatment", "timeZoneSpecifier", 
                         "comparisonOperator", "comparisonQuantifier", "booleanValue", 
                         "interval", "intervalField", "normalForm", "types", 
                         "type", "typeParameter", "baseType", "whenClause", 
                         "filter", "over", "windowFrame", "frameBound", 
                         "explainOption", "transactionMode", "levelOfIsolation", 
                         "callArgument", "privilege", "qualifiedName", "grantor", 
                         "principal", "roles", "identifier", "number", "nonReserved" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SqlBaseParser.ruleNames;
        this.literalNames = SqlBaseParser.literalNames;
        this.symbolicNames = SqlBaseParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 24:
    	    		return this.queryTerm_sempred(localctx, predIndex);
    	case 34:
    	    		return this.relation_sempred(localctx, predIndex);
    	case 43:
    	    		return this.booleanExpression_sempred(localctx, predIndex);
    	case 45:
    	    		return this.valueExpression_sempred(localctx, predIndex);
    	case 46:
    	    		return this.primaryExpression_sempred(localctx, predIndex);
    	case 57:
    	    		return this.type_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    queryTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    relation_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    booleanExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 2);
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 3);
    		case 6:
    			return this.precpred(this._ctx, 2);
    		case 7:
    			return this.precpred(this._ctx, 1);
    		case 8:
    			return this.precpred(this._ctx, 5);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    primaryExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.precpred(this._ctx, 14);
    		case 10:
    			return this.precpred(this._ctx, 12);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.precpred(this._ctx, 6);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	singleStatement() {
	    let localctx = new SingleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SqlBaseParser.RULE_singleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 154;
	        this.statement();
	        this.state = 155;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	standaloneExpression() {
	    let localctx = new StandaloneExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SqlBaseParser.RULE_standaloneExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 157;
	        this.expression();
	        this.state = 158;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	standaloneRoutineBody() {
	    let localctx = new StandaloneRoutineBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SqlBaseParser.RULE_standaloneRoutineBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 160;
	        this.routineBody();
	        this.state = 161;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SqlBaseParser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 791;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new StatementDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 163;
	            this.query();
	            break;

	        case 2:
	            localctx = new UseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 164;
	            this.match(SqlBaseParser.USE);
	            this.state = 165;
	            localctx.schema = this.identifier();
	            break;

	        case 3:
	            localctx = new UseContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 166;
	            this.match(SqlBaseParser.USE);
	            this.state = 167;
	            localctx.catalog = this.identifier();
	            this.state = 168;
	            this.match(SqlBaseParser.T__0);
	            this.state = 169;
	            localctx.schema = this.identifier();
	            break;

	        case 4:
	            localctx = new CreateSchemaContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 171;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 172;
	            this.match(SqlBaseParser.SCHEMA);
	            this.state = 176;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            if(la_===1) {
	                this.state = 173;
	                this.match(SqlBaseParser.IF);
	                this.state = 174;
	                this.match(SqlBaseParser.NOT);
	                this.state = 175;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 178;
	            this.qualifiedName();
	            this.state = 181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 179;
	                this.match(SqlBaseParser.WITH);
	                this.state = 180;
	                this.properties();
	            }

	            break;

	        case 5:
	            localctx = new DropSchemaContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 183;
	            this.match(SqlBaseParser.DROP);
	            this.state = 184;
	            this.match(SqlBaseParser.SCHEMA);
	            this.state = 187;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	            if(la_===1) {
	                this.state = 185;
	                this.match(SqlBaseParser.IF);
	                this.state = 186;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 189;
	            this.qualifiedName();
	            this.state = 191;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT) {
	                this.state = 190;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 6:
	            localctx = new RenameSchemaContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 193;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 194;
	            this.match(SqlBaseParser.SCHEMA);
	            this.state = 195;
	            this.qualifiedName();
	            this.state = 196;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 197;
	            this.match(SqlBaseParser.TO);
	            this.state = 198;
	            this.identifier();
	            break;

	        case 7:
	            localctx = new CreateTableAsSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 200;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 201;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 205;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 202;
	                this.match(SqlBaseParser.IF);
	                this.state = 203;
	                this.match(SqlBaseParser.NOT);
	                this.state = 204;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 207;
	            this.qualifiedName();
	            this.state = 209;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1) {
	                this.state = 208;
	                this.columnAliases();
	            }

	            this.state = 213;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.COMMENT) {
	                this.state = 211;
	                this.match(SqlBaseParser.COMMENT);
	                this.state = 212;
	                this.string();
	            }

	            this.state = 217;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 215;
	                this.match(SqlBaseParser.WITH);
	                this.state = 216;
	                this.properties();
	            }

	            this.state = 219;
	            this.match(SqlBaseParser.AS);
	            this.state = 225;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 220;
	                this.query();
	                break;

	            case 2:
	                this.state = 221;
	                this.match(SqlBaseParser.T__1);
	                this.state = 222;
	                this.query();
	                this.state = 223;
	                this.match(SqlBaseParser.T__2);
	                break;

	            }
	            this.state = 232;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 227;
	                this.match(SqlBaseParser.WITH);
	                this.state = 229;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.NO) {
	                    this.state = 228;
	                    this.match(SqlBaseParser.NO);
	                }

	                this.state = 231;
	                this.match(SqlBaseParser.DATA);
	            }

	            break;

	        case 8:
	            localctx = new CreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 234;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 235;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 239;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	            if(la_===1) {
	                this.state = 236;
	                this.match(SqlBaseParser.IF);
	                this.state = 237;
	                this.match(SqlBaseParser.NOT);
	                this.state = 238;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 241;
	            this.qualifiedName();
	            this.state = 242;
	            this.match(SqlBaseParser.T__1);
	            this.state = 243;
	            this.tableElement();
	            this.state = 248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 244;
	                this.match(SqlBaseParser.T__3);
	                this.state = 245;
	                this.tableElement();
	                this.state = 250;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 251;
	            this.match(SqlBaseParser.T__2);
	            this.state = 254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.COMMENT) {
	                this.state = 252;
	                this.match(SqlBaseParser.COMMENT);
	                this.state = 253;
	                this.string();
	            }

	            this.state = 258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 256;
	                this.match(SqlBaseParser.WITH);
	                this.state = 257;
	                this.properties();
	            }

	            break;

	        case 9:
	            localctx = new DropTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 260;
	            this.match(SqlBaseParser.DROP);
	            this.state = 261;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 264;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            if(la_===1) {
	                this.state = 262;
	                this.match(SqlBaseParser.IF);
	                this.state = 263;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 266;
	            this.qualifiedName();
	            break;

	        case 10:
	            localctx = new InsertIntoContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 267;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 268;
	            this.match(SqlBaseParser.INTO);
	            this.state = 269;
	            this.qualifiedName();
	            this.state = 271;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 270;
	                this.columnAliases();

	            }
	            this.state = 273;
	            this.query();
	            break;

	        case 11:
	            localctx = new DeleteContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 275;
	            this.match(SqlBaseParser.DELETE);
	            this.state = 276;
	            this.match(SqlBaseParser.FROM);
	            this.state = 277;
	            this.qualifiedName();
	            this.state = 280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WHERE) {
	                this.state = 278;
	                this.match(SqlBaseParser.WHERE);
	                this.state = 279;
	                this.booleanExpression(0);
	            }

	            break;

	        case 12:
	            localctx = new RenameTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 282;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 283;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 286;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	            if(la_===1) {
	                this.state = 284;
	                this.match(SqlBaseParser.IF);
	                this.state = 285;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 288;
	            localctx.from = this.qualifiedName();
	            this.state = 289;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 290;
	            this.match(SqlBaseParser.TO);
	            this.state = 291;
	            localctx.to = this.qualifiedName();
	            break;

	        case 13:
	            localctx = new RenameColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 293;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 294;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 297;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	            if(la_===1) {
	                this.state = 295;
	                this.match(SqlBaseParser.IF);
	                this.state = 296;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 299;
	            localctx.tableName = this.qualifiedName();
	            this.state = 300;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 301;
	            this.match(SqlBaseParser.COLUMN);
	            this.state = 304;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	            if(la_===1) {
	                this.state = 302;
	                this.match(SqlBaseParser.IF);
	                this.state = 303;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 306;
	            localctx.from = this.identifier();
	            this.state = 307;
	            this.match(SqlBaseParser.TO);
	            this.state = 308;
	            localctx.to = this.identifier();
	            break;

	        case 14:
	            localctx = new DropColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 310;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 311;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 314;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	            if(la_===1) {
	                this.state = 312;
	                this.match(SqlBaseParser.IF);
	                this.state = 313;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 316;
	            localctx.tableName = this.qualifiedName();
	            this.state = 317;
	            this.match(SqlBaseParser.DROP);
	            this.state = 318;
	            this.match(SqlBaseParser.COLUMN);
	            this.state = 321;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 319;
	                this.match(SqlBaseParser.IF);
	                this.state = 320;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 323;
	            localctx.column = this.qualifiedName();
	            break;

	        case 15:
	            localctx = new AddColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 325;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 326;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 329;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 327;
	                this.match(SqlBaseParser.IF);
	                this.state = 328;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 331;
	            localctx.tableName = this.qualifiedName();
	            this.state = 332;
	            this.match(SqlBaseParser.ADD);
	            this.state = 333;
	            this.match(SqlBaseParser.COLUMN);
	            this.state = 337;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	            if(la_===1) {
	                this.state = 334;
	                this.match(SqlBaseParser.IF);
	                this.state = 335;
	                this.match(SqlBaseParser.NOT);
	                this.state = 336;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 339;
	            localctx.column = this.columnDefinition();
	            break;

	        case 16:
	            localctx = new AnalyzeContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 341;
	            this.match(SqlBaseParser.ANALYZE);
	            this.state = 342;
	            this.qualifiedName();
	            this.state = 345;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 343;
	                this.match(SqlBaseParser.WITH);
	                this.state = 344;
	                this.properties();
	            }

	            break;

	        case 17:
	            localctx = new CreateTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 347;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 348;
	            this.match(SqlBaseParser.TYPE);
	            this.state = 349;
	            this.qualifiedName();
	            this.state = 350;
	            this.match(SqlBaseParser.AS);
	            this.state = 363;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SqlBaseParser.T__1:
	                this.state = 351;
	                this.match(SqlBaseParser.T__1);
	                this.state = 352;
	                this.sqlParameterDeclaration();
	                this.state = 357;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 353;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 354;
	                    this.sqlParameterDeclaration();
	                    this.state = 359;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 360;
	                this.match(SqlBaseParser.T__2);
	                break;
	            case SqlBaseParser.ADD:
	            case SqlBaseParser.ADMIN:
	            case SqlBaseParser.ALL:
	            case SqlBaseParser.ANALYZE:
	            case SqlBaseParser.ANY:
	            case SqlBaseParser.ARRAY:
	            case SqlBaseParser.ASC:
	            case SqlBaseParser.AT:
	            case SqlBaseParser.BERNOULLI:
	            case SqlBaseParser.CALL:
	            case SqlBaseParser.CALLED:
	            case SqlBaseParser.CASCADE:
	            case SqlBaseParser.CATALOGS:
	            case SqlBaseParser.COLUMN:
	            case SqlBaseParser.COLUMNS:
	            case SqlBaseParser.COMMENT:
	            case SqlBaseParser.COMMIT:
	            case SqlBaseParser.COMMITTED:
	            case SqlBaseParser.CURRENT:
	            case SqlBaseParser.CURRENT_ROLE:
	            case SqlBaseParser.DATA:
	            case SqlBaseParser.DATE:
	            case SqlBaseParser.DAY:
	            case SqlBaseParser.DEFINER:
	            case SqlBaseParser.DESC:
	            case SqlBaseParser.DETERMINISTIC:
	            case SqlBaseParser.DISTRIBUTED:
	            case SqlBaseParser.EXCLUDING:
	            case SqlBaseParser.EXPLAIN:
	            case SqlBaseParser.EXTERNAL:
	            case SqlBaseParser.FILTER:
	            case SqlBaseParser.FIRST:
	            case SqlBaseParser.FOLLOWING:
	            case SqlBaseParser.FORMAT:
	            case SqlBaseParser.FUNCTION:
	            case SqlBaseParser.FUNCTIONS:
	            case SqlBaseParser.GRANT:
	            case SqlBaseParser.GRANTED:
	            case SqlBaseParser.GRANTS:
	            case SqlBaseParser.GRAPHVIZ:
	            case SqlBaseParser.HOUR:
	            case SqlBaseParser.IF:
	            case SqlBaseParser.IGNORE:
	            case SqlBaseParser.INCLUDING:
	            case SqlBaseParser.INPUT:
	            case SqlBaseParser.INTERVAL:
	            case SqlBaseParser.INVOKER:
	            case SqlBaseParser.IO:
	            case SqlBaseParser.ISOLATION:
	            case SqlBaseParser.JSON:
	            case SqlBaseParser.LANGUAGE:
	            case SqlBaseParser.LAST:
	            case SqlBaseParser.LATERAL:
	            case SqlBaseParser.LEVEL:
	            case SqlBaseParser.LIMIT:
	            case SqlBaseParser.LOGICAL:
	            case SqlBaseParser.MAP:
	            case SqlBaseParser.MATERIALIZED:
	            case SqlBaseParser.MINUTE:
	            case SqlBaseParser.MONTH:
	            case SqlBaseParser.NAME:
	            case SqlBaseParser.NFC:
	            case SqlBaseParser.NFD:
	            case SqlBaseParser.NFKC:
	            case SqlBaseParser.NFKD:
	            case SqlBaseParser.NO:
	            case SqlBaseParser.NONE:
	            case SqlBaseParser.NULLIF:
	            case SqlBaseParser.NULLS:
	            case SqlBaseParser.OFFSET:
	            case SqlBaseParser.ONLY:
	            case SqlBaseParser.OPTION:
	            case SqlBaseParser.ORDINALITY:
	            case SqlBaseParser.OUTPUT:
	            case SqlBaseParser.OVER:
	            case SqlBaseParser.PARTITION:
	            case SqlBaseParser.PARTITIONS:
	            case SqlBaseParser.POSITION:
	            case SqlBaseParser.PRECEDING:
	            case SqlBaseParser.PRIVILEGES:
	            case SqlBaseParser.PROPERTIES:
	            case SqlBaseParser.RANGE:
	            case SqlBaseParser.READ:
	            case SqlBaseParser.REFRESH:
	            case SqlBaseParser.RENAME:
	            case SqlBaseParser.REPEATABLE:
	            case SqlBaseParser.REPLACE:
	            case SqlBaseParser.RESET:
	            case SqlBaseParser.RESPECT:
	            case SqlBaseParser.RESTRICT:
	            case SqlBaseParser.RETURN:
	            case SqlBaseParser.RETURNS:
	            case SqlBaseParser.REVOKE:
	            case SqlBaseParser.ROLE:
	            case SqlBaseParser.ROLES:
	            case SqlBaseParser.ROLLBACK:
	            case SqlBaseParser.ROW:
	            case SqlBaseParser.ROWS:
	            case SqlBaseParser.SCHEMA:
	            case SqlBaseParser.SCHEMAS:
	            case SqlBaseParser.SECOND:
	            case SqlBaseParser.SECURITY:
	            case SqlBaseParser.SERIALIZABLE:
	            case SqlBaseParser.SESSION:
	            case SqlBaseParser.SET:
	            case SqlBaseParser.SETS:
	            case SqlBaseParser.SHOW:
	            case SqlBaseParser.SOME:
	            case SqlBaseParser.SQL:
	            case SqlBaseParser.START:
	            case SqlBaseParser.STATS:
	            case SqlBaseParser.SUBSTRING:
	            case SqlBaseParser.SYSTEM:
	            case SqlBaseParser.TABLES:
	            case SqlBaseParser.TABLESAMPLE:
	            case SqlBaseParser.TEMPORARY:
	            case SqlBaseParser.TEXT:
	            case SqlBaseParser.TIME:
	            case SqlBaseParser.TIMESTAMP:
	            case SqlBaseParser.TO:
	            case SqlBaseParser.TRANSACTION:
	            case SqlBaseParser.TRY_CAST:
	            case SqlBaseParser.TYPE:
	            case SqlBaseParser.UNBOUNDED:
	            case SqlBaseParser.UNCOMMITTED:
	            case SqlBaseParser.USE:
	            case SqlBaseParser.USER:
	            case SqlBaseParser.VALIDATE:
	            case SqlBaseParser.VERBOSE:
	            case SqlBaseParser.VIEW:
	            case SqlBaseParser.WORK:
	            case SqlBaseParser.WRITE:
	            case SqlBaseParser.YEAR:
	            case SqlBaseParser.ZONE:
	            case SqlBaseParser.IDENTIFIER:
	            case SqlBaseParser.DIGIT_IDENTIFIER:
	            case SqlBaseParser.QUOTED_IDENTIFIER:
	            case SqlBaseParser.BACKQUOTED_IDENTIFIER:
	            case SqlBaseParser.TIME_WITH_TIME_ZONE:
	            case SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE:
	            case SqlBaseParser.DOUBLE_PRECISION:
	                this.state = 362;
	                this.type(0);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 18:
	            localctx = new CreateViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 365;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 368;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OR) {
	                this.state = 366;
	                this.match(SqlBaseParser.OR);
	                this.state = 367;
	                this.match(SqlBaseParser.REPLACE);
	            }

	            this.state = 370;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 371;
	            this.qualifiedName();
	            this.state = 374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.SECURITY) {
	                this.state = 372;
	                this.match(SqlBaseParser.SECURITY);
	                this.state = 373;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.DEFINER || _la===SqlBaseParser.INVOKER)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 376;
	            this.match(SqlBaseParser.AS);
	            this.state = 377;
	            this.query();
	            break;

	        case 19:
	            localctx = new DropViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 379;
	            this.match(SqlBaseParser.DROP);
	            this.state = 380;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 383;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	            if(la_===1) {
	                this.state = 381;
	                this.match(SqlBaseParser.IF);
	                this.state = 382;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 385;
	            this.qualifiedName();
	            break;

	        case 20:
	            localctx = new CreateMaterializedViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 386;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 387;
	            this.match(SqlBaseParser.MATERIALIZED);
	            this.state = 388;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 392;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	            if(la_===1) {
	                this.state = 389;
	                this.match(SqlBaseParser.IF);
	                this.state = 390;
	                this.match(SqlBaseParser.NOT);
	                this.state = 391;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 394;
	            this.qualifiedName();
	            this.state = 397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.COMMENT) {
	                this.state = 395;
	                this.match(SqlBaseParser.COMMENT);
	                this.state = 396;
	                this.string();
	            }

	            this.state = 401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 399;
	                this.match(SqlBaseParser.WITH);
	                this.state = 400;
	                this.properties();
	            }

	            this.state = 403;
	            this.match(SqlBaseParser.AS);
	            this.state = 409;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 404;
	                this.query();
	                break;

	            case 2:
	                this.state = 405;
	                this.match(SqlBaseParser.T__1);
	                this.state = 406;
	                this.query();
	                this.state = 407;
	                this.match(SqlBaseParser.T__2);
	                break;

	            }
	            break;

	        case 21:
	            localctx = new DropMaterializedViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 411;
	            this.match(SqlBaseParser.DROP);
	            this.state = 412;
	            this.match(SqlBaseParser.MATERIALIZED);
	            this.state = 413;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 416;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	            if(la_===1) {
	                this.state = 414;
	                this.match(SqlBaseParser.IF);
	                this.state = 415;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 418;
	            this.qualifiedName();
	            break;

	        case 22:
	            localctx = new RefreshMaterializedViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 419;
	            this.match(SqlBaseParser.REFRESH);
	            this.state = 420;
	            this.match(SqlBaseParser.MATERIALIZED);
	            this.state = 421;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 422;
	            this.qualifiedName();
	            this.state = 423;
	            this.match(SqlBaseParser.WHERE);
	            this.state = 424;
	            this.booleanExpression(0);
	            break;

	        case 23:
	            localctx = new CreateFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 426;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OR) {
	                this.state = 427;
	                this.match(SqlBaseParser.OR);
	                this.state = 428;
	                this.match(SqlBaseParser.REPLACE);
	            }

	            this.state = 432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.TEMPORARY) {
	                this.state = 431;
	                this.match(SqlBaseParser.TEMPORARY);
	            }

	            this.state = 434;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 435;
	            localctx.functionName = this.qualifiedName();
	            this.state = 436;
	            this.match(SqlBaseParser.T__1);
	            this.state = 445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (SqlBaseParser.ADD - 10)) | (1 << (SqlBaseParser.ADMIN - 10)) | (1 << (SqlBaseParser.ALL - 10)) | (1 << (SqlBaseParser.ANALYZE - 10)) | (1 << (SqlBaseParser.ANY - 10)) | (1 << (SqlBaseParser.ARRAY - 10)) | (1 << (SqlBaseParser.ASC - 10)) | (1 << (SqlBaseParser.AT - 10)) | (1 << (SqlBaseParser.BERNOULLI - 10)) | (1 << (SqlBaseParser.CALL - 10)) | (1 << (SqlBaseParser.CALLED - 10)) | (1 << (SqlBaseParser.CASCADE - 10)) | (1 << (SqlBaseParser.CATALOGS - 10)) | (1 << (SqlBaseParser.COLUMN - 10)) | (1 << (SqlBaseParser.COLUMNS - 10)) | (1 << (SqlBaseParser.COMMENT - 10)) | (1 << (SqlBaseParser.COMMIT - 10)) | (1 << (SqlBaseParser.COMMITTED - 10)) | (1 << (SqlBaseParser.CURRENT - 10)) | (1 << (SqlBaseParser.CURRENT_ROLE - 10)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (SqlBaseParser.DATA - 45)) | (1 << (SqlBaseParser.DATE - 45)) | (1 << (SqlBaseParser.DAY - 45)) | (1 << (SqlBaseParser.DEFINER - 45)) | (1 << (SqlBaseParser.DESC - 45)) | (1 << (SqlBaseParser.DETERMINISTIC - 45)) | (1 << (SqlBaseParser.DISTRIBUTED - 45)) | (1 << (SqlBaseParser.EXCLUDING - 45)) | (1 << (SqlBaseParser.EXPLAIN - 45)) | (1 << (SqlBaseParser.EXTERNAL - 45)) | (1 << (SqlBaseParser.FILTER - 45)) | (1 << (SqlBaseParser.FIRST - 45)) | (1 << (SqlBaseParser.FOLLOWING - 45)) | (1 << (SqlBaseParser.FORMAT - 45)) | (1 << (SqlBaseParser.FUNCTION - 45)) | (1 << (SqlBaseParser.FUNCTIONS - 45)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SqlBaseParser.GRANT - 77)) | (1 << (SqlBaseParser.GRANTED - 77)) | (1 << (SqlBaseParser.GRANTS - 77)) | (1 << (SqlBaseParser.GRAPHVIZ - 77)) | (1 << (SqlBaseParser.HOUR - 77)) | (1 << (SqlBaseParser.IF - 77)) | (1 << (SqlBaseParser.IGNORE - 77)) | (1 << (SqlBaseParser.INCLUDING - 77)) | (1 << (SqlBaseParser.INPUT - 77)) | (1 << (SqlBaseParser.INTERVAL - 77)) | (1 << (SqlBaseParser.INVOKER - 77)) | (1 << (SqlBaseParser.IO - 77)) | (1 << (SqlBaseParser.ISOLATION - 77)) | (1 << (SqlBaseParser.JSON - 77)) | (1 << (SqlBaseParser.LANGUAGE - 77)) | (1 << (SqlBaseParser.LAST - 77)) | (1 << (SqlBaseParser.LATERAL - 77)) | (1 << (SqlBaseParser.LEVEL - 77)) | (1 << (SqlBaseParser.LIMIT - 77)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (SqlBaseParser.LOGICAL - 110)) | (1 << (SqlBaseParser.MAP - 110)) | (1 << (SqlBaseParser.MATERIALIZED - 110)) | (1 << (SqlBaseParser.MINUTE - 110)) | (1 << (SqlBaseParser.MONTH - 110)) | (1 << (SqlBaseParser.NAME - 110)) | (1 << (SqlBaseParser.NFC - 110)) | (1 << (SqlBaseParser.NFD - 110)) | (1 << (SqlBaseParser.NFKC - 110)) | (1 << (SqlBaseParser.NFKD - 110)) | (1 << (SqlBaseParser.NO - 110)) | (1 << (SqlBaseParser.NONE - 110)) | (1 << (SqlBaseParser.NULLIF - 110)) | (1 << (SqlBaseParser.NULLS - 110)) | (1 << (SqlBaseParser.OFFSET - 110)) | (1 << (SqlBaseParser.ONLY - 110)) | (1 << (SqlBaseParser.OPTION - 110)) | (1 << (SqlBaseParser.ORDINALITY - 110)) | (1 << (SqlBaseParser.OUTPUT - 110)) | (1 << (SqlBaseParser.OVER - 110)) | (1 << (SqlBaseParser.PARTITION - 110)) | (1 << (SqlBaseParser.PARTITIONS - 110)) | (1 << (SqlBaseParser.POSITION - 110)) | (1 << (SqlBaseParser.PRECEDING - 110)))) !== 0) || ((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (SqlBaseParser.PRIVILEGES - 143)) | (1 << (SqlBaseParser.PROPERTIES - 143)) | (1 << (SqlBaseParser.RANGE - 143)) | (1 << (SqlBaseParser.READ - 143)) | (1 << (SqlBaseParser.REFRESH - 143)) | (1 << (SqlBaseParser.RENAME - 143)) | (1 << (SqlBaseParser.REPEATABLE - 143)) | (1 << (SqlBaseParser.REPLACE - 143)) | (1 << (SqlBaseParser.RESET - 143)) | (1 << (SqlBaseParser.RESPECT - 143)) | (1 << (SqlBaseParser.RESTRICT - 143)) | (1 << (SqlBaseParser.RETURN - 143)) | (1 << (SqlBaseParser.RETURNS - 143)) | (1 << (SqlBaseParser.REVOKE - 143)) | (1 << (SqlBaseParser.ROLE - 143)) | (1 << (SqlBaseParser.ROLES - 143)) | (1 << (SqlBaseParser.ROLLBACK - 143)) | (1 << (SqlBaseParser.ROW - 143)) | (1 << (SqlBaseParser.ROWS - 143)) | (1 << (SqlBaseParser.SCHEMA - 143)) | (1 << (SqlBaseParser.SCHEMAS - 143)) | (1 << (SqlBaseParser.SECOND - 143)) | (1 << (SqlBaseParser.SECURITY - 143)) | (1 << (SqlBaseParser.SERIALIZABLE - 143)) | (1 << (SqlBaseParser.SESSION - 143)) | (1 << (SqlBaseParser.SET - 143)) | (1 << (SqlBaseParser.SETS - 143)) | (1 << (SqlBaseParser.SHOW - 143)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (SqlBaseParser.SOME - 175)) | (1 << (SqlBaseParser.SQL - 175)) | (1 << (SqlBaseParser.START - 175)) | (1 << (SqlBaseParser.STATS - 175)) | (1 << (SqlBaseParser.SUBSTRING - 175)) | (1 << (SqlBaseParser.SYSTEM - 175)) | (1 << (SqlBaseParser.TABLES - 175)) | (1 << (SqlBaseParser.TABLESAMPLE - 175)) | (1 << (SqlBaseParser.TEMPORARY - 175)) | (1 << (SqlBaseParser.TEXT - 175)) | (1 << (SqlBaseParser.TIME - 175)) | (1 << (SqlBaseParser.TIMESTAMP - 175)) | (1 << (SqlBaseParser.TO - 175)) | (1 << (SqlBaseParser.TRANSACTION - 175)) | (1 << (SqlBaseParser.TRY_CAST - 175)) | (1 << (SqlBaseParser.TYPE - 175)) | (1 << (SqlBaseParser.UNBOUNDED - 175)) | (1 << (SqlBaseParser.UNCOMMITTED - 175)) | (1 << (SqlBaseParser.USE - 175)) | (1 << (SqlBaseParser.USER - 175)) | (1 << (SqlBaseParser.VALIDATE - 175)) | (1 << (SqlBaseParser.VERBOSE - 175)) | (1 << (SqlBaseParser.VIEW - 175)))) !== 0) || ((((_la - 209)) & ~0x1f) == 0 && ((1 << (_la - 209)) & ((1 << (SqlBaseParser.WORK - 209)) | (1 << (SqlBaseParser.WRITE - 209)) | (1 << (SqlBaseParser.YEAR - 209)) | (1 << (SqlBaseParser.ZONE - 209)) | (1 << (SqlBaseParser.IDENTIFIER - 209)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 209)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 209)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 209)))) !== 0)) {
	                this.state = 437;
	                this.sqlParameterDeclaration();
	                this.state = 442;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 438;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 439;
	                    this.sqlParameterDeclaration();
	                    this.state = 444;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 447;
	            this.match(SqlBaseParser.T__2);
	            this.state = 448;
	            this.match(SqlBaseParser.RETURNS);
	            this.state = 449;
	            localctx.returnType = this.type(0);
	            this.state = 452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.COMMENT) {
	                this.state = 450;
	                this.match(SqlBaseParser.COMMENT);
	                this.state = 451;
	                this.string();
	            }

	            this.state = 454;
	            this.routineCharacteristics();
	            this.state = 455;
	            this.routineBody();
	            break;

	        case 24:
	            localctx = new AlterFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 457;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 458;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 459;
	            this.qualifiedName();
	            this.state = 461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1) {
	                this.state = 460;
	                this.types();
	            }

	            this.state = 463;
	            this.alterRoutineCharacteristics();
	            break;

	        case 25:
	            localctx = new DropFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 465;
	            this.match(SqlBaseParser.DROP);
	            this.state = 467;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.TEMPORARY) {
	                this.state = 466;
	                this.match(SqlBaseParser.TEMPORARY);
	            }

	            this.state = 469;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 472;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	            if(la_===1) {
	                this.state = 470;
	                this.match(SqlBaseParser.IF);
	                this.state = 471;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 474;
	            this.qualifiedName();
	            this.state = 476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1) {
	                this.state = 475;
	                this.types();
	            }

	            break;

	        case 26:
	            localctx = new CallContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 478;
	            this.match(SqlBaseParser.CALL);
	            this.state = 479;
	            this.qualifiedName();
	            this.state = 480;
	            this.match(SqlBaseParser.T__1);
	            this.state = 489;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CALLED) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMENT - 32)) | (1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DEFINER - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DETERMINISTIC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTION - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.IO - 96)) | (1 << (SqlBaseParser.ISOLATION - 96)) | (1 << (SqlBaseParser.JSON - 96)) | (1 << (SqlBaseParser.LANGUAGE - 96)) | (1 << (SqlBaseParser.LAST - 96)) | (1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MATERIALIZED - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NAME - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.RETURN - 128)) | (1 << (SqlBaseParser.RETURNS - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.ROLES - 160)) | (1 << (SqlBaseParser.ROLLBACK - 160)) | (1 << (SqlBaseParser.ROW - 160)) | (1 << (SqlBaseParser.ROWS - 160)) | (1 << (SqlBaseParser.SCHEMA - 160)) | (1 << (SqlBaseParser.SCHEMAS - 160)) | (1 << (SqlBaseParser.SECOND - 160)) | (1 << (SqlBaseParser.SECURITY - 160)) | (1 << (SqlBaseParser.SERIALIZABLE - 160)) | (1 << (SqlBaseParser.SESSION - 160)) | (1 << (SqlBaseParser.SET - 160)) | (1 << (SqlBaseParser.SETS - 160)) | (1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.SQL - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (SqlBaseParser.STRING - 225)) | (1 << (SqlBaseParser.UNICODE_STRING - 225)) | (1 << (SqlBaseParser.BINARY_LITERAL - 225)) | (1 << (SqlBaseParser.INTEGER_VALUE - 225)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 225)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 225)) | (1 << (SqlBaseParser.IDENTIFIER - 225)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 225)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 225)))) !== 0)) {
	                this.state = 481;
	                this.callArgument();
	                this.state = 486;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 482;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 483;
	                    this.callArgument();
	                    this.state = 488;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 491;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 27:
	            localctx = new CreateRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 493;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 494;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 495;
	            localctx.name = this.identifier();
	            this.state = 499;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 496;
	                this.match(SqlBaseParser.WITH);
	                this.state = 497;
	                this.match(SqlBaseParser.ADMIN);
	                this.state = 498;
	                this.grantor();
	            }

	            break;

	        case 28:
	            localctx = new DropRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 501;
	            this.match(SqlBaseParser.DROP);
	            this.state = 502;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 503;
	            localctx.name = this.identifier();
	            break;

	        case 29:
	            localctx = new GrantRolesContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 504;
	            this.match(SqlBaseParser.GRANT);
	            this.state = 505;
	            this.roles();
	            this.state = 506;
	            this.match(SqlBaseParser.TO);
	            this.state = 507;
	            this.principal();
	            this.state = 512;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 508;
	                this.match(SqlBaseParser.T__3);
	                this.state = 509;
	                this.principal();
	                this.state = 514;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 515;
	                this.match(SqlBaseParser.WITH);
	                this.state = 516;
	                this.match(SqlBaseParser.ADMIN);
	                this.state = 517;
	                this.match(SqlBaseParser.OPTION);
	            }

	            this.state = 523;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.GRANTED) {
	                this.state = 520;
	                this.match(SqlBaseParser.GRANTED);
	                this.state = 521;
	                this.match(SqlBaseParser.BY);
	                this.state = 522;
	                this.grantor();
	            }

	            break;

	        case 30:
	            localctx = new RevokeRolesContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 525;
	            this.match(SqlBaseParser.REVOKE);
	            this.state = 529;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	            if(la_===1) {
	                this.state = 526;
	                this.match(SqlBaseParser.ADMIN);
	                this.state = 527;
	                this.match(SqlBaseParser.OPTION);
	                this.state = 528;
	                this.match(SqlBaseParser.FOR);

	            }
	            this.state = 531;
	            this.roles();
	            this.state = 532;
	            this.match(SqlBaseParser.FROM);
	            this.state = 533;
	            this.principal();
	            this.state = 538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 534;
	                this.match(SqlBaseParser.T__3);
	                this.state = 535;
	                this.principal();
	                this.state = 540;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.GRANTED) {
	                this.state = 541;
	                this.match(SqlBaseParser.GRANTED);
	                this.state = 542;
	                this.match(SqlBaseParser.BY);
	                this.state = 543;
	                this.grantor();
	            }

	            break;

	        case 31:
	            localctx = new SetRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 546;
	            this.match(SqlBaseParser.SET);
	            this.state = 547;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 551;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 548;
	                this.match(SqlBaseParser.ALL);
	                break;

	            case 2:
	                this.state = 549;
	                this.match(SqlBaseParser.NONE);
	                break;

	            case 3:
	                this.state = 550;
	                localctx.role = this.identifier();
	                break;

	            }
	            break;

	        case 32:
	            localctx = new GrantContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 553;
	            this.match(SqlBaseParser.GRANT);
	            this.state = 564;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 554;
	                this.privilege();
	                this.state = 559;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 555;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 556;
	                    this.privilege();
	                    this.state = 561;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 562;
	                this.match(SqlBaseParser.ALL);
	                this.state = 563;
	                this.match(SqlBaseParser.PRIVILEGES);
	                break;

	            }
	            this.state = 566;
	            this.match(SqlBaseParser.ON);
	            this.state = 568;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.TABLE) {
	                this.state = 567;
	                this.match(SqlBaseParser.TABLE);
	            }

	            this.state = 570;
	            this.qualifiedName();
	            this.state = 571;
	            this.match(SqlBaseParser.TO);
	            this.state = 572;
	            localctx.grantee = this.principal();
	            this.state = 576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 573;
	                this.match(SqlBaseParser.WITH);
	                this.state = 574;
	                this.match(SqlBaseParser.GRANT);
	                this.state = 575;
	                this.match(SqlBaseParser.OPTION);
	            }

	            break;

	        case 33:
	            localctx = new RevokeContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 578;
	            this.match(SqlBaseParser.REVOKE);
	            this.state = 582;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	            if(la_===1) {
	                this.state = 579;
	                this.match(SqlBaseParser.GRANT);
	                this.state = 580;
	                this.match(SqlBaseParser.OPTION);
	                this.state = 581;
	                this.match(SqlBaseParser.FOR);

	            }
	            this.state = 594;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 584;
	                this.privilege();
	                this.state = 589;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 585;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 586;
	                    this.privilege();
	                    this.state = 591;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            case 2:
	                this.state = 592;
	                this.match(SqlBaseParser.ALL);
	                this.state = 593;
	                this.match(SqlBaseParser.PRIVILEGES);
	                break;

	            }
	            this.state = 596;
	            this.match(SqlBaseParser.ON);
	            this.state = 598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.TABLE) {
	                this.state = 597;
	                this.match(SqlBaseParser.TABLE);
	            }

	            this.state = 600;
	            this.qualifiedName();
	            this.state = 601;
	            this.match(SqlBaseParser.FROM);
	            this.state = 602;
	            localctx.grantee = this.principal();
	            break;

	        case 34:
	            localctx = new ShowGrantsContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 604;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 605;
	            this.match(SqlBaseParser.GRANTS);
	            this.state = 611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ON) {
	                this.state = 606;
	                this.match(SqlBaseParser.ON);
	                this.state = 608;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.TABLE) {
	                    this.state = 607;
	                    this.match(SqlBaseParser.TABLE);
	                }

	                this.state = 610;
	                this.qualifiedName();
	            }

	            break;

	        case 35:
	            localctx = new ExplainContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 613;
	            this.match(SqlBaseParser.EXPLAIN);
	            this.state = 615;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	            if(la_===1) {
	                this.state = 614;
	                this.match(SqlBaseParser.ANALYZE);

	            }
	            this.state = 618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.VERBOSE) {
	                this.state = 617;
	                this.match(SqlBaseParser.VERBOSE);
	            }

	            this.state = 631;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            if(la_===1) {
	                this.state = 620;
	                this.match(SqlBaseParser.T__1);
	                this.state = 621;
	                this.explainOption();
	                this.state = 626;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 622;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 623;
	                    this.explainOption();
	                    this.state = 628;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 629;
	                this.match(SqlBaseParser.T__2);

	            }
	            this.state = 633;
	            this.statement();
	            break;

	        case 36:
	            localctx = new ShowCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 634;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 635;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 636;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 637;
	            this.qualifiedName();
	            break;

	        case 37:
	            localctx = new ShowCreateViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 638;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 639;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 640;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 641;
	            this.qualifiedName();
	            break;

	        case 38:
	            localctx = new ShowCreateMaterializedViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 38);
	            this.state = 642;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 643;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 644;
	            this.match(SqlBaseParser.MATERIALIZED);
	            this.state = 645;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 646;
	            this.qualifiedName();
	            break;

	        case 39:
	            localctx = new ShowCreateFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 39);
	            this.state = 647;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 648;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 649;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 650;
	            this.qualifiedName();
	            this.state = 652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1) {
	                this.state = 651;
	                this.types();
	            }

	            break;

	        case 40:
	            localctx = new ShowTablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 40);
	            this.state = 654;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 655;
	            this.match(SqlBaseParser.TABLES);
	            this.state = 658;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 656;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 657;
	                this.qualifiedName();
	            }

	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LIKE) {
	                this.state = 660;
	                this.match(SqlBaseParser.LIKE);
	                this.state = 661;
	                localctx.pattern = this.string();
	                this.state = 664;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.ESCAPE) {
	                    this.state = 662;
	                    this.match(SqlBaseParser.ESCAPE);
	                    this.state = 663;
	                    localctx.escape = this.string();
	                }

	            }

	            break;

	        case 41:
	            localctx = new ShowSchemasContext(this, localctx);
	            this.enterOuterAlt(localctx, 41);
	            this.state = 668;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 669;
	            this.match(SqlBaseParser.SCHEMAS);
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 670;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 671;
	                this.identifier();
	            }

	            this.state = 680;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LIKE) {
	                this.state = 674;
	                this.match(SqlBaseParser.LIKE);
	                this.state = 675;
	                localctx.pattern = this.string();
	                this.state = 678;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.ESCAPE) {
	                    this.state = 676;
	                    this.match(SqlBaseParser.ESCAPE);
	                    this.state = 677;
	                    localctx.escape = this.string();
	                }

	            }

	            break;

	        case 42:
	            localctx = new ShowCatalogsContext(this, localctx);
	            this.enterOuterAlt(localctx, 42);
	            this.state = 682;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 683;
	            this.match(SqlBaseParser.CATALOGS);
	            this.state = 686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LIKE) {
	                this.state = 684;
	                this.match(SqlBaseParser.LIKE);
	                this.state = 685;
	                localctx.pattern = this.string();
	            }

	            break;

	        case 43:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 43);
	            this.state = 688;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 689;
	            this.match(SqlBaseParser.COLUMNS);
	            this.state = 690;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 691;
	            this.qualifiedName();
	            break;

	        case 44:
	            localctx = new ShowStatsContext(this, localctx);
	            this.enterOuterAlt(localctx, 44);
	            this.state = 692;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 693;
	            this.match(SqlBaseParser.STATS);
	            this.state = 694;
	            this.match(SqlBaseParser.FOR);
	            this.state = 695;
	            this.qualifiedName();
	            break;

	        case 45:
	            localctx = new ShowStatsForQueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 45);
	            this.state = 696;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 697;
	            this.match(SqlBaseParser.STATS);
	            this.state = 698;
	            this.match(SqlBaseParser.FOR);
	            this.state = 699;
	            this.match(SqlBaseParser.T__1);
	            this.state = 700;
	            this.querySpecification();
	            this.state = 701;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 46:
	            localctx = new ShowRolesContext(this, localctx);
	            this.enterOuterAlt(localctx, 46);
	            this.state = 703;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.CURRENT) {
	                this.state = 704;
	                this.match(SqlBaseParser.CURRENT);
	            }

	            this.state = 707;
	            this.match(SqlBaseParser.ROLES);
	            this.state = 710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 708;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 709;
	                this.identifier();
	            }

	            break;

	        case 47:
	            localctx = new ShowRoleGrantsContext(this, localctx);
	            this.enterOuterAlt(localctx, 47);
	            this.state = 712;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 713;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 714;
	            this.match(SqlBaseParser.GRANTS);
	            this.state = 717;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 715;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 716;
	                this.identifier();
	            }

	            break;

	        case 48:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 48);
	            this.state = 719;
	            this.match(SqlBaseParser.DESCRIBE);
	            this.state = 720;
	            this.qualifiedName();
	            break;

	        case 49:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 49);
	            this.state = 721;
	            this.match(SqlBaseParser.DESC);
	            this.state = 722;
	            this.qualifiedName();
	            break;

	        case 50:
	            localctx = new ShowFunctionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 50);
	            this.state = 723;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 724;
	            this.match(SqlBaseParser.FUNCTIONS);
	            this.state = 731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LIKE) {
	                this.state = 725;
	                this.match(SqlBaseParser.LIKE);
	                this.state = 726;
	                localctx.pattern = this.string();
	                this.state = 729;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.ESCAPE) {
	                    this.state = 727;
	                    this.match(SqlBaseParser.ESCAPE);
	                    this.state = 728;
	                    localctx.escape = this.string();
	                }

	            }

	            break;

	        case 51:
	            localctx = new ShowSessionContext(this, localctx);
	            this.enterOuterAlt(localctx, 51);
	            this.state = 733;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 734;
	            this.match(SqlBaseParser.SESSION);
	            break;

	        case 52:
	            localctx = new SetSessionContext(this, localctx);
	            this.enterOuterAlt(localctx, 52);
	            this.state = 735;
	            this.match(SqlBaseParser.SET);
	            this.state = 736;
	            this.match(SqlBaseParser.SESSION);
	            this.state = 737;
	            this.qualifiedName();
	            this.state = 738;
	            this.match(SqlBaseParser.EQ);
	            this.state = 739;
	            this.expression();
	            break;

	        case 53:
	            localctx = new ResetSessionContext(this, localctx);
	            this.enterOuterAlt(localctx, 53);
	            this.state = 741;
	            this.match(SqlBaseParser.RESET);
	            this.state = 742;
	            this.match(SqlBaseParser.SESSION);
	            this.state = 743;
	            this.qualifiedName();
	            break;

	        case 54:
	            localctx = new StartTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 54);
	            this.state = 744;
	            this.match(SqlBaseParser.START);
	            this.state = 745;
	            this.match(SqlBaseParser.TRANSACTION);
	            this.state = 754;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ISOLATION || _la===SqlBaseParser.READ) {
	                this.state = 746;
	                this.transactionMode();
	                this.state = 751;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 747;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 748;
	                    this.transactionMode();
	                    this.state = 753;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        case 55:
	            localctx = new CommitContext(this, localctx);
	            this.enterOuterAlt(localctx, 55);
	            this.state = 756;
	            this.match(SqlBaseParser.COMMIT);
	            this.state = 758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WORK) {
	                this.state = 757;
	                this.match(SqlBaseParser.WORK);
	            }

	            break;

	        case 56:
	            localctx = new RollbackContext(this, localctx);
	            this.enterOuterAlt(localctx, 56);
	            this.state = 760;
	            this.match(SqlBaseParser.ROLLBACK);
	            this.state = 762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WORK) {
	                this.state = 761;
	                this.match(SqlBaseParser.WORK);
	            }

	            break;

	        case 57:
	            localctx = new PrepareContext(this, localctx);
	            this.enterOuterAlt(localctx, 57);
	            this.state = 764;
	            this.match(SqlBaseParser.PREPARE);
	            this.state = 765;
	            this.identifier();
	            this.state = 766;
	            this.match(SqlBaseParser.FROM);
	            this.state = 767;
	            this.statement();
	            break;

	        case 58:
	            localctx = new DeallocateContext(this, localctx);
	            this.enterOuterAlt(localctx, 58);
	            this.state = 769;
	            this.match(SqlBaseParser.DEALLOCATE);
	            this.state = 770;
	            this.match(SqlBaseParser.PREPARE);
	            this.state = 771;
	            this.identifier();
	            break;

	        case 59:
	            localctx = new ExecuteContext(this, localctx);
	            this.enterOuterAlt(localctx, 59);
	            this.state = 772;
	            this.match(SqlBaseParser.EXECUTE);
	            this.state = 773;
	            this.identifier();
	            this.state = 783;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.USING) {
	                this.state = 774;
	                this.match(SqlBaseParser.USING);
	                this.state = 775;
	                this.expression();
	                this.state = 780;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 776;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 777;
	                    this.expression();
	                    this.state = 782;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        case 60:
	            localctx = new DescribeInputContext(this, localctx);
	            this.enterOuterAlt(localctx, 60);
	            this.state = 785;
	            this.match(SqlBaseParser.DESCRIBE);
	            this.state = 786;
	            this.match(SqlBaseParser.INPUT);
	            this.state = 787;
	            this.identifier();
	            break;

	        case 61:
	            localctx = new DescribeOutputContext(this, localctx);
	            this.enterOuterAlt(localctx, 61);
	            this.state = 788;
	            this.match(SqlBaseParser.DESCRIBE);
	            this.state = 789;
	            this.match(SqlBaseParser.OUTPUT);
	            this.state = 790;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SqlBaseParser.RULE_query);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 794;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.WITH) {
	            this.state = 793;
	            this.with();
	        }

	        this.state = 796;
	        this.queryNoWith();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with() {
	    let localctx = new WithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SqlBaseParser.RULE_with);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 798;
	        this.match(SqlBaseParser.WITH);
	        this.state = 800;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.RECURSIVE) {
	            this.state = 799;
	            this.match(SqlBaseParser.RECURSIVE);
	        }

	        this.state = 802;
	        this.namedQuery();
	        this.state = 807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__3) {
	            this.state = 803;
	            this.match(SqlBaseParser.T__3);
	            this.state = 804;
	            this.namedQuery();
	            this.state = 809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableElement() {
	    let localctx = new TableElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SqlBaseParser.RULE_tableElement);
	    try {
	        this.state = 812;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.ADD:
	        case SqlBaseParser.ADMIN:
	        case SqlBaseParser.ALL:
	        case SqlBaseParser.ANALYZE:
	        case SqlBaseParser.ANY:
	        case SqlBaseParser.ARRAY:
	        case SqlBaseParser.ASC:
	        case SqlBaseParser.AT:
	        case SqlBaseParser.BERNOULLI:
	        case SqlBaseParser.CALL:
	        case SqlBaseParser.CALLED:
	        case SqlBaseParser.CASCADE:
	        case SqlBaseParser.CATALOGS:
	        case SqlBaseParser.COLUMN:
	        case SqlBaseParser.COLUMNS:
	        case SqlBaseParser.COMMENT:
	        case SqlBaseParser.COMMIT:
	        case SqlBaseParser.COMMITTED:
	        case SqlBaseParser.CURRENT:
	        case SqlBaseParser.CURRENT_ROLE:
	        case SqlBaseParser.DATA:
	        case SqlBaseParser.DATE:
	        case SqlBaseParser.DAY:
	        case SqlBaseParser.DEFINER:
	        case SqlBaseParser.DESC:
	        case SqlBaseParser.DETERMINISTIC:
	        case SqlBaseParser.DISTRIBUTED:
	        case SqlBaseParser.EXCLUDING:
	        case SqlBaseParser.EXPLAIN:
	        case SqlBaseParser.EXTERNAL:
	        case SqlBaseParser.FILTER:
	        case SqlBaseParser.FIRST:
	        case SqlBaseParser.FOLLOWING:
	        case SqlBaseParser.FORMAT:
	        case SqlBaseParser.FUNCTION:
	        case SqlBaseParser.FUNCTIONS:
	        case SqlBaseParser.GRANT:
	        case SqlBaseParser.GRANTED:
	        case SqlBaseParser.GRANTS:
	        case SqlBaseParser.GRAPHVIZ:
	        case SqlBaseParser.HOUR:
	        case SqlBaseParser.IF:
	        case SqlBaseParser.IGNORE:
	        case SqlBaseParser.INCLUDING:
	        case SqlBaseParser.INPUT:
	        case SqlBaseParser.INTERVAL:
	        case SqlBaseParser.INVOKER:
	        case SqlBaseParser.IO:
	        case SqlBaseParser.ISOLATION:
	        case SqlBaseParser.JSON:
	        case SqlBaseParser.LANGUAGE:
	        case SqlBaseParser.LAST:
	        case SqlBaseParser.LATERAL:
	        case SqlBaseParser.LEVEL:
	        case SqlBaseParser.LIMIT:
	        case SqlBaseParser.LOGICAL:
	        case SqlBaseParser.MAP:
	        case SqlBaseParser.MATERIALIZED:
	        case SqlBaseParser.MINUTE:
	        case SqlBaseParser.MONTH:
	        case SqlBaseParser.NAME:
	        case SqlBaseParser.NFC:
	        case SqlBaseParser.NFD:
	        case SqlBaseParser.NFKC:
	        case SqlBaseParser.NFKD:
	        case SqlBaseParser.NO:
	        case SqlBaseParser.NONE:
	        case SqlBaseParser.NULLIF:
	        case SqlBaseParser.NULLS:
	        case SqlBaseParser.OFFSET:
	        case SqlBaseParser.ONLY:
	        case SqlBaseParser.OPTION:
	        case SqlBaseParser.ORDINALITY:
	        case SqlBaseParser.OUTPUT:
	        case SqlBaseParser.OVER:
	        case SqlBaseParser.PARTITION:
	        case SqlBaseParser.PARTITIONS:
	        case SqlBaseParser.POSITION:
	        case SqlBaseParser.PRECEDING:
	        case SqlBaseParser.PRIVILEGES:
	        case SqlBaseParser.PROPERTIES:
	        case SqlBaseParser.RANGE:
	        case SqlBaseParser.READ:
	        case SqlBaseParser.REFRESH:
	        case SqlBaseParser.RENAME:
	        case SqlBaseParser.REPEATABLE:
	        case SqlBaseParser.REPLACE:
	        case SqlBaseParser.RESET:
	        case SqlBaseParser.RESPECT:
	        case SqlBaseParser.RESTRICT:
	        case SqlBaseParser.RETURN:
	        case SqlBaseParser.RETURNS:
	        case SqlBaseParser.REVOKE:
	        case SqlBaseParser.ROLE:
	        case SqlBaseParser.ROLES:
	        case SqlBaseParser.ROLLBACK:
	        case SqlBaseParser.ROW:
	        case SqlBaseParser.ROWS:
	        case SqlBaseParser.SCHEMA:
	        case SqlBaseParser.SCHEMAS:
	        case SqlBaseParser.SECOND:
	        case SqlBaseParser.SECURITY:
	        case SqlBaseParser.SERIALIZABLE:
	        case SqlBaseParser.SESSION:
	        case SqlBaseParser.SET:
	        case SqlBaseParser.SETS:
	        case SqlBaseParser.SHOW:
	        case SqlBaseParser.SOME:
	        case SqlBaseParser.SQL:
	        case SqlBaseParser.START:
	        case SqlBaseParser.STATS:
	        case SqlBaseParser.SUBSTRING:
	        case SqlBaseParser.SYSTEM:
	        case SqlBaseParser.TABLES:
	        case SqlBaseParser.TABLESAMPLE:
	        case SqlBaseParser.TEMPORARY:
	        case SqlBaseParser.TEXT:
	        case SqlBaseParser.TIME:
	        case SqlBaseParser.TIMESTAMP:
	        case SqlBaseParser.TO:
	        case SqlBaseParser.TRANSACTION:
	        case SqlBaseParser.TRY_CAST:
	        case SqlBaseParser.TYPE:
	        case SqlBaseParser.UNBOUNDED:
	        case SqlBaseParser.UNCOMMITTED:
	        case SqlBaseParser.USE:
	        case SqlBaseParser.USER:
	        case SqlBaseParser.VALIDATE:
	        case SqlBaseParser.VERBOSE:
	        case SqlBaseParser.VIEW:
	        case SqlBaseParser.WORK:
	        case SqlBaseParser.WRITE:
	        case SqlBaseParser.YEAR:
	        case SqlBaseParser.ZONE:
	        case SqlBaseParser.IDENTIFIER:
	        case SqlBaseParser.DIGIT_IDENTIFIER:
	        case SqlBaseParser.QUOTED_IDENTIFIER:
	        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 810;
	            this.columnDefinition();
	            break;
	        case SqlBaseParser.LIKE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 811;
	            this.likeClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDefinition() {
	    let localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SqlBaseParser.RULE_columnDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this.identifier();
	        this.state = 815;
	        this.type(0);
	        this.state = 818;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.NOT) {
	            this.state = 816;
	            this.match(SqlBaseParser.NOT);
	            this.state = 817;
	            this.match(SqlBaseParser.NULL);
	        }

	        this.state = 822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.COMMENT) {
	            this.state = 820;
	            this.match(SqlBaseParser.COMMENT);
	            this.state = 821;
	            this.string();
	        }

	        this.state = 826;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.WITH) {
	            this.state = 824;
	            this.match(SqlBaseParser.WITH);
	            this.state = 825;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeClause() {
	    let localctx = new LikeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SqlBaseParser.RULE_likeClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        this.match(SqlBaseParser.LIKE);
	        this.state = 829;
	        this.qualifiedName();
	        this.state = 832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.EXCLUDING || _la===SqlBaseParser.INCLUDING) {
	            this.state = 830;
	            localctx.optionType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.EXCLUDING || _la===SqlBaseParser.INCLUDING)) {
	                localctx.optionType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 831;
	            this.match(SqlBaseParser.PROPERTIES);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	properties() {
	    let localctx = new PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SqlBaseParser.RULE_properties);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 834;
	        this.match(SqlBaseParser.T__1);
	        this.state = 835;
	        this.property();
	        this.state = 840;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__3) {
	            this.state = 836;
	            this.match(SqlBaseParser.T__3);
	            this.state = 837;
	            this.property();
	            this.state = 842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 843;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property() {
	    let localctx = new PropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SqlBaseParser.RULE_property);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 845;
	        this.identifier();
	        this.state = 846;
	        this.match(SqlBaseParser.EQ);
	        this.state = 847;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlParameterDeclaration() {
	    let localctx = new SqlParameterDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SqlBaseParser.RULE_sqlParameterDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 849;
	        this.identifier();
	        this.state = 850;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineCharacteristics() {
	    let localctx = new RoutineCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SqlBaseParser.RULE_routineCharacteristics);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.CALLED || _la===SqlBaseParser.DETERMINISTIC || _la===SqlBaseParser.LANGUAGE || _la===SqlBaseParser.NOT || _la===SqlBaseParser.RETURNS) {
	            this.state = 852;
	            this.routineCharacteristic();
	            this.state = 857;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineCharacteristic() {
	    let localctx = new RoutineCharacteristicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SqlBaseParser.RULE_routineCharacteristic);
	    try {
	        this.state = 862;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.LANGUAGE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 858;
	            this.match(SqlBaseParser.LANGUAGE);
	            this.state = 859;
	            this.language();
	            break;
	        case SqlBaseParser.DETERMINISTIC:
	        case SqlBaseParser.NOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 860;
	            this.determinism();
	            break;
	        case SqlBaseParser.CALLED:
	        case SqlBaseParser.RETURNS:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 861;
	            this.nullCallClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRoutineCharacteristics() {
	    let localctx = new AlterRoutineCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SqlBaseParser.RULE_alterRoutineCharacteristics);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.CALLED || _la===SqlBaseParser.RETURNS) {
	            this.state = 864;
	            this.alterRoutineCharacteristic();
	            this.state = 869;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRoutineCharacteristic() {
	    let localctx = new AlterRoutineCharacteristicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SqlBaseParser.RULE_alterRoutineCharacteristic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 870;
	        this.nullCallClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineBody() {
	    let localctx = new RoutineBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SqlBaseParser.RULE_routineBody);
	    try {
	        this.state = 874;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.RETURN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 872;
	            this.returnStatement();
	            break;
	        case SqlBaseParser.EXTERNAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 873;
	            this.externalBodyReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SqlBaseParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 876;
	        this.match(SqlBaseParser.RETURN);
	        this.state = 877;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalBodyReference() {
	    let localctx = new ExternalBodyReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SqlBaseParser.RULE_externalBodyReference);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 879;
	        this.match(SqlBaseParser.EXTERNAL);
	        this.state = 882;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.NAME) {
	            this.state = 880;
	            this.match(SqlBaseParser.NAME);
	            this.state = 881;
	            this.externalRoutineName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	language() {
	    let localctx = new LanguageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SqlBaseParser.RULE_language);
	    try {
	        this.state = 886;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 884;
	            this.match(SqlBaseParser.SQL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 885;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	determinism() {
	    let localctx = new DeterminismContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SqlBaseParser.RULE_determinism);
	    try {
	        this.state = 891;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.DETERMINISTIC:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 888;
	            this.match(SqlBaseParser.DETERMINISTIC);
	            break;
	        case SqlBaseParser.NOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 889;
	            this.match(SqlBaseParser.NOT);
	            this.state = 890;
	            this.match(SqlBaseParser.DETERMINISTIC);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullCallClause() {
	    let localctx = new NullCallClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SqlBaseParser.RULE_nullCallClause);
	    try {
	        this.state = 902;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.RETURNS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 893;
	            this.match(SqlBaseParser.RETURNS);
	            this.state = 894;
	            this.match(SqlBaseParser.NULL);
	            this.state = 895;
	            this.match(SqlBaseParser.ON);
	            this.state = 896;
	            this.match(SqlBaseParser.NULL);
	            this.state = 897;
	            this.match(SqlBaseParser.INPUT);
	            break;
	        case SqlBaseParser.CALLED:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 898;
	            this.match(SqlBaseParser.CALLED);
	            this.state = 899;
	            this.match(SqlBaseParser.ON);
	            this.state = 900;
	            this.match(SqlBaseParser.NULL);
	            this.state = 901;
	            this.match(SqlBaseParser.INPUT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalRoutineName() {
	    let localctx = new ExternalRoutineNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SqlBaseParser.RULE_externalRoutineName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryNoWith() {
	    let localctx = new QueryNoWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SqlBaseParser.RULE_queryNoWith);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 906;
	        this.queryTerm(0);
	        this.state = 917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.ORDER) {
	            this.state = 907;
	            this.match(SqlBaseParser.ORDER);
	            this.state = 908;
	            this.match(SqlBaseParser.BY);
	            this.state = 909;
	            this.sortItem();
	            this.state = 914;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 910;
	                this.match(SqlBaseParser.T__3);
	                this.state = 911;
	                this.sortItem();
	                this.state = 916;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.OFFSET) {
	            this.state = 919;
	            this.match(SqlBaseParser.OFFSET);
	            this.state = 920;
	            localctx.offset = this.match(SqlBaseParser.INTEGER_VALUE);
	            this.state = 922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ROW || _la===SqlBaseParser.ROWS) {
	                this.state = 921;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.ROW || _la===SqlBaseParser.ROWS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	        }

	        this.state = 928;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.LIMIT) {
	            this.state = 926;
	            this.match(SqlBaseParser.LIMIT);
	            this.state = 927;
	            localctx.limit = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.INTEGER_VALUE)) {
	                localctx.limit = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	queryTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new QueryTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 48;
	    this.enterRecursionRule(localctx, 48, SqlBaseParser.RULE_queryTerm, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new QueryTermDefaultContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 931;
	        this.queryPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 947;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 945;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
	                    this.state = 933;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 934;
	                    localctx.operator = this.match(SqlBaseParser.INTERSECT);
	                    this.state = 936;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
	                        this.state = 935;
	                        this.setQuantifier();
	                    }

	                    this.state = 938;
	                    localctx.right = this.queryTerm(3);
	                    break;

	                case 2:
	                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
	                    this.state = 939;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 940;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SqlBaseParser.EXCEPT || _la===SqlBaseParser.UNION)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 942;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
	                        this.state = 941;
	                        this.setQuantifier();
	                    }

	                    this.state = 944;
	                    localctx.right = this.queryTerm(2);
	                    break;

	                } 
	            }
	            this.state = 949;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	queryPrimary() {
	    let localctx = new QueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SqlBaseParser.RULE_queryPrimary);
	    try {
	        this.state = 966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.SELECT:
	            localctx = new QueryPrimaryDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 950;
	            this.querySpecification();
	            break;
	        case SqlBaseParser.TABLE:
	            localctx = new TableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 951;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 952;
	            this.qualifiedName();
	            break;
	        case SqlBaseParser.VALUES:
	            localctx = new InlineTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 953;
	            this.match(SqlBaseParser.VALUES);
	            this.state = 954;
	            this.expression();
	            this.state = 959;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,115,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 955;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 956;
	                    this.expression(); 
	                }
	                this.state = 961;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,115,this._ctx);
	            }

	            break;
	        case SqlBaseParser.T__1:
	            localctx = new SubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 962;
	            this.match(SqlBaseParser.T__1);
	            this.state = 963;
	            this.queryNoWith();
	            this.state = 964;
	            this.match(SqlBaseParser.T__2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortItem() {
	    let localctx = new SortItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SqlBaseParser.RULE_sortItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 968;
	        this.expression();
	        this.state = 970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC) {
	            this.state = 969;
	            localctx.ordering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC)) {
	                localctx.ordering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 974;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.NULLS) {
	            this.state = 972;
	            this.match(SqlBaseParser.NULLS);
	            this.state = 973;
	            localctx.nullOrdering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.FIRST || _la===SqlBaseParser.LAST)) {
	                localctx.nullOrdering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SqlBaseParser.RULE_querySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 976;
	        this.match(SqlBaseParser.SELECT);
	        this.state = 978;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        if(la_===1) {
	            this.state = 977;
	            this.setQuantifier();

	        }
	        this.state = 980;
	        this.selectItem();
	        this.state = 985;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,120,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 981;
	                this.match(SqlBaseParser.T__3);
	                this.state = 982;
	                this.selectItem(); 
	            }
	            this.state = 987;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,120,this._ctx);
	        }

	        this.state = 997;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        if(la_===1) {
	            this.state = 988;
	            this.match(SqlBaseParser.FROM);
	            this.state = 989;
	            this.relation(0);
	            this.state = 994;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 990;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 991;
	                    this.relation(0); 
	                }
	                this.state = 996;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
	            }


	        }
	        this.state = 1001;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        if(la_===1) {
	            this.state = 999;
	            this.match(SqlBaseParser.WHERE);
	            this.state = 1000;
	            localctx.where = this.booleanExpression(0);

	        }
	        this.state = 1006;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 1003;
	            this.match(SqlBaseParser.GROUP);
	            this.state = 1004;
	            this.match(SqlBaseParser.BY);
	            this.state = 1005;
	            this.groupBy();

	        }
	        this.state = 1010;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        if(la_===1) {
	            this.state = 1008;
	            this.match(SqlBaseParser.HAVING);
	            this.state = 1009;
	            localctx.having = this.booleanExpression(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupBy() {
	    let localctx = new GroupByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SqlBaseParser.RULE_groupBy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1013;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 1012;
	            this.setQuantifier();

	        }
	        this.state = 1015;
	        this.groupingElement();
	        this.state = 1020;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,127,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1016;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1017;
	                this.groupingElement(); 
	            }
	            this.state = 1022;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,127,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElement() {
	    let localctx = new GroupingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SqlBaseParser.RULE_groupingElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1063;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SingleGroupingSetContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1023;
	            this.groupingSet();
	            break;

	        case 2:
	            localctx = new RollupContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1024;
	            this.match(SqlBaseParser.ROLLUP);
	            this.state = 1025;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1034;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CALLED) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMENT - 32)) | (1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DEFINER - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DETERMINISTIC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTION - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.IO - 96)) | (1 << (SqlBaseParser.ISOLATION - 96)) | (1 << (SqlBaseParser.JSON - 96)) | (1 << (SqlBaseParser.LANGUAGE - 96)) | (1 << (SqlBaseParser.LAST - 96)) | (1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MATERIALIZED - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NAME - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.RETURN - 128)) | (1 << (SqlBaseParser.RETURNS - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.ROLES - 160)) | (1 << (SqlBaseParser.ROLLBACK - 160)) | (1 << (SqlBaseParser.ROW - 160)) | (1 << (SqlBaseParser.ROWS - 160)) | (1 << (SqlBaseParser.SCHEMA - 160)) | (1 << (SqlBaseParser.SCHEMAS - 160)) | (1 << (SqlBaseParser.SECOND - 160)) | (1 << (SqlBaseParser.SECURITY - 160)) | (1 << (SqlBaseParser.SERIALIZABLE - 160)) | (1 << (SqlBaseParser.SESSION - 160)) | (1 << (SqlBaseParser.SET - 160)) | (1 << (SqlBaseParser.SETS - 160)) | (1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.SQL - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (SqlBaseParser.STRING - 225)) | (1 << (SqlBaseParser.UNICODE_STRING - 225)) | (1 << (SqlBaseParser.BINARY_LITERAL - 225)) | (1 << (SqlBaseParser.INTEGER_VALUE - 225)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 225)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 225)) | (1 << (SqlBaseParser.IDENTIFIER - 225)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 225)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 225)))) !== 0)) {
	                this.state = 1026;
	                this.expression();
	                this.state = 1031;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 1027;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1028;
	                    this.expression();
	                    this.state = 1033;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1036;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 3:
	            localctx = new CubeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1037;
	            this.match(SqlBaseParser.CUBE);
	            this.state = 1038;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1047;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CALLED) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMENT - 32)) | (1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DEFINER - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DETERMINISTIC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTION - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.IO - 96)) | (1 << (SqlBaseParser.ISOLATION - 96)) | (1 << (SqlBaseParser.JSON - 96)) | (1 << (SqlBaseParser.LANGUAGE - 96)) | (1 << (SqlBaseParser.LAST - 96)) | (1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MATERIALIZED - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NAME - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.RETURN - 128)) | (1 << (SqlBaseParser.RETURNS - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.ROLES - 160)) | (1 << (SqlBaseParser.ROLLBACK - 160)) | (1 << (SqlBaseParser.ROW - 160)) | (1 << (SqlBaseParser.ROWS - 160)) | (1 << (SqlBaseParser.SCHEMA - 160)) | (1 << (SqlBaseParser.SCHEMAS - 160)) | (1 << (SqlBaseParser.SECOND - 160)) | (1 << (SqlBaseParser.SECURITY - 160)) | (1 << (SqlBaseParser.SERIALIZABLE - 160)) | (1 << (SqlBaseParser.SESSION - 160)) | (1 << (SqlBaseParser.SET - 160)) | (1 << (SqlBaseParser.SETS - 160)) | (1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.SQL - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (SqlBaseParser.STRING - 225)) | (1 << (SqlBaseParser.UNICODE_STRING - 225)) | (1 << (SqlBaseParser.BINARY_LITERAL - 225)) | (1 << (SqlBaseParser.INTEGER_VALUE - 225)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 225)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 225)) | (1 << (SqlBaseParser.IDENTIFIER - 225)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 225)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 225)))) !== 0)) {
	                this.state = 1039;
	                this.expression();
	                this.state = 1044;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 1040;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1041;
	                    this.expression();
	                    this.state = 1046;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1049;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 4:
	            localctx = new MultipleGroupingSetsContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1050;
	            this.match(SqlBaseParser.GROUPING);
	            this.state = 1051;
	            this.match(SqlBaseParser.SETS);
	            this.state = 1052;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1053;
	            this.groupingSet();
	            this.state = 1058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 1054;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1055;
	                this.groupingSet();
	                this.state = 1060;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1061;
	            this.match(SqlBaseParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSet() {
	    let localctx = new GroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SqlBaseParser.RULE_groupingSet);
	    var _la = 0; // Token type
	    try {
	        this.state = 1078;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1065;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1074;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CALLED) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMENT - 32)) | (1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DEFINER - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DETERMINISTIC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTION - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.IO - 96)) | (1 << (SqlBaseParser.ISOLATION - 96)) | (1 << (SqlBaseParser.JSON - 96)) | (1 << (SqlBaseParser.LANGUAGE - 96)) | (1 << (SqlBaseParser.LAST - 96)) | (1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MATERIALIZED - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NAME - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.RETURN - 128)) | (1 << (SqlBaseParser.RETURNS - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.ROLES - 160)) | (1 << (SqlBaseParser.ROLLBACK - 160)) | (1 << (SqlBaseParser.ROW - 160)) | (1 << (SqlBaseParser.ROWS - 160)) | (1 << (SqlBaseParser.SCHEMA - 160)) | (1 << (SqlBaseParser.SCHEMAS - 160)) | (1 << (SqlBaseParser.SECOND - 160)) | (1 << (SqlBaseParser.SECURITY - 160)) | (1 << (SqlBaseParser.SERIALIZABLE - 160)) | (1 << (SqlBaseParser.SESSION - 160)) | (1 << (SqlBaseParser.SET - 160)) | (1 << (SqlBaseParser.SETS - 160)) | (1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.SQL - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (SqlBaseParser.STRING - 225)) | (1 << (SqlBaseParser.UNICODE_STRING - 225)) | (1 << (SqlBaseParser.BINARY_LITERAL - 225)) | (1 << (SqlBaseParser.INTEGER_VALUE - 225)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 225)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 225)) | (1 << (SqlBaseParser.IDENTIFIER - 225)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 225)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 225)))) !== 0)) {
	                this.state = 1066;
	                this.expression();
	                this.state = 1071;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 1067;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1068;
	                    this.expression();
	                    this.state = 1073;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1076;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1077;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedQuery() {
	    let localctx = new NamedQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SqlBaseParser.RULE_namedQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1080;
	        localctx.name = this.identifier();
	        this.state = 1082;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.T__1) {
	            this.state = 1081;
	            this.columnAliases();
	        }

	        this.state = 1084;
	        this.match(SqlBaseParser.AS);
	        this.state = 1085;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1086;
	        this.query();
	        this.state = 1087;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setQuantifier() {
	    let localctx = new SetQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SqlBaseParser.RULE_setQuantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1089;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SqlBaseParser.RULE_selectItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 1103;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectSingleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1091;
	            this.expression();
	            this.state = 1096;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	            if(la_===1) {
	                this.state = 1093;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.AS) {
	                    this.state = 1092;
	                    this.match(SqlBaseParser.AS);
	                }

	                this.state = 1095;
	                this.identifier();

	            }
	            break;

	        case 2:
	            localctx = new SelectAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1098;
	            this.qualifiedName();
	            this.state = 1099;
	            this.match(SqlBaseParser.T__0);
	            this.state = 1100;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        case 3:
	            localctx = new SelectAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1102;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	relation(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new RelationContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 68;
	    this.enterRecursionRule(localctx, 68, SqlBaseParser.RULE_relation, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new RelationDefaultContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1106;
	        this.sampledRelation();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1126;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new JoinRelationContext(this, new RelationContext(this, _parentctx, _parentState));
	                localctx.left = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_relation);
	                this.state = 1108;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1122;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case SqlBaseParser.CROSS:
	                    this.state = 1109;
	                    this.match(SqlBaseParser.CROSS);
	                    this.state = 1110;
	                    this.match(SqlBaseParser.JOIN);
	                    this.state = 1111;
	                    localctx.right = this.sampledRelation();
	                    break;
	                case SqlBaseParser.FULL:
	                case SqlBaseParser.INNER:
	                case SqlBaseParser.JOIN:
	                case SqlBaseParser.LEFT:
	                case SqlBaseParser.RIGHT:
	                    this.state = 1112;
	                    this.joinType();
	                    this.state = 1113;
	                    this.match(SqlBaseParser.JOIN);
	                    this.state = 1114;
	                    localctx.rightRelation = this.relation(0);
	                    this.state = 1115;
	                    this.joinCriteria();
	                    break;
	                case SqlBaseParser.NATURAL:
	                    this.state = 1117;
	                    this.match(SqlBaseParser.NATURAL);
	                    this.state = 1118;
	                    this.joinType();
	                    this.state = 1119;
	                    this.match(SqlBaseParser.JOIN);
	                    this.state = 1120;
	                    localctx.right = this.sampledRelation();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1128;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	joinType() {
	    let localctx = new JoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SqlBaseParser.RULE_joinType);
	    var _la = 0; // Token type
	    try {
	        this.state = 1144;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.INNER:
	        case SqlBaseParser.JOIN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1130;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.INNER) {
	                this.state = 1129;
	                this.match(SqlBaseParser.INNER);
	            }

	            break;
	        case SqlBaseParser.LEFT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1132;
	            this.match(SqlBaseParser.LEFT);
	            this.state = 1134;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OUTER) {
	                this.state = 1133;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;
	        case SqlBaseParser.RIGHT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1136;
	            this.match(SqlBaseParser.RIGHT);
	            this.state = 1138;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OUTER) {
	                this.state = 1137;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;
	        case SqlBaseParser.FULL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1140;
	            this.match(SqlBaseParser.FULL);
	            this.state = 1142;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OUTER) {
	                this.state = 1141;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinCriteria() {
	    let localctx = new JoinCriteriaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SqlBaseParser.RULE_joinCriteria);
	    var _la = 0; // Token type
	    try {
	        this.state = 1160;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.ON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1146;
	            this.match(SqlBaseParser.ON);
	            this.state = 1147;
	            this.booleanExpression(0);
	            break;
	        case SqlBaseParser.USING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1148;
	            this.match(SqlBaseParser.USING);
	            this.state = 1149;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1150;
	            this.identifier();
	            this.state = 1155;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 1151;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1152;
	                this.identifier();
	                this.state = 1157;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1158;
	            this.match(SqlBaseParser.T__2);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampledRelation() {
	    let localctx = new SampledRelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SqlBaseParser.RULE_sampledRelation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1162;
	        this.aliasedRelation();
	        this.state = 1169;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        if(la_===1) {
	            this.state = 1163;
	            this.match(SqlBaseParser.TABLESAMPLE);
	            this.state = 1164;
	            this.sampleType();
	            this.state = 1165;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1166;
	            localctx.percentage = this.expression();
	            this.state = 1167;
	            this.match(SqlBaseParser.T__2);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampleType() {
	    let localctx = new SampleTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SqlBaseParser.RULE_sampleType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1171;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.BERNOULLI || _la===SqlBaseParser.SYSTEM)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasedRelation() {
	    let localctx = new AliasedRelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SqlBaseParser.RULE_aliasedRelation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1173;
	        this.relationPrimary();
	        this.state = 1181;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        if(la_===1) {
	            this.state = 1175;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.AS) {
	                this.state = 1174;
	                this.match(SqlBaseParser.AS);
	            }

	            this.state = 1177;
	            this.identifier();
	            this.state = 1179;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	            if(la_===1) {
	                this.state = 1178;
	                this.columnAliases();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAliases() {
	    let localctx = new ColumnAliasesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SqlBaseParser.RULE_columnAliases);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1183;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1184;
	        this.identifier();
	        this.state = 1189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__3) {
	            this.state = 1185;
	            this.match(SqlBaseParser.T__3);
	            this.state = 1186;
	            this.identifier();
	            this.state = 1191;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1192;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationPrimary() {
	    let localctx = new RelationPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SqlBaseParser.RULE_relationPrimary);
	    var _la = 0; // Token type
	    try {
	        this.state = 1223;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1194;
	            this.qualifiedName();
	            break;

	        case 2:
	            localctx = new SubqueryRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1195;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1196;
	            this.query();
	            this.state = 1197;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 3:
	            localctx = new UnnestContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1199;
	            this.match(SqlBaseParser.UNNEST);
	            this.state = 1200;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1201;
	            this.expression();
	            this.state = 1206;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 1202;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1203;
	                this.expression();
	                this.state = 1208;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1209;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1212;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	            if(la_===1) {
	                this.state = 1210;
	                this.match(SqlBaseParser.WITH);
	                this.state = 1211;
	                this.match(SqlBaseParser.ORDINALITY);

	            }
	            break;

	        case 4:
	            localctx = new LateralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1214;
	            this.match(SqlBaseParser.LATERAL);
	            this.state = 1215;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1216;
	            this.query();
	            this.state = 1217;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 5:
	            localctx = new ParenthesizedRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1219;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1220;
	            this.relation(0);
	            this.state = 1221;
	            this.match(SqlBaseParser.T__2);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SqlBaseParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1225;
	        this.booleanExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	booleanExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 86;
	    this.enterRecursionRule(localctx, 86, SqlBaseParser.RULE_booleanExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.T__1:
	        case SqlBaseParser.T__4:
	        case SqlBaseParser.ADD:
	        case SqlBaseParser.ADMIN:
	        case SqlBaseParser.ALL:
	        case SqlBaseParser.ANALYZE:
	        case SqlBaseParser.ANY:
	        case SqlBaseParser.ARRAY:
	        case SqlBaseParser.ASC:
	        case SqlBaseParser.AT:
	        case SqlBaseParser.BERNOULLI:
	        case SqlBaseParser.CALL:
	        case SqlBaseParser.CALLED:
	        case SqlBaseParser.CASCADE:
	        case SqlBaseParser.CASE:
	        case SqlBaseParser.CAST:
	        case SqlBaseParser.CATALOGS:
	        case SqlBaseParser.COLUMN:
	        case SqlBaseParser.COLUMNS:
	        case SqlBaseParser.COMMENT:
	        case SqlBaseParser.COMMIT:
	        case SqlBaseParser.COMMITTED:
	        case SqlBaseParser.CURRENT:
	        case SqlBaseParser.CURRENT_DATE:
	        case SqlBaseParser.CURRENT_ROLE:
	        case SqlBaseParser.CURRENT_TIME:
	        case SqlBaseParser.CURRENT_TIMESTAMP:
	        case SqlBaseParser.CURRENT_USER:
	        case SqlBaseParser.DATA:
	        case SqlBaseParser.DATE:
	        case SqlBaseParser.DAY:
	        case SqlBaseParser.DEFINER:
	        case SqlBaseParser.DESC:
	        case SqlBaseParser.DETERMINISTIC:
	        case SqlBaseParser.DISTRIBUTED:
	        case SqlBaseParser.EXCLUDING:
	        case SqlBaseParser.EXISTS:
	        case SqlBaseParser.EXPLAIN:
	        case SqlBaseParser.EXTRACT:
	        case SqlBaseParser.EXTERNAL:
	        case SqlBaseParser.FALSE:
	        case SqlBaseParser.FILTER:
	        case SqlBaseParser.FIRST:
	        case SqlBaseParser.FOLLOWING:
	        case SqlBaseParser.FORMAT:
	        case SqlBaseParser.FUNCTION:
	        case SqlBaseParser.FUNCTIONS:
	        case SqlBaseParser.GRANT:
	        case SqlBaseParser.GRANTED:
	        case SqlBaseParser.GRANTS:
	        case SqlBaseParser.GRAPHVIZ:
	        case SqlBaseParser.GROUPING:
	        case SqlBaseParser.HOUR:
	        case SqlBaseParser.IF:
	        case SqlBaseParser.IGNORE:
	        case SqlBaseParser.INCLUDING:
	        case SqlBaseParser.INPUT:
	        case SqlBaseParser.INTERVAL:
	        case SqlBaseParser.INVOKER:
	        case SqlBaseParser.IO:
	        case SqlBaseParser.ISOLATION:
	        case SqlBaseParser.JSON:
	        case SqlBaseParser.LANGUAGE:
	        case SqlBaseParser.LAST:
	        case SqlBaseParser.LATERAL:
	        case SqlBaseParser.LEVEL:
	        case SqlBaseParser.LIMIT:
	        case SqlBaseParser.LOCALTIME:
	        case SqlBaseParser.LOCALTIMESTAMP:
	        case SqlBaseParser.LOGICAL:
	        case SqlBaseParser.MAP:
	        case SqlBaseParser.MATERIALIZED:
	        case SqlBaseParser.MINUTE:
	        case SqlBaseParser.MONTH:
	        case SqlBaseParser.NAME:
	        case SqlBaseParser.NFC:
	        case SqlBaseParser.NFD:
	        case SqlBaseParser.NFKC:
	        case SqlBaseParser.NFKD:
	        case SqlBaseParser.NO:
	        case SqlBaseParser.NONE:
	        case SqlBaseParser.NORMALIZE:
	        case SqlBaseParser.NULL:
	        case SqlBaseParser.NULLIF:
	        case SqlBaseParser.NULLS:
	        case SqlBaseParser.OFFSET:
	        case SqlBaseParser.ONLY:
	        case SqlBaseParser.OPTION:
	        case SqlBaseParser.ORDINALITY:
	        case SqlBaseParser.OUTPUT:
	        case SqlBaseParser.OVER:
	        case SqlBaseParser.PARTITION:
	        case SqlBaseParser.PARTITIONS:
	        case SqlBaseParser.POSITION:
	        case SqlBaseParser.PRECEDING:
	        case SqlBaseParser.PRIVILEGES:
	        case SqlBaseParser.PROPERTIES:
	        case SqlBaseParser.RANGE:
	        case SqlBaseParser.READ:
	        case SqlBaseParser.REFRESH:
	        case SqlBaseParser.RENAME:
	        case SqlBaseParser.REPEATABLE:
	        case SqlBaseParser.REPLACE:
	        case SqlBaseParser.RESET:
	        case SqlBaseParser.RESPECT:
	        case SqlBaseParser.RESTRICT:
	        case SqlBaseParser.RETURN:
	        case SqlBaseParser.RETURNS:
	        case SqlBaseParser.REVOKE:
	        case SqlBaseParser.ROLE:
	        case SqlBaseParser.ROLES:
	        case SqlBaseParser.ROLLBACK:
	        case SqlBaseParser.ROW:
	        case SqlBaseParser.ROWS:
	        case SqlBaseParser.SCHEMA:
	        case SqlBaseParser.SCHEMAS:
	        case SqlBaseParser.SECOND:
	        case SqlBaseParser.SECURITY:
	        case SqlBaseParser.SERIALIZABLE:
	        case SqlBaseParser.SESSION:
	        case SqlBaseParser.SET:
	        case SqlBaseParser.SETS:
	        case SqlBaseParser.SHOW:
	        case SqlBaseParser.SOME:
	        case SqlBaseParser.SQL:
	        case SqlBaseParser.START:
	        case SqlBaseParser.STATS:
	        case SqlBaseParser.SUBSTRING:
	        case SqlBaseParser.SYSTEM:
	        case SqlBaseParser.TABLES:
	        case SqlBaseParser.TABLESAMPLE:
	        case SqlBaseParser.TEMPORARY:
	        case SqlBaseParser.TEXT:
	        case SqlBaseParser.TIME:
	        case SqlBaseParser.TIMESTAMP:
	        case SqlBaseParser.TO:
	        case SqlBaseParser.TRANSACTION:
	        case SqlBaseParser.TRUE:
	        case SqlBaseParser.TRY_CAST:
	        case SqlBaseParser.TYPE:
	        case SqlBaseParser.UNBOUNDED:
	        case SqlBaseParser.UNCOMMITTED:
	        case SqlBaseParser.USE:
	        case SqlBaseParser.USER:
	        case SqlBaseParser.VALIDATE:
	        case SqlBaseParser.VERBOSE:
	        case SqlBaseParser.VIEW:
	        case SqlBaseParser.WORK:
	        case SqlBaseParser.WRITE:
	        case SqlBaseParser.YEAR:
	        case SqlBaseParser.ZONE:
	        case SqlBaseParser.PLUS:
	        case SqlBaseParser.MINUS:
	        case SqlBaseParser.STRING:
	        case SqlBaseParser.UNICODE_STRING:
	        case SqlBaseParser.BINARY_LITERAL:
	        case SqlBaseParser.INTEGER_VALUE:
	        case SqlBaseParser.DECIMAL_VALUE:
	        case SqlBaseParser.DOUBLE_VALUE:
	        case SqlBaseParser.IDENTIFIER:
	        case SqlBaseParser.DIGIT_IDENTIFIER:
	        case SqlBaseParser.QUOTED_IDENTIFIER:
	        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
	        case SqlBaseParser.DOUBLE_PRECISION:
	            localctx = new PredicatedContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1228;
	            localctx._valueExpression = this.valueExpression(0);
	            this.state = 1230;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	            if(la_===1) {
	                this.state = 1229;
	                this.predicate(localctx._valueExpression);

	            }
	            break;
	        case SqlBaseParser.NOT:
	            localctx = new LogicalNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1232;
	            this.match(SqlBaseParser.NOT);
	            this.state = 1233;
	            this.booleanExpression(3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1244;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1242;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
	                    this.state = 1236;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1237;
	                    localctx.operator = this.match(SqlBaseParser.AND);
	                    this.state = 1238;
	                    localctx.right = this.booleanExpression(3);
	                    break;

	                case 2:
	                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
	                    this.state = 1239;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1240;
	                    localctx.operator = this.match(SqlBaseParser.OR);
	                    this.state = 1241;
	                    localctx.right = this.booleanExpression(2);
	                    break;

	                } 
	            }
	            this.state = 1246;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	predicate(value) {
	    let localctx = new PredicateContext(this, this._ctx, this.state, value);
	    this.enterRule(localctx, 88, SqlBaseParser.RULE_predicate);
	    var _la = 0; // Token type
	    try {
	        this.state = 1308;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ComparisonContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1247;
	            this.comparisonOperator();
	            this.state = 1248;
	            localctx.right = this.valueExpression(0);
	            break;

	        case 2:
	            localctx = new QuantifiedComparisonContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1250;
	            this.comparisonOperator();
	            this.state = 1251;
	            this.comparisonQuantifier();
	            this.state = 1252;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1253;
	            this.query();
	            this.state = 1254;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 3:
	            localctx = new BetweenContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 1256;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1259;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 1260;
	            localctx.lower = this.valueExpression(0);
	            this.state = 1261;
	            this.match(SqlBaseParser.AND);
	            this.state = 1262;
	            localctx.upper = this.valueExpression(0);
	            break;

	        case 4:
	            localctx = new InListContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 1264;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1267;
	            this.match(SqlBaseParser.IN);
	            this.state = 1268;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1269;
	            this.expression();
	            this.state = 1274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 1270;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1271;
	                this.expression();
	                this.state = 1276;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1277;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 5:
	            localctx = new InSubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 1279;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1282;
	            this.match(SqlBaseParser.IN);
	            this.state = 1283;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1284;
	            this.query();
	            this.state = 1285;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 6:
	            localctx = new LikeContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1288;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 1287;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1290;
	            this.match(SqlBaseParser.LIKE);
	            this.state = 1291;
	            localctx.pattern = this.valueExpression(0);
	            this.state = 1294;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	            if(la_===1) {
	                this.state = 1292;
	                this.match(SqlBaseParser.ESCAPE);
	                this.state = 1293;
	                localctx.escape = this.valueExpression(0);

	            }
	            break;

	        case 7:
	            localctx = new NullPredicateContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1296;
	            this.match(SqlBaseParser.IS);
	            this.state = 1298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 1297;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1300;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 8:
	            localctx = new DistinctFromContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1301;
	            this.match(SqlBaseParser.IS);
	            this.state = 1303;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 1302;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 1305;
	            this.match(SqlBaseParser.DISTINCT);
	            this.state = 1306;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1307;
	            localctx.right = this.valueExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 90;
	    this.enterRecursionRule(localctx, 90, SqlBaseParser.RULE_valueExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1314;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.T__1:
	        case SqlBaseParser.T__4:
	        case SqlBaseParser.ADD:
	        case SqlBaseParser.ADMIN:
	        case SqlBaseParser.ALL:
	        case SqlBaseParser.ANALYZE:
	        case SqlBaseParser.ANY:
	        case SqlBaseParser.ARRAY:
	        case SqlBaseParser.ASC:
	        case SqlBaseParser.AT:
	        case SqlBaseParser.BERNOULLI:
	        case SqlBaseParser.CALL:
	        case SqlBaseParser.CALLED:
	        case SqlBaseParser.CASCADE:
	        case SqlBaseParser.CASE:
	        case SqlBaseParser.CAST:
	        case SqlBaseParser.CATALOGS:
	        case SqlBaseParser.COLUMN:
	        case SqlBaseParser.COLUMNS:
	        case SqlBaseParser.COMMENT:
	        case SqlBaseParser.COMMIT:
	        case SqlBaseParser.COMMITTED:
	        case SqlBaseParser.CURRENT:
	        case SqlBaseParser.CURRENT_DATE:
	        case SqlBaseParser.CURRENT_ROLE:
	        case SqlBaseParser.CURRENT_TIME:
	        case SqlBaseParser.CURRENT_TIMESTAMP:
	        case SqlBaseParser.CURRENT_USER:
	        case SqlBaseParser.DATA:
	        case SqlBaseParser.DATE:
	        case SqlBaseParser.DAY:
	        case SqlBaseParser.DEFINER:
	        case SqlBaseParser.DESC:
	        case SqlBaseParser.DETERMINISTIC:
	        case SqlBaseParser.DISTRIBUTED:
	        case SqlBaseParser.EXCLUDING:
	        case SqlBaseParser.EXISTS:
	        case SqlBaseParser.EXPLAIN:
	        case SqlBaseParser.EXTRACT:
	        case SqlBaseParser.EXTERNAL:
	        case SqlBaseParser.FALSE:
	        case SqlBaseParser.FILTER:
	        case SqlBaseParser.FIRST:
	        case SqlBaseParser.FOLLOWING:
	        case SqlBaseParser.FORMAT:
	        case SqlBaseParser.FUNCTION:
	        case SqlBaseParser.FUNCTIONS:
	        case SqlBaseParser.GRANT:
	        case SqlBaseParser.GRANTED:
	        case SqlBaseParser.GRANTS:
	        case SqlBaseParser.GRAPHVIZ:
	        case SqlBaseParser.GROUPING:
	        case SqlBaseParser.HOUR:
	        case SqlBaseParser.IF:
	        case SqlBaseParser.IGNORE:
	        case SqlBaseParser.INCLUDING:
	        case SqlBaseParser.INPUT:
	        case SqlBaseParser.INTERVAL:
	        case SqlBaseParser.INVOKER:
	        case SqlBaseParser.IO:
	        case SqlBaseParser.ISOLATION:
	        case SqlBaseParser.JSON:
	        case SqlBaseParser.LANGUAGE:
	        case SqlBaseParser.LAST:
	        case SqlBaseParser.LATERAL:
	        case SqlBaseParser.LEVEL:
	        case SqlBaseParser.LIMIT:
	        case SqlBaseParser.LOCALTIME:
	        case SqlBaseParser.LOCALTIMESTAMP:
	        case SqlBaseParser.LOGICAL:
	        case SqlBaseParser.MAP:
	        case SqlBaseParser.MATERIALIZED:
	        case SqlBaseParser.MINUTE:
	        case SqlBaseParser.MONTH:
	        case SqlBaseParser.NAME:
	        case SqlBaseParser.NFC:
	        case SqlBaseParser.NFD:
	        case SqlBaseParser.NFKC:
	        case SqlBaseParser.NFKD:
	        case SqlBaseParser.NO:
	        case SqlBaseParser.NONE:
	        case SqlBaseParser.NORMALIZE:
	        case SqlBaseParser.NULL:
	        case SqlBaseParser.NULLIF:
	        case SqlBaseParser.NULLS:
	        case SqlBaseParser.OFFSET:
	        case SqlBaseParser.ONLY:
	        case SqlBaseParser.OPTION:
	        case SqlBaseParser.ORDINALITY:
	        case SqlBaseParser.OUTPUT:
	        case SqlBaseParser.OVER:
	        case SqlBaseParser.PARTITION:
	        case SqlBaseParser.PARTITIONS:
	        case SqlBaseParser.POSITION:
	        case SqlBaseParser.PRECEDING:
	        case SqlBaseParser.PRIVILEGES:
	        case SqlBaseParser.PROPERTIES:
	        case SqlBaseParser.RANGE:
	        case SqlBaseParser.READ:
	        case SqlBaseParser.REFRESH:
	        case SqlBaseParser.RENAME:
	        case SqlBaseParser.REPEATABLE:
	        case SqlBaseParser.REPLACE:
	        case SqlBaseParser.RESET:
	        case SqlBaseParser.RESPECT:
	        case SqlBaseParser.RESTRICT:
	        case SqlBaseParser.RETURN:
	        case SqlBaseParser.RETURNS:
	        case SqlBaseParser.REVOKE:
	        case SqlBaseParser.ROLE:
	        case SqlBaseParser.ROLES:
	        case SqlBaseParser.ROLLBACK:
	        case SqlBaseParser.ROW:
	        case SqlBaseParser.ROWS:
	        case SqlBaseParser.SCHEMA:
	        case SqlBaseParser.SCHEMAS:
	        case SqlBaseParser.SECOND:
	        case SqlBaseParser.SECURITY:
	        case SqlBaseParser.SERIALIZABLE:
	        case SqlBaseParser.SESSION:
	        case SqlBaseParser.SET:
	        case SqlBaseParser.SETS:
	        case SqlBaseParser.SHOW:
	        case SqlBaseParser.SOME:
	        case SqlBaseParser.SQL:
	        case SqlBaseParser.START:
	        case SqlBaseParser.STATS:
	        case SqlBaseParser.SUBSTRING:
	        case SqlBaseParser.SYSTEM:
	        case SqlBaseParser.TABLES:
	        case SqlBaseParser.TABLESAMPLE:
	        case SqlBaseParser.TEMPORARY:
	        case SqlBaseParser.TEXT:
	        case SqlBaseParser.TIME:
	        case SqlBaseParser.TIMESTAMP:
	        case SqlBaseParser.TO:
	        case SqlBaseParser.TRANSACTION:
	        case SqlBaseParser.TRUE:
	        case SqlBaseParser.TRY_CAST:
	        case SqlBaseParser.TYPE:
	        case SqlBaseParser.UNBOUNDED:
	        case SqlBaseParser.UNCOMMITTED:
	        case SqlBaseParser.USE:
	        case SqlBaseParser.USER:
	        case SqlBaseParser.VALIDATE:
	        case SqlBaseParser.VERBOSE:
	        case SqlBaseParser.VIEW:
	        case SqlBaseParser.WORK:
	        case SqlBaseParser.WRITE:
	        case SqlBaseParser.YEAR:
	        case SqlBaseParser.ZONE:
	        case SqlBaseParser.STRING:
	        case SqlBaseParser.UNICODE_STRING:
	        case SqlBaseParser.BINARY_LITERAL:
	        case SqlBaseParser.INTEGER_VALUE:
	        case SqlBaseParser.DECIMAL_VALUE:
	        case SqlBaseParser.DOUBLE_VALUE:
	        case SqlBaseParser.IDENTIFIER:
	        case SqlBaseParser.DIGIT_IDENTIFIER:
	        case SqlBaseParser.QUOTED_IDENTIFIER:
	        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
	        case SqlBaseParser.DOUBLE_PRECISION:
	            localctx = new ValueExpressionDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1311;
	            this.primaryExpression(0);
	            break;
	        case SqlBaseParser.PLUS:
	        case SqlBaseParser.MINUS:
	            localctx = new ArithmeticUnaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1312;
	            localctx.operator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
	                localctx.operator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1313;
	            this.valueExpression(4);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1330;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,173,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1328;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1316;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1317;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (SqlBaseParser.ASTERISK - 221)) | (1 << (SqlBaseParser.SLASH - 221)) | (1 << (SqlBaseParser.PERCENT - 221)))) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1318;
	                    localctx.right = this.valueExpression(4);
	                    break;

	                case 2:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1319;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1320;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1321;
	                    localctx.right = this.valueExpression(3);
	                    break;

	                case 3:
	                    localctx = new ConcatenationContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1322;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1323;
	                    this.match(SqlBaseParser.CONCAT);
	                    this.state = 1324;
	                    localctx.right = this.valueExpression(2);
	                    break;

	                case 4:
	                    localctx = new AtTimeZoneContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 1325;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1326;
	                    this.match(SqlBaseParser.AT);
	                    this.state = 1327;
	                    this.timeZoneSpecifier();
	                    break;

	                } 
	            }
	            this.state = 1332;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,173,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	primaryExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 92;
	    this.enterRecursionRule(localctx, 92, SqlBaseParser.RULE_primaryExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NullLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1334;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 2:
	            localctx = new IntervalLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1335;
	            this.interval();
	            break;

	        case 3:
	            localctx = new TypeConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1336;
	            this.identifier();
	            this.state = 1337;
	            this.string();
	            break;

	        case 4:
	            localctx = new TypeConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1339;
	            this.match(SqlBaseParser.DOUBLE_PRECISION);
	            this.state = 1340;
	            this.string();
	            break;

	        case 5:
	            localctx = new NumericLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1341;
	            this.number();
	            break;

	        case 6:
	            localctx = new BooleanLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1342;
	            this.booleanValue();
	            break;

	        case 7:
	            localctx = new StringLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1343;
	            this.string();
	            break;

	        case 8:
	            localctx = new BinaryLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1344;
	            this.match(SqlBaseParser.BINARY_LITERAL);
	            break;

	        case 9:
	            localctx = new ParameterContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1345;
	            this.match(SqlBaseParser.T__4);
	            break;

	        case 10:
	            localctx = new PositionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1346;
	            this.match(SqlBaseParser.POSITION);
	            this.state = 1347;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1348;
	            this.valueExpression(0);
	            this.state = 1349;
	            this.match(SqlBaseParser.IN);
	            this.state = 1350;
	            this.valueExpression(0);
	            this.state = 1351;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 11:
	            localctx = new RowConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1353;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1354;
	            this.expression();
	            this.state = 1357; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1355;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1356;
	                this.expression();
	                this.state = 1359; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SqlBaseParser.T__3);
	            this.state = 1361;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 12:
	            localctx = new RowConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1363;
	            this.match(SqlBaseParser.ROW);
	            this.state = 1364;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1365;
	            this.expression();
	            this.state = 1370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 1366;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1367;
	                this.expression();
	                this.state = 1372;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1373;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 13:
	            localctx = new FunctionCallContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1375;
	            this.qualifiedName();
	            this.state = 1376;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1377;
	            this.match(SqlBaseParser.ASTERISK);
	            this.state = 1378;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1380;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	            if(la_===1) {
	                this.state = 1379;
	                this.filter();

	            }
	            this.state = 1383;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	            if(la_===1) {
	                this.state = 1382;
	                this.over();

	            }
	            break;

	        case 14:
	            localctx = new FunctionCallContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1385;
	            this.qualifiedName();
	            this.state = 1386;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1398;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CALLED) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMENT - 32)) | (1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DEFINER - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DETERMINISTIC - 32)) | (1 << (SqlBaseParser.DISTINCT - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTION - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.IO - 96)) | (1 << (SqlBaseParser.ISOLATION - 96)) | (1 << (SqlBaseParser.JSON - 96)) | (1 << (SqlBaseParser.LANGUAGE - 96)) | (1 << (SqlBaseParser.LAST - 96)) | (1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MATERIALIZED - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NAME - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.RETURN - 128)) | (1 << (SqlBaseParser.RETURNS - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.ROLES - 160)) | (1 << (SqlBaseParser.ROLLBACK - 160)) | (1 << (SqlBaseParser.ROW - 160)) | (1 << (SqlBaseParser.ROWS - 160)) | (1 << (SqlBaseParser.SCHEMA - 160)) | (1 << (SqlBaseParser.SCHEMAS - 160)) | (1 << (SqlBaseParser.SECOND - 160)) | (1 << (SqlBaseParser.SECURITY - 160)) | (1 << (SqlBaseParser.SERIALIZABLE - 160)) | (1 << (SqlBaseParser.SESSION - 160)) | (1 << (SqlBaseParser.SET - 160)) | (1 << (SqlBaseParser.SETS - 160)) | (1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.SQL - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (SqlBaseParser.STRING - 225)) | (1 << (SqlBaseParser.UNICODE_STRING - 225)) | (1 << (SqlBaseParser.BINARY_LITERAL - 225)) | (1 << (SqlBaseParser.INTEGER_VALUE - 225)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 225)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 225)) | (1 << (SqlBaseParser.IDENTIFIER - 225)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 225)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 225)))) !== 0)) {
	                this.state = 1388;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	                if(la_===1) {
	                    this.state = 1387;
	                    this.setQuantifier();

	                }
	                this.state = 1390;
	                this.expression();
	                this.state = 1395;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 1391;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1392;
	                    this.expression();
	                    this.state = 1397;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ORDER) {
	                this.state = 1400;
	                this.match(SqlBaseParser.ORDER);
	                this.state = 1401;
	                this.match(SqlBaseParser.BY);
	                this.state = 1402;
	                this.sortItem();
	                this.state = 1407;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 1403;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1404;
	                    this.sortItem();
	                    this.state = 1409;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1412;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1414;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	            if(la_===1) {
	                this.state = 1413;
	                this.filter();

	            }
	            this.state = 1420;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	            if(la_===1) {
	                this.state = 1417;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.IGNORE || _la===SqlBaseParser.RESPECT) {
	                    this.state = 1416;
	                    this.nullTreatment();
	                }

	                this.state = 1419;
	                this.over();

	            }
	            break;

	        case 15:
	            localctx = new LambdaContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1422;
	            this.identifier();
	            this.state = 1423;
	            this.match(SqlBaseParser.T__5);
	            this.state = 1424;
	            this.expression();
	            break;

	        case 16:
	            localctx = new LambdaContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1426;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1435;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (SqlBaseParser.ADD - 10)) | (1 << (SqlBaseParser.ADMIN - 10)) | (1 << (SqlBaseParser.ALL - 10)) | (1 << (SqlBaseParser.ANALYZE - 10)) | (1 << (SqlBaseParser.ANY - 10)) | (1 << (SqlBaseParser.ARRAY - 10)) | (1 << (SqlBaseParser.ASC - 10)) | (1 << (SqlBaseParser.AT - 10)) | (1 << (SqlBaseParser.BERNOULLI - 10)) | (1 << (SqlBaseParser.CALL - 10)) | (1 << (SqlBaseParser.CALLED - 10)) | (1 << (SqlBaseParser.CASCADE - 10)) | (1 << (SqlBaseParser.CATALOGS - 10)) | (1 << (SqlBaseParser.COLUMN - 10)) | (1 << (SqlBaseParser.COLUMNS - 10)) | (1 << (SqlBaseParser.COMMENT - 10)) | (1 << (SqlBaseParser.COMMIT - 10)) | (1 << (SqlBaseParser.COMMITTED - 10)) | (1 << (SqlBaseParser.CURRENT - 10)) | (1 << (SqlBaseParser.CURRENT_ROLE - 10)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (SqlBaseParser.DATA - 45)) | (1 << (SqlBaseParser.DATE - 45)) | (1 << (SqlBaseParser.DAY - 45)) | (1 << (SqlBaseParser.DEFINER - 45)) | (1 << (SqlBaseParser.DESC - 45)) | (1 << (SqlBaseParser.DETERMINISTIC - 45)) | (1 << (SqlBaseParser.DISTRIBUTED - 45)) | (1 << (SqlBaseParser.EXCLUDING - 45)) | (1 << (SqlBaseParser.EXPLAIN - 45)) | (1 << (SqlBaseParser.EXTERNAL - 45)) | (1 << (SqlBaseParser.FILTER - 45)) | (1 << (SqlBaseParser.FIRST - 45)) | (1 << (SqlBaseParser.FOLLOWING - 45)) | (1 << (SqlBaseParser.FORMAT - 45)) | (1 << (SqlBaseParser.FUNCTION - 45)) | (1 << (SqlBaseParser.FUNCTIONS - 45)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SqlBaseParser.GRANT - 77)) | (1 << (SqlBaseParser.GRANTED - 77)) | (1 << (SqlBaseParser.GRANTS - 77)) | (1 << (SqlBaseParser.GRAPHVIZ - 77)) | (1 << (SqlBaseParser.HOUR - 77)) | (1 << (SqlBaseParser.IF - 77)) | (1 << (SqlBaseParser.IGNORE - 77)) | (1 << (SqlBaseParser.INCLUDING - 77)) | (1 << (SqlBaseParser.INPUT - 77)) | (1 << (SqlBaseParser.INTERVAL - 77)) | (1 << (SqlBaseParser.INVOKER - 77)) | (1 << (SqlBaseParser.IO - 77)) | (1 << (SqlBaseParser.ISOLATION - 77)) | (1 << (SqlBaseParser.JSON - 77)) | (1 << (SqlBaseParser.LANGUAGE - 77)) | (1 << (SqlBaseParser.LAST - 77)) | (1 << (SqlBaseParser.LATERAL - 77)) | (1 << (SqlBaseParser.LEVEL - 77)) | (1 << (SqlBaseParser.LIMIT - 77)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (SqlBaseParser.LOGICAL - 110)) | (1 << (SqlBaseParser.MAP - 110)) | (1 << (SqlBaseParser.MATERIALIZED - 110)) | (1 << (SqlBaseParser.MINUTE - 110)) | (1 << (SqlBaseParser.MONTH - 110)) | (1 << (SqlBaseParser.NAME - 110)) | (1 << (SqlBaseParser.NFC - 110)) | (1 << (SqlBaseParser.NFD - 110)) | (1 << (SqlBaseParser.NFKC - 110)) | (1 << (SqlBaseParser.NFKD - 110)) | (1 << (SqlBaseParser.NO - 110)) | (1 << (SqlBaseParser.NONE - 110)) | (1 << (SqlBaseParser.NULLIF - 110)) | (1 << (SqlBaseParser.NULLS - 110)) | (1 << (SqlBaseParser.OFFSET - 110)) | (1 << (SqlBaseParser.ONLY - 110)) | (1 << (SqlBaseParser.OPTION - 110)) | (1 << (SqlBaseParser.ORDINALITY - 110)) | (1 << (SqlBaseParser.OUTPUT - 110)) | (1 << (SqlBaseParser.OVER - 110)) | (1 << (SqlBaseParser.PARTITION - 110)) | (1 << (SqlBaseParser.PARTITIONS - 110)) | (1 << (SqlBaseParser.POSITION - 110)) | (1 << (SqlBaseParser.PRECEDING - 110)))) !== 0) || ((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (SqlBaseParser.PRIVILEGES - 143)) | (1 << (SqlBaseParser.PROPERTIES - 143)) | (1 << (SqlBaseParser.RANGE - 143)) | (1 << (SqlBaseParser.READ - 143)) | (1 << (SqlBaseParser.REFRESH - 143)) | (1 << (SqlBaseParser.RENAME - 143)) | (1 << (SqlBaseParser.REPEATABLE - 143)) | (1 << (SqlBaseParser.REPLACE - 143)) | (1 << (SqlBaseParser.RESET - 143)) | (1 << (SqlBaseParser.RESPECT - 143)) | (1 << (SqlBaseParser.RESTRICT - 143)) | (1 << (SqlBaseParser.RETURN - 143)) | (1 << (SqlBaseParser.RETURNS - 143)) | (1 << (SqlBaseParser.REVOKE - 143)) | (1 << (SqlBaseParser.ROLE - 143)) | (1 << (SqlBaseParser.ROLES - 143)) | (1 << (SqlBaseParser.ROLLBACK - 143)) | (1 << (SqlBaseParser.ROW - 143)) | (1 << (SqlBaseParser.ROWS - 143)) | (1 << (SqlBaseParser.SCHEMA - 143)) | (1 << (SqlBaseParser.SCHEMAS - 143)) | (1 << (SqlBaseParser.SECOND - 143)) | (1 << (SqlBaseParser.SECURITY - 143)) | (1 << (SqlBaseParser.SERIALIZABLE - 143)) | (1 << (SqlBaseParser.SESSION - 143)) | (1 << (SqlBaseParser.SET - 143)) | (1 << (SqlBaseParser.SETS - 143)) | (1 << (SqlBaseParser.SHOW - 143)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (SqlBaseParser.SOME - 175)) | (1 << (SqlBaseParser.SQL - 175)) | (1 << (SqlBaseParser.START - 175)) | (1 << (SqlBaseParser.STATS - 175)) | (1 << (SqlBaseParser.SUBSTRING - 175)) | (1 << (SqlBaseParser.SYSTEM - 175)) | (1 << (SqlBaseParser.TABLES - 175)) | (1 << (SqlBaseParser.TABLESAMPLE - 175)) | (1 << (SqlBaseParser.TEMPORARY - 175)) | (1 << (SqlBaseParser.TEXT - 175)) | (1 << (SqlBaseParser.TIME - 175)) | (1 << (SqlBaseParser.TIMESTAMP - 175)) | (1 << (SqlBaseParser.TO - 175)) | (1 << (SqlBaseParser.TRANSACTION - 175)) | (1 << (SqlBaseParser.TRY_CAST - 175)) | (1 << (SqlBaseParser.TYPE - 175)) | (1 << (SqlBaseParser.UNBOUNDED - 175)) | (1 << (SqlBaseParser.UNCOMMITTED - 175)) | (1 << (SqlBaseParser.USE - 175)) | (1 << (SqlBaseParser.USER - 175)) | (1 << (SqlBaseParser.VALIDATE - 175)) | (1 << (SqlBaseParser.VERBOSE - 175)) | (1 << (SqlBaseParser.VIEW - 175)))) !== 0) || ((((_la - 209)) & ~0x1f) == 0 && ((1 << (_la - 209)) & ((1 << (SqlBaseParser.WORK - 209)) | (1 << (SqlBaseParser.WRITE - 209)) | (1 << (SqlBaseParser.YEAR - 209)) | (1 << (SqlBaseParser.ZONE - 209)) | (1 << (SqlBaseParser.IDENTIFIER - 209)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 209)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 209)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 209)))) !== 0)) {
	                this.state = 1427;
	                this.identifier();
	                this.state = 1432;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 1428;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1429;
	                    this.identifier();
	                    this.state = 1434;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1437;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1438;
	            this.match(SqlBaseParser.T__5);
	            this.state = 1439;
	            this.expression();
	            break;

	        case 17:
	            localctx = new SubqueryExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1440;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1441;
	            this.query();
	            this.state = 1442;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 18:
	            localctx = new ExistsContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1444;
	            this.match(SqlBaseParser.EXISTS);
	            this.state = 1445;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1446;
	            this.query();
	            this.state = 1447;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 19:
	            localctx = new SimpleCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1449;
	            this.match(SqlBaseParser.CASE);
	            this.state = 1450;
	            this.valueExpression(0);
	            this.state = 1452; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1451;
	                this.whenClause();
	                this.state = 1454; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SqlBaseParser.WHEN);
	            this.state = 1458;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ELSE) {
	                this.state = 1456;
	                this.match(SqlBaseParser.ELSE);
	                this.state = 1457;
	                localctx.elseExpression = this.expression();
	            }

	            this.state = 1460;
	            this.match(SqlBaseParser.END);
	            break;

	        case 20:
	            localctx = new SearchedCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1462;
	            this.match(SqlBaseParser.CASE);
	            this.state = 1464; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1463;
	                this.whenClause();
	                this.state = 1466; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SqlBaseParser.WHEN);
	            this.state = 1470;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ELSE) {
	                this.state = 1468;
	                this.match(SqlBaseParser.ELSE);
	                this.state = 1469;
	                localctx.elseExpression = this.expression();
	            }

	            this.state = 1472;
	            this.match(SqlBaseParser.END);
	            break;

	        case 21:
	            localctx = new CastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1474;
	            this.match(SqlBaseParser.CAST);
	            this.state = 1475;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1476;
	            this.expression();
	            this.state = 1477;
	            this.match(SqlBaseParser.AS);
	            this.state = 1478;
	            this.type(0);
	            this.state = 1479;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 22:
	            localctx = new CastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1481;
	            this.match(SqlBaseParser.TRY_CAST);
	            this.state = 1482;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1483;
	            this.expression();
	            this.state = 1484;
	            this.match(SqlBaseParser.AS);
	            this.state = 1485;
	            this.type(0);
	            this.state = 1486;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 23:
	            localctx = new ArrayConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1488;
	            this.match(SqlBaseParser.ARRAY);
	            this.state = 1489;
	            this.match(SqlBaseParser.T__6);
	            this.state = 1498;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.T__1) | (1 << SqlBaseParser.T__4) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CALLED) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.CAST) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMENT - 32)) | (1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DEFINER - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DETERMINISTIC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)) | (1 << (SqlBaseParser.EXISTS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTION - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.GROUPING - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.IO - 96)) | (1 << (SqlBaseParser.ISOLATION - 96)) | (1 << (SqlBaseParser.JSON - 96)) | (1 << (SqlBaseParser.LANGUAGE - 96)) | (1 << (SqlBaseParser.LAST - 96)) | (1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOCALTIME - 96)) | (1 << (SqlBaseParser.LOCALTIMESTAMP - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MATERIALIZED - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NAME - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NORMALIZE - 96)) | (1 << (SqlBaseParser.NOT - 96)) | (1 << (SqlBaseParser.NULL - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.RETURN - 128)) | (1 << (SqlBaseParser.RETURNS - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.ROLES - 160)) | (1 << (SqlBaseParser.ROLLBACK - 160)) | (1 << (SqlBaseParser.ROW - 160)) | (1 << (SqlBaseParser.ROWS - 160)) | (1 << (SqlBaseParser.SCHEMA - 160)) | (1 << (SqlBaseParser.SCHEMAS - 160)) | (1 << (SqlBaseParser.SECOND - 160)) | (1 << (SqlBaseParser.SECURITY - 160)) | (1 << (SqlBaseParser.SERIALIZABLE - 160)) | (1 << (SqlBaseParser.SESSION - 160)) | (1 << (SqlBaseParser.SET - 160)) | (1 << (SqlBaseParser.SETS - 160)) | (1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.SQL - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)) | (1 << (SqlBaseParser.TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)) | (1 << (SqlBaseParser.PLUS - 192)) | (1 << (SqlBaseParser.MINUS - 192)))) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & ((1 << (SqlBaseParser.STRING - 225)) | (1 << (SqlBaseParser.UNICODE_STRING - 225)) | (1 << (SqlBaseParser.BINARY_LITERAL - 225)) | (1 << (SqlBaseParser.INTEGER_VALUE - 225)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 225)) | (1 << (SqlBaseParser.DOUBLE_VALUE - 225)) | (1 << (SqlBaseParser.IDENTIFIER - 225)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 225)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 225)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 225)))) !== 0)) {
	                this.state = 1490;
	                this.expression();
	                this.state = 1495;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 1491;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1492;
	                    this.expression();
	                    this.state = 1497;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1500;
	            this.match(SqlBaseParser.T__7);
	            break;

	        case 24:
	            localctx = new ColumnReferenceContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1501;
	            this.identifier();
	            break;

	        case 25:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1502;
	            localctx.name = this.match(SqlBaseParser.CURRENT_DATE);
	            break;

	        case 26:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1503;
	            localctx.name = this.match(SqlBaseParser.CURRENT_TIME);
	            this.state = 1507;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	            if(la_===1) {
	                this.state = 1504;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1505;
	                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 1506;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 27:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1509;
	            localctx.name = this.match(SqlBaseParser.CURRENT_TIMESTAMP);
	            this.state = 1513;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	            if(la_===1) {
	                this.state = 1510;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1511;
	                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 1512;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 28:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1515;
	            localctx.name = this.match(SqlBaseParser.LOCALTIME);
	            this.state = 1519;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	            if(la_===1) {
	                this.state = 1516;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1517;
	                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 1518;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 29:
	            localctx = new SpecialDateTimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1521;
	            localctx.name = this.match(SqlBaseParser.LOCALTIMESTAMP);
	            this.state = 1525;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	            if(la_===1) {
	                this.state = 1522;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1523;
	                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 1524;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 30:
	            localctx = new CurrentUserContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1527;
	            localctx.name = this.match(SqlBaseParser.CURRENT_USER);
	            break;

	        case 31:
	            localctx = new SubstringContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1528;
	            this.match(SqlBaseParser.SUBSTRING);
	            this.state = 1529;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1530;
	            this.valueExpression(0);
	            this.state = 1531;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1532;
	            this.valueExpression(0);
	            this.state = 1535;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FOR) {
	                this.state = 1533;
	                this.match(SqlBaseParser.FOR);
	                this.state = 1534;
	                this.valueExpression(0);
	            }

	            this.state = 1537;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 32:
	            localctx = new NormalizeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1539;
	            this.match(SqlBaseParser.NORMALIZE);
	            this.state = 1540;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1541;
	            this.valueExpression(0);
	            this.state = 1544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__3) {
	                this.state = 1542;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1543;
	                this.normalForm();
	            }

	            this.state = 1546;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 33:
	            localctx = new ExtractContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1548;
	            this.match(SqlBaseParser.EXTRACT);
	            this.state = 1549;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1550;
	            this.identifier();
	            this.state = 1551;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1552;
	            this.valueExpression(0);
	            this.state = 1553;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 34:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1555;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1556;
	            this.expression();
	            this.state = 1557;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 35:
	            localctx = new GroupingOperationContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1559;
	            this.match(SqlBaseParser.GROUPING);
	            this.state = 1560;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (SqlBaseParser.ADD - 10)) | (1 << (SqlBaseParser.ADMIN - 10)) | (1 << (SqlBaseParser.ALL - 10)) | (1 << (SqlBaseParser.ANALYZE - 10)) | (1 << (SqlBaseParser.ANY - 10)) | (1 << (SqlBaseParser.ARRAY - 10)) | (1 << (SqlBaseParser.ASC - 10)) | (1 << (SqlBaseParser.AT - 10)) | (1 << (SqlBaseParser.BERNOULLI - 10)) | (1 << (SqlBaseParser.CALL - 10)) | (1 << (SqlBaseParser.CALLED - 10)) | (1 << (SqlBaseParser.CASCADE - 10)) | (1 << (SqlBaseParser.CATALOGS - 10)) | (1 << (SqlBaseParser.COLUMN - 10)) | (1 << (SqlBaseParser.COLUMNS - 10)) | (1 << (SqlBaseParser.COMMENT - 10)) | (1 << (SqlBaseParser.COMMIT - 10)) | (1 << (SqlBaseParser.COMMITTED - 10)) | (1 << (SqlBaseParser.CURRENT - 10)) | (1 << (SqlBaseParser.CURRENT_ROLE - 10)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (SqlBaseParser.DATA - 45)) | (1 << (SqlBaseParser.DATE - 45)) | (1 << (SqlBaseParser.DAY - 45)) | (1 << (SqlBaseParser.DEFINER - 45)) | (1 << (SqlBaseParser.DESC - 45)) | (1 << (SqlBaseParser.DETERMINISTIC - 45)) | (1 << (SqlBaseParser.DISTRIBUTED - 45)) | (1 << (SqlBaseParser.EXCLUDING - 45)) | (1 << (SqlBaseParser.EXPLAIN - 45)) | (1 << (SqlBaseParser.EXTERNAL - 45)) | (1 << (SqlBaseParser.FILTER - 45)) | (1 << (SqlBaseParser.FIRST - 45)) | (1 << (SqlBaseParser.FOLLOWING - 45)) | (1 << (SqlBaseParser.FORMAT - 45)) | (1 << (SqlBaseParser.FUNCTION - 45)) | (1 << (SqlBaseParser.FUNCTIONS - 45)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SqlBaseParser.GRANT - 77)) | (1 << (SqlBaseParser.GRANTED - 77)) | (1 << (SqlBaseParser.GRANTS - 77)) | (1 << (SqlBaseParser.GRAPHVIZ - 77)) | (1 << (SqlBaseParser.HOUR - 77)) | (1 << (SqlBaseParser.IF - 77)) | (1 << (SqlBaseParser.IGNORE - 77)) | (1 << (SqlBaseParser.INCLUDING - 77)) | (1 << (SqlBaseParser.INPUT - 77)) | (1 << (SqlBaseParser.INTERVAL - 77)) | (1 << (SqlBaseParser.INVOKER - 77)) | (1 << (SqlBaseParser.IO - 77)) | (1 << (SqlBaseParser.ISOLATION - 77)) | (1 << (SqlBaseParser.JSON - 77)) | (1 << (SqlBaseParser.LANGUAGE - 77)) | (1 << (SqlBaseParser.LAST - 77)) | (1 << (SqlBaseParser.LATERAL - 77)) | (1 << (SqlBaseParser.LEVEL - 77)) | (1 << (SqlBaseParser.LIMIT - 77)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (SqlBaseParser.LOGICAL - 110)) | (1 << (SqlBaseParser.MAP - 110)) | (1 << (SqlBaseParser.MATERIALIZED - 110)) | (1 << (SqlBaseParser.MINUTE - 110)) | (1 << (SqlBaseParser.MONTH - 110)) | (1 << (SqlBaseParser.NAME - 110)) | (1 << (SqlBaseParser.NFC - 110)) | (1 << (SqlBaseParser.NFD - 110)) | (1 << (SqlBaseParser.NFKC - 110)) | (1 << (SqlBaseParser.NFKD - 110)) | (1 << (SqlBaseParser.NO - 110)) | (1 << (SqlBaseParser.NONE - 110)) | (1 << (SqlBaseParser.NULLIF - 110)) | (1 << (SqlBaseParser.NULLS - 110)) | (1 << (SqlBaseParser.OFFSET - 110)) | (1 << (SqlBaseParser.ONLY - 110)) | (1 << (SqlBaseParser.OPTION - 110)) | (1 << (SqlBaseParser.ORDINALITY - 110)) | (1 << (SqlBaseParser.OUTPUT - 110)) | (1 << (SqlBaseParser.OVER - 110)) | (1 << (SqlBaseParser.PARTITION - 110)) | (1 << (SqlBaseParser.PARTITIONS - 110)) | (1 << (SqlBaseParser.POSITION - 110)) | (1 << (SqlBaseParser.PRECEDING - 110)))) !== 0) || ((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (SqlBaseParser.PRIVILEGES - 143)) | (1 << (SqlBaseParser.PROPERTIES - 143)) | (1 << (SqlBaseParser.RANGE - 143)) | (1 << (SqlBaseParser.READ - 143)) | (1 << (SqlBaseParser.REFRESH - 143)) | (1 << (SqlBaseParser.RENAME - 143)) | (1 << (SqlBaseParser.REPEATABLE - 143)) | (1 << (SqlBaseParser.REPLACE - 143)) | (1 << (SqlBaseParser.RESET - 143)) | (1 << (SqlBaseParser.RESPECT - 143)) | (1 << (SqlBaseParser.RESTRICT - 143)) | (1 << (SqlBaseParser.RETURN - 143)) | (1 << (SqlBaseParser.RETURNS - 143)) | (1 << (SqlBaseParser.REVOKE - 143)) | (1 << (SqlBaseParser.ROLE - 143)) | (1 << (SqlBaseParser.ROLES - 143)) | (1 << (SqlBaseParser.ROLLBACK - 143)) | (1 << (SqlBaseParser.ROW - 143)) | (1 << (SqlBaseParser.ROWS - 143)) | (1 << (SqlBaseParser.SCHEMA - 143)) | (1 << (SqlBaseParser.SCHEMAS - 143)) | (1 << (SqlBaseParser.SECOND - 143)) | (1 << (SqlBaseParser.SECURITY - 143)) | (1 << (SqlBaseParser.SERIALIZABLE - 143)) | (1 << (SqlBaseParser.SESSION - 143)) | (1 << (SqlBaseParser.SET - 143)) | (1 << (SqlBaseParser.SETS - 143)) | (1 << (SqlBaseParser.SHOW - 143)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (SqlBaseParser.SOME - 175)) | (1 << (SqlBaseParser.SQL - 175)) | (1 << (SqlBaseParser.START - 175)) | (1 << (SqlBaseParser.STATS - 175)) | (1 << (SqlBaseParser.SUBSTRING - 175)) | (1 << (SqlBaseParser.SYSTEM - 175)) | (1 << (SqlBaseParser.TABLES - 175)) | (1 << (SqlBaseParser.TABLESAMPLE - 175)) | (1 << (SqlBaseParser.TEMPORARY - 175)) | (1 << (SqlBaseParser.TEXT - 175)) | (1 << (SqlBaseParser.TIME - 175)) | (1 << (SqlBaseParser.TIMESTAMP - 175)) | (1 << (SqlBaseParser.TO - 175)) | (1 << (SqlBaseParser.TRANSACTION - 175)) | (1 << (SqlBaseParser.TRY_CAST - 175)) | (1 << (SqlBaseParser.TYPE - 175)) | (1 << (SqlBaseParser.UNBOUNDED - 175)) | (1 << (SqlBaseParser.UNCOMMITTED - 175)) | (1 << (SqlBaseParser.USE - 175)) | (1 << (SqlBaseParser.USER - 175)) | (1 << (SqlBaseParser.VALIDATE - 175)) | (1 << (SqlBaseParser.VERBOSE - 175)) | (1 << (SqlBaseParser.VIEW - 175)))) !== 0) || ((((_la - 209)) & ~0x1f) == 0 && ((1 << (_la - 209)) & ((1 << (SqlBaseParser.WORK - 209)) | (1 << (SqlBaseParser.WRITE - 209)) | (1 << (SqlBaseParser.YEAR - 209)) | (1 << (SqlBaseParser.ZONE - 209)) | (1 << (SqlBaseParser.IDENTIFIER - 209)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 209)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 209)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 209)))) !== 0)) {
	                this.state = 1561;
	                this.qualifiedName();
	                this.state = 1566;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 1562;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1563;
	                    this.qualifiedName();
	                    this.state = 1568;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1571;
	            this.match(SqlBaseParser.T__2);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1584;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,204,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1582;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.value = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 1574;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1575;
	                    this.match(SqlBaseParser.T__6);
	                    this.state = 1576;
	                    localctx.index = this.valueExpression(0);
	                    this.state = 1577;
	                    this.match(SqlBaseParser.T__7);
	                    break;

	                case 2:
	                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.base = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 1579;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1580;
	                    this.match(SqlBaseParser.T__0);
	                    this.state = 1581;
	                    localctx.fieldName = this.identifier();
	                    break;

	                } 
	            }
	            this.state = 1586;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,204,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SqlBaseParser.RULE_string);
	    try {
	        this.state = 1593;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.STRING:
	            localctx = new BasicStringLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1587;
	            this.match(SqlBaseParser.STRING);
	            break;
	        case SqlBaseParser.UNICODE_STRING:
	            localctx = new UnicodeStringLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1588;
	            this.match(SqlBaseParser.UNICODE_STRING);
	            this.state = 1591;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	            if(la_===1) {
	                this.state = 1589;
	                this.match(SqlBaseParser.UESCAPE);
	                this.state = 1590;
	                this.match(SqlBaseParser.STRING);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullTreatment() {
	    let localctx = new NullTreatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SqlBaseParser.RULE_nullTreatment);
	    try {
	        this.state = 1599;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.IGNORE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1595;
	            this.match(SqlBaseParser.IGNORE);
	            this.state = 1596;
	            this.match(SqlBaseParser.NULLS);
	            break;
	        case SqlBaseParser.RESPECT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1597;
	            this.match(SqlBaseParser.RESPECT);
	            this.state = 1598;
	            this.match(SqlBaseParser.NULLS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeZoneSpecifier() {
	    let localctx = new TimeZoneSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SqlBaseParser.RULE_timeZoneSpecifier);
	    try {
	        this.state = 1607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TimeZoneIntervalContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1601;
	            this.match(SqlBaseParser.TIME);
	            this.state = 1602;
	            this.match(SqlBaseParser.ZONE);
	            this.state = 1603;
	            this.interval();
	            break;

	        case 2:
	            localctx = new TimeZoneStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1604;
	            this.match(SqlBaseParser.TIME);
	            this.state = 1605;
	            this.match(SqlBaseParser.ZONE);
	            this.state = 1606;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SqlBaseParser.RULE_comparisonOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        _la = this._input.LA(1);
	        if(!(((((_la - 213)) & ~0x1f) == 0 && ((1 << (_la - 213)) & ((1 << (SqlBaseParser.EQ - 213)) | (1 << (SqlBaseParser.NEQ - 213)) | (1 << (SqlBaseParser.LT - 213)) | (1 << (SqlBaseParser.LTE - 213)) | (1 << (SqlBaseParser.GT - 213)) | (1 << (SqlBaseParser.GTE - 213)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonQuantifier() {
	    let localctx = new ComparisonQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SqlBaseParser.RULE_comparisonQuantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1611;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.ANY || _la===SqlBaseParser.SOME)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValue() {
	    let localctx = new BooleanValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SqlBaseParser.RULE_booleanValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1613;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.FALSE || _la===SqlBaseParser.TRUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval() {
	    let localctx = new IntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SqlBaseParser.RULE_interval);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1615;
	        this.match(SqlBaseParser.INTERVAL);
	        this.state = 1617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS) {
	            this.state = 1616;
	            localctx.sign = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
	                localctx.sign = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1619;
	        this.string();
	        this.state = 1620;
	        localctx.from = this.intervalField();
	        this.state = 1623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        if(la_===1) {
	            this.state = 1621;
	            this.match(SqlBaseParser.TO);
	            this.state = 1622;
	            localctx.to = this.intervalField();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalField() {
	    let localctx = new IntervalFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SqlBaseParser.RULE_intervalField);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1625;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.DAY || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (SqlBaseParser.HOUR - 84)) | (1 << (SqlBaseParser.MINUTE - 84)) | (1 << (SqlBaseParser.MONTH - 84)))) !== 0) || _la===SqlBaseParser.SECOND || _la===SqlBaseParser.YEAR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalForm() {
	    let localctx = new NormalFormContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SqlBaseParser.RULE_normalForm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        _la = this._input.LA(1);
	        if(!(((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & ((1 << (SqlBaseParser.NFC - 117)) | (1 << (SqlBaseParser.NFD - 117)) | (1 << (SqlBaseParser.NFKC - 117)) | (1 << (SqlBaseParser.NFKD - 117)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	types() {
	    let localctx = new TypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SqlBaseParser.RULE_types);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1629;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (SqlBaseParser.ADD - 10)) | (1 << (SqlBaseParser.ADMIN - 10)) | (1 << (SqlBaseParser.ALL - 10)) | (1 << (SqlBaseParser.ANALYZE - 10)) | (1 << (SqlBaseParser.ANY - 10)) | (1 << (SqlBaseParser.ARRAY - 10)) | (1 << (SqlBaseParser.ASC - 10)) | (1 << (SqlBaseParser.AT - 10)) | (1 << (SqlBaseParser.BERNOULLI - 10)) | (1 << (SqlBaseParser.CALL - 10)) | (1 << (SqlBaseParser.CALLED - 10)) | (1 << (SqlBaseParser.CASCADE - 10)) | (1 << (SqlBaseParser.CATALOGS - 10)) | (1 << (SqlBaseParser.COLUMN - 10)) | (1 << (SqlBaseParser.COLUMNS - 10)) | (1 << (SqlBaseParser.COMMENT - 10)) | (1 << (SqlBaseParser.COMMIT - 10)) | (1 << (SqlBaseParser.COMMITTED - 10)) | (1 << (SqlBaseParser.CURRENT - 10)) | (1 << (SqlBaseParser.CURRENT_ROLE - 10)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (SqlBaseParser.DATA - 45)) | (1 << (SqlBaseParser.DATE - 45)) | (1 << (SqlBaseParser.DAY - 45)) | (1 << (SqlBaseParser.DEFINER - 45)) | (1 << (SqlBaseParser.DESC - 45)) | (1 << (SqlBaseParser.DETERMINISTIC - 45)) | (1 << (SqlBaseParser.DISTRIBUTED - 45)) | (1 << (SqlBaseParser.EXCLUDING - 45)) | (1 << (SqlBaseParser.EXPLAIN - 45)) | (1 << (SqlBaseParser.EXTERNAL - 45)) | (1 << (SqlBaseParser.FILTER - 45)) | (1 << (SqlBaseParser.FIRST - 45)) | (1 << (SqlBaseParser.FOLLOWING - 45)) | (1 << (SqlBaseParser.FORMAT - 45)) | (1 << (SqlBaseParser.FUNCTION - 45)) | (1 << (SqlBaseParser.FUNCTIONS - 45)))) !== 0) || ((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SqlBaseParser.GRANT - 77)) | (1 << (SqlBaseParser.GRANTED - 77)) | (1 << (SqlBaseParser.GRANTS - 77)) | (1 << (SqlBaseParser.GRAPHVIZ - 77)) | (1 << (SqlBaseParser.HOUR - 77)) | (1 << (SqlBaseParser.IF - 77)) | (1 << (SqlBaseParser.IGNORE - 77)) | (1 << (SqlBaseParser.INCLUDING - 77)) | (1 << (SqlBaseParser.INPUT - 77)) | (1 << (SqlBaseParser.INTERVAL - 77)) | (1 << (SqlBaseParser.INVOKER - 77)) | (1 << (SqlBaseParser.IO - 77)) | (1 << (SqlBaseParser.ISOLATION - 77)) | (1 << (SqlBaseParser.JSON - 77)) | (1 << (SqlBaseParser.LANGUAGE - 77)) | (1 << (SqlBaseParser.LAST - 77)) | (1 << (SqlBaseParser.LATERAL - 77)) | (1 << (SqlBaseParser.LEVEL - 77)) | (1 << (SqlBaseParser.LIMIT - 77)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (SqlBaseParser.LOGICAL - 110)) | (1 << (SqlBaseParser.MAP - 110)) | (1 << (SqlBaseParser.MATERIALIZED - 110)) | (1 << (SqlBaseParser.MINUTE - 110)) | (1 << (SqlBaseParser.MONTH - 110)) | (1 << (SqlBaseParser.NAME - 110)) | (1 << (SqlBaseParser.NFC - 110)) | (1 << (SqlBaseParser.NFD - 110)) | (1 << (SqlBaseParser.NFKC - 110)) | (1 << (SqlBaseParser.NFKD - 110)) | (1 << (SqlBaseParser.NO - 110)) | (1 << (SqlBaseParser.NONE - 110)) | (1 << (SqlBaseParser.NULLIF - 110)) | (1 << (SqlBaseParser.NULLS - 110)) | (1 << (SqlBaseParser.OFFSET - 110)) | (1 << (SqlBaseParser.ONLY - 110)) | (1 << (SqlBaseParser.OPTION - 110)) | (1 << (SqlBaseParser.ORDINALITY - 110)) | (1 << (SqlBaseParser.OUTPUT - 110)) | (1 << (SqlBaseParser.OVER - 110)) | (1 << (SqlBaseParser.PARTITION - 110)) | (1 << (SqlBaseParser.PARTITIONS - 110)) | (1 << (SqlBaseParser.POSITION - 110)) | (1 << (SqlBaseParser.PRECEDING - 110)))) !== 0) || ((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (SqlBaseParser.PRIVILEGES - 143)) | (1 << (SqlBaseParser.PROPERTIES - 143)) | (1 << (SqlBaseParser.RANGE - 143)) | (1 << (SqlBaseParser.READ - 143)) | (1 << (SqlBaseParser.REFRESH - 143)) | (1 << (SqlBaseParser.RENAME - 143)) | (1 << (SqlBaseParser.REPEATABLE - 143)) | (1 << (SqlBaseParser.REPLACE - 143)) | (1 << (SqlBaseParser.RESET - 143)) | (1 << (SqlBaseParser.RESPECT - 143)) | (1 << (SqlBaseParser.RESTRICT - 143)) | (1 << (SqlBaseParser.RETURN - 143)) | (1 << (SqlBaseParser.RETURNS - 143)) | (1 << (SqlBaseParser.REVOKE - 143)) | (1 << (SqlBaseParser.ROLE - 143)) | (1 << (SqlBaseParser.ROLES - 143)) | (1 << (SqlBaseParser.ROLLBACK - 143)) | (1 << (SqlBaseParser.ROW - 143)) | (1 << (SqlBaseParser.ROWS - 143)) | (1 << (SqlBaseParser.SCHEMA - 143)) | (1 << (SqlBaseParser.SCHEMAS - 143)) | (1 << (SqlBaseParser.SECOND - 143)) | (1 << (SqlBaseParser.SECURITY - 143)) | (1 << (SqlBaseParser.SERIALIZABLE - 143)) | (1 << (SqlBaseParser.SESSION - 143)) | (1 << (SqlBaseParser.SET - 143)) | (1 << (SqlBaseParser.SETS - 143)) | (1 << (SqlBaseParser.SHOW - 143)))) !== 0) || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (SqlBaseParser.SOME - 175)) | (1 << (SqlBaseParser.SQL - 175)) | (1 << (SqlBaseParser.START - 175)) | (1 << (SqlBaseParser.STATS - 175)) | (1 << (SqlBaseParser.SUBSTRING - 175)) | (1 << (SqlBaseParser.SYSTEM - 175)) | (1 << (SqlBaseParser.TABLES - 175)) | (1 << (SqlBaseParser.TABLESAMPLE - 175)) | (1 << (SqlBaseParser.TEMPORARY - 175)) | (1 << (SqlBaseParser.TEXT - 175)) | (1 << (SqlBaseParser.TIME - 175)) | (1 << (SqlBaseParser.TIMESTAMP - 175)) | (1 << (SqlBaseParser.TO - 175)) | (1 << (SqlBaseParser.TRANSACTION - 175)) | (1 << (SqlBaseParser.TRY_CAST - 175)) | (1 << (SqlBaseParser.TYPE - 175)) | (1 << (SqlBaseParser.UNBOUNDED - 175)) | (1 << (SqlBaseParser.UNCOMMITTED - 175)) | (1 << (SqlBaseParser.USE - 175)) | (1 << (SqlBaseParser.USER - 175)) | (1 << (SqlBaseParser.VALIDATE - 175)) | (1 << (SqlBaseParser.VERBOSE - 175)) | (1 << (SqlBaseParser.VIEW - 175)))) !== 0) || ((((_la - 209)) & ~0x1f) == 0 && ((1 << (_la - 209)) & ((1 << (SqlBaseParser.WORK - 209)) | (1 << (SqlBaseParser.WRITE - 209)) | (1 << (SqlBaseParser.YEAR - 209)) | (1 << (SqlBaseParser.ZONE - 209)) | (1 << (SqlBaseParser.IDENTIFIER - 209)) | (1 << (SqlBaseParser.DIGIT_IDENTIFIER - 209)) | (1 << (SqlBaseParser.QUOTED_IDENTIFIER - 209)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 209)) | (1 << (SqlBaseParser.TIME_WITH_TIME_ZONE - 209)) | (1 << (SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE - 209)) | (1 << (SqlBaseParser.DOUBLE_PRECISION - 209)))) !== 0)) {
	            this.state = 1630;
	            this.type(0);
	            this.state = 1635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 1631;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1632;
	                this.type(0);
	                this.state = 1637;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1640;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 114;
	    this.enterRecursionRule(localctx, 114, SqlBaseParser.RULE_type, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1689;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1643;
	            this.match(SqlBaseParser.ARRAY);
	            this.state = 1644;
	            this.match(SqlBaseParser.LT);
	            this.state = 1645;
	            this.type(0);
	            this.state = 1646;
	            this.match(SqlBaseParser.GT);
	            break;

	        case 2:
	            this.state = 1648;
	            this.match(SqlBaseParser.MAP);
	            this.state = 1649;
	            this.match(SqlBaseParser.LT);
	            this.state = 1650;
	            this.type(0);
	            this.state = 1651;
	            this.match(SqlBaseParser.T__3);
	            this.state = 1652;
	            this.type(0);
	            this.state = 1653;
	            this.match(SqlBaseParser.GT);
	            break;

	        case 3:
	            this.state = 1655;
	            this.match(SqlBaseParser.ROW);
	            this.state = 1656;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1657;
	            this.identifier();
	            this.state = 1658;
	            this.type(0);
	            this.state = 1665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 1659;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1660;
	                this.identifier();
	                this.state = 1661;
	                this.type(0);
	                this.state = 1667;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1668;
	            this.match(SqlBaseParser.T__2);
	            break;

	        case 4:
	            this.state = 1670;
	            this.baseType();
	            this.state = 1682;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	            if(la_===1) {
	                this.state = 1671;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1672;
	                this.typeParameter();
	                this.state = 1677;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__3) {
	                    this.state = 1673;
	                    this.match(SqlBaseParser.T__3);
	                    this.state = 1674;
	                    this.typeParameter();
	                    this.state = 1679;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1680;
	                this.match(SqlBaseParser.T__2);

	            }
	            break;

	        case 5:
	            this.state = 1684;
	            this.match(SqlBaseParser.INTERVAL);
	            this.state = 1685;
	            localctx.from = this.intervalField();
	            this.state = 1686;
	            this.match(SqlBaseParser.TO);
	            this.state = 1687;
	            localctx.to = this.intervalField();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1695;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,217,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TypeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_type);
	                this.state = 1691;
	                if (!( this.precpred(this._ctx, 6))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                }
	                this.state = 1692;
	                this.match(SqlBaseParser.ARRAY); 
	            }
	            this.state = 1697;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,217,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SqlBaseParser.RULE_typeParameter);
	    try {
	        this.state = 1700;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.INTEGER_VALUE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1698;
	            this.match(SqlBaseParser.INTEGER_VALUE);
	            break;
	        case SqlBaseParser.ADD:
	        case SqlBaseParser.ADMIN:
	        case SqlBaseParser.ALL:
	        case SqlBaseParser.ANALYZE:
	        case SqlBaseParser.ANY:
	        case SqlBaseParser.ARRAY:
	        case SqlBaseParser.ASC:
	        case SqlBaseParser.AT:
	        case SqlBaseParser.BERNOULLI:
	        case SqlBaseParser.CALL:
	        case SqlBaseParser.CALLED:
	        case SqlBaseParser.CASCADE:
	        case SqlBaseParser.CATALOGS:
	        case SqlBaseParser.COLUMN:
	        case SqlBaseParser.COLUMNS:
	        case SqlBaseParser.COMMENT:
	        case SqlBaseParser.COMMIT:
	        case SqlBaseParser.COMMITTED:
	        case SqlBaseParser.CURRENT:
	        case SqlBaseParser.CURRENT_ROLE:
	        case SqlBaseParser.DATA:
	        case SqlBaseParser.DATE:
	        case SqlBaseParser.DAY:
	        case SqlBaseParser.DEFINER:
	        case SqlBaseParser.DESC:
	        case SqlBaseParser.DETERMINISTIC:
	        case SqlBaseParser.DISTRIBUTED:
	        case SqlBaseParser.EXCLUDING:
	        case SqlBaseParser.EXPLAIN:
	        case SqlBaseParser.EXTERNAL:
	        case SqlBaseParser.FILTER:
	        case SqlBaseParser.FIRST:
	        case SqlBaseParser.FOLLOWING:
	        case SqlBaseParser.FORMAT:
	        case SqlBaseParser.FUNCTION:
	        case SqlBaseParser.FUNCTIONS:
	        case SqlBaseParser.GRANT:
	        case SqlBaseParser.GRANTED:
	        case SqlBaseParser.GRANTS:
	        case SqlBaseParser.GRAPHVIZ:
	        case SqlBaseParser.HOUR:
	        case SqlBaseParser.IF:
	        case SqlBaseParser.IGNORE:
	        case SqlBaseParser.INCLUDING:
	        case SqlBaseParser.INPUT:
	        case SqlBaseParser.INTERVAL:
	        case SqlBaseParser.INVOKER:
	        case SqlBaseParser.IO:
	        case SqlBaseParser.ISOLATION:
	        case SqlBaseParser.JSON:
	        case SqlBaseParser.LANGUAGE:
	        case SqlBaseParser.LAST:
	        case SqlBaseParser.LATERAL:
	        case SqlBaseParser.LEVEL:
	        case SqlBaseParser.LIMIT:
	        case SqlBaseParser.LOGICAL:
	        case SqlBaseParser.MAP:
	        case SqlBaseParser.MATERIALIZED:
	        case SqlBaseParser.MINUTE:
	        case SqlBaseParser.MONTH:
	        case SqlBaseParser.NAME:
	        case SqlBaseParser.NFC:
	        case SqlBaseParser.NFD:
	        case SqlBaseParser.NFKC:
	        case SqlBaseParser.NFKD:
	        case SqlBaseParser.NO:
	        case SqlBaseParser.NONE:
	        case SqlBaseParser.NULLIF:
	        case SqlBaseParser.NULLS:
	        case SqlBaseParser.OFFSET:
	        case SqlBaseParser.ONLY:
	        case SqlBaseParser.OPTION:
	        case SqlBaseParser.ORDINALITY:
	        case SqlBaseParser.OUTPUT:
	        case SqlBaseParser.OVER:
	        case SqlBaseParser.PARTITION:
	        case SqlBaseParser.PARTITIONS:
	        case SqlBaseParser.POSITION:
	        case SqlBaseParser.PRECEDING:
	        case SqlBaseParser.PRIVILEGES:
	        case SqlBaseParser.PROPERTIES:
	        case SqlBaseParser.RANGE:
	        case SqlBaseParser.READ:
	        case SqlBaseParser.REFRESH:
	        case SqlBaseParser.RENAME:
	        case SqlBaseParser.REPEATABLE:
	        case SqlBaseParser.REPLACE:
	        case SqlBaseParser.RESET:
	        case SqlBaseParser.RESPECT:
	        case SqlBaseParser.RESTRICT:
	        case SqlBaseParser.RETURN:
	        case SqlBaseParser.RETURNS:
	        case SqlBaseParser.REVOKE:
	        case SqlBaseParser.ROLE:
	        case SqlBaseParser.ROLES:
	        case SqlBaseParser.ROLLBACK:
	        case SqlBaseParser.ROW:
	        case SqlBaseParser.ROWS:
	        case SqlBaseParser.SCHEMA:
	        case SqlBaseParser.SCHEMAS:
	        case SqlBaseParser.SECOND:
	        case SqlBaseParser.SECURITY:
	        case SqlBaseParser.SERIALIZABLE:
	        case SqlBaseParser.SESSION:
	        case SqlBaseParser.SET:
	        case SqlBaseParser.SETS:
	        case SqlBaseParser.SHOW:
	        case SqlBaseParser.SOME:
	        case SqlBaseParser.SQL:
	        case SqlBaseParser.START:
	        case SqlBaseParser.STATS:
	        case SqlBaseParser.SUBSTRING:
	        case SqlBaseParser.SYSTEM:
	        case SqlBaseParser.TABLES:
	        case SqlBaseParser.TABLESAMPLE:
	        case SqlBaseParser.TEMPORARY:
	        case SqlBaseParser.TEXT:
	        case SqlBaseParser.TIME:
	        case SqlBaseParser.TIMESTAMP:
	        case SqlBaseParser.TO:
	        case SqlBaseParser.TRANSACTION:
	        case SqlBaseParser.TRY_CAST:
	        case SqlBaseParser.TYPE:
	        case SqlBaseParser.UNBOUNDED:
	        case SqlBaseParser.UNCOMMITTED:
	        case SqlBaseParser.USE:
	        case SqlBaseParser.USER:
	        case SqlBaseParser.VALIDATE:
	        case SqlBaseParser.VERBOSE:
	        case SqlBaseParser.VIEW:
	        case SqlBaseParser.WORK:
	        case SqlBaseParser.WRITE:
	        case SqlBaseParser.YEAR:
	        case SqlBaseParser.ZONE:
	        case SqlBaseParser.IDENTIFIER:
	        case SqlBaseParser.DIGIT_IDENTIFIER:
	        case SqlBaseParser.QUOTED_IDENTIFIER:
	        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
	        case SqlBaseParser.TIME_WITH_TIME_ZONE:
	        case SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE:
	        case SqlBaseParser.DOUBLE_PRECISION:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1699;
	            this.type(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseType() {
	    let localctx = new BaseTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SqlBaseParser.RULE_baseType);
	    try {
	        this.state = 1706;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.TIME_WITH_TIME_ZONE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1702;
	            this.match(SqlBaseParser.TIME_WITH_TIME_ZONE);
	            break;
	        case SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1703;
	            this.match(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE);
	            break;
	        case SqlBaseParser.DOUBLE_PRECISION:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1704;
	            this.match(SqlBaseParser.DOUBLE_PRECISION);
	            break;
	        case SqlBaseParser.ADD:
	        case SqlBaseParser.ADMIN:
	        case SqlBaseParser.ALL:
	        case SqlBaseParser.ANALYZE:
	        case SqlBaseParser.ANY:
	        case SqlBaseParser.ARRAY:
	        case SqlBaseParser.ASC:
	        case SqlBaseParser.AT:
	        case SqlBaseParser.BERNOULLI:
	        case SqlBaseParser.CALL:
	        case SqlBaseParser.CALLED:
	        case SqlBaseParser.CASCADE:
	        case SqlBaseParser.CATALOGS:
	        case SqlBaseParser.COLUMN:
	        case SqlBaseParser.COLUMNS:
	        case SqlBaseParser.COMMENT:
	        case SqlBaseParser.COMMIT:
	        case SqlBaseParser.COMMITTED:
	        case SqlBaseParser.CURRENT:
	        case SqlBaseParser.CURRENT_ROLE:
	        case SqlBaseParser.DATA:
	        case SqlBaseParser.DATE:
	        case SqlBaseParser.DAY:
	        case SqlBaseParser.DEFINER:
	        case SqlBaseParser.DESC:
	        case SqlBaseParser.DETERMINISTIC:
	        case SqlBaseParser.DISTRIBUTED:
	        case SqlBaseParser.EXCLUDING:
	        case SqlBaseParser.EXPLAIN:
	        case SqlBaseParser.EXTERNAL:
	        case SqlBaseParser.FILTER:
	        case SqlBaseParser.FIRST:
	        case SqlBaseParser.FOLLOWING:
	        case SqlBaseParser.FORMAT:
	        case SqlBaseParser.FUNCTION:
	        case SqlBaseParser.FUNCTIONS:
	        case SqlBaseParser.GRANT:
	        case SqlBaseParser.GRANTED:
	        case SqlBaseParser.GRANTS:
	        case SqlBaseParser.GRAPHVIZ:
	        case SqlBaseParser.HOUR:
	        case SqlBaseParser.IF:
	        case SqlBaseParser.IGNORE:
	        case SqlBaseParser.INCLUDING:
	        case SqlBaseParser.INPUT:
	        case SqlBaseParser.INTERVAL:
	        case SqlBaseParser.INVOKER:
	        case SqlBaseParser.IO:
	        case SqlBaseParser.ISOLATION:
	        case SqlBaseParser.JSON:
	        case SqlBaseParser.LANGUAGE:
	        case SqlBaseParser.LAST:
	        case SqlBaseParser.LATERAL:
	        case SqlBaseParser.LEVEL:
	        case SqlBaseParser.LIMIT:
	        case SqlBaseParser.LOGICAL:
	        case SqlBaseParser.MAP:
	        case SqlBaseParser.MATERIALIZED:
	        case SqlBaseParser.MINUTE:
	        case SqlBaseParser.MONTH:
	        case SqlBaseParser.NAME:
	        case SqlBaseParser.NFC:
	        case SqlBaseParser.NFD:
	        case SqlBaseParser.NFKC:
	        case SqlBaseParser.NFKD:
	        case SqlBaseParser.NO:
	        case SqlBaseParser.NONE:
	        case SqlBaseParser.NULLIF:
	        case SqlBaseParser.NULLS:
	        case SqlBaseParser.OFFSET:
	        case SqlBaseParser.ONLY:
	        case SqlBaseParser.OPTION:
	        case SqlBaseParser.ORDINALITY:
	        case SqlBaseParser.OUTPUT:
	        case SqlBaseParser.OVER:
	        case SqlBaseParser.PARTITION:
	        case SqlBaseParser.PARTITIONS:
	        case SqlBaseParser.POSITION:
	        case SqlBaseParser.PRECEDING:
	        case SqlBaseParser.PRIVILEGES:
	        case SqlBaseParser.PROPERTIES:
	        case SqlBaseParser.RANGE:
	        case SqlBaseParser.READ:
	        case SqlBaseParser.REFRESH:
	        case SqlBaseParser.RENAME:
	        case SqlBaseParser.REPEATABLE:
	        case SqlBaseParser.REPLACE:
	        case SqlBaseParser.RESET:
	        case SqlBaseParser.RESPECT:
	        case SqlBaseParser.RESTRICT:
	        case SqlBaseParser.RETURN:
	        case SqlBaseParser.RETURNS:
	        case SqlBaseParser.REVOKE:
	        case SqlBaseParser.ROLE:
	        case SqlBaseParser.ROLES:
	        case SqlBaseParser.ROLLBACK:
	        case SqlBaseParser.ROW:
	        case SqlBaseParser.ROWS:
	        case SqlBaseParser.SCHEMA:
	        case SqlBaseParser.SCHEMAS:
	        case SqlBaseParser.SECOND:
	        case SqlBaseParser.SECURITY:
	        case SqlBaseParser.SERIALIZABLE:
	        case SqlBaseParser.SESSION:
	        case SqlBaseParser.SET:
	        case SqlBaseParser.SETS:
	        case SqlBaseParser.SHOW:
	        case SqlBaseParser.SOME:
	        case SqlBaseParser.SQL:
	        case SqlBaseParser.START:
	        case SqlBaseParser.STATS:
	        case SqlBaseParser.SUBSTRING:
	        case SqlBaseParser.SYSTEM:
	        case SqlBaseParser.TABLES:
	        case SqlBaseParser.TABLESAMPLE:
	        case SqlBaseParser.TEMPORARY:
	        case SqlBaseParser.TEXT:
	        case SqlBaseParser.TIME:
	        case SqlBaseParser.TIMESTAMP:
	        case SqlBaseParser.TO:
	        case SqlBaseParser.TRANSACTION:
	        case SqlBaseParser.TRY_CAST:
	        case SqlBaseParser.TYPE:
	        case SqlBaseParser.UNBOUNDED:
	        case SqlBaseParser.UNCOMMITTED:
	        case SqlBaseParser.USE:
	        case SqlBaseParser.USER:
	        case SqlBaseParser.VALIDATE:
	        case SqlBaseParser.VERBOSE:
	        case SqlBaseParser.VIEW:
	        case SqlBaseParser.WORK:
	        case SqlBaseParser.WRITE:
	        case SqlBaseParser.YEAR:
	        case SqlBaseParser.ZONE:
	        case SqlBaseParser.IDENTIFIER:
	        case SqlBaseParser.DIGIT_IDENTIFIER:
	        case SqlBaseParser.QUOTED_IDENTIFIER:
	        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1705;
	            this.qualifiedName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenClause() {
	    let localctx = new WhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SqlBaseParser.RULE_whenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1708;
	        this.match(SqlBaseParser.WHEN);
	        this.state = 1709;
	        localctx.condition = this.expression();
	        this.state = 1710;
	        this.match(SqlBaseParser.THEN);
	        this.state = 1711;
	        localctx.result = this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter() {
	    let localctx = new FilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SqlBaseParser.RULE_filter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1713;
	        this.match(SqlBaseParser.FILTER);
	        this.state = 1714;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1715;
	        this.match(SqlBaseParser.WHERE);
	        this.state = 1716;
	        this.booleanExpression(0);
	        this.state = 1717;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	over() {
	    let localctx = new OverContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SqlBaseParser.RULE_over);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1719;
	        this.match(SqlBaseParser.OVER);
	        this.state = 1720;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.PARTITION) {
	            this.state = 1721;
	            this.match(SqlBaseParser.PARTITION);
	            this.state = 1722;
	            this.match(SqlBaseParser.BY);
	            this.state = 1723;
	            localctx._expression = this.expression();
	            localctx.partition.push(localctx._expression);
	            this.state = 1728;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 1724;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1725;
	                localctx._expression = this.expression();
	                localctx.partition.push(localctx._expression);
	                this.state = 1730;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.ORDER) {
	            this.state = 1733;
	            this.match(SqlBaseParser.ORDER);
	            this.state = 1734;
	            this.match(SqlBaseParser.BY);
	            this.state = 1735;
	            this.sortItem();
	            this.state = 1740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__3) {
	                this.state = 1736;
	                this.match(SqlBaseParser.T__3);
	                this.state = 1737;
	                this.sortItem();
	                this.state = 1742;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.RANGE || _la===SqlBaseParser.ROWS) {
	            this.state = 1745;
	            this.windowFrame();
	        }

	        this.state = 1748;
	        this.match(SqlBaseParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrame() {
	    let localctx = new WindowFrameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SqlBaseParser.RULE_windowFrame);
	    try {
	        this.state = 1766;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1750;
	            localctx.frameType = this.match(SqlBaseParser.RANGE);
	            this.state = 1751;
	            localctx.start = this.frameBound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1752;
	            localctx.frameType = this.match(SqlBaseParser.ROWS);
	            this.state = 1753;
	            localctx.start = this.frameBound();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1754;
	            localctx.frameType = this.match(SqlBaseParser.RANGE);
	            this.state = 1755;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 1756;
	            localctx.start = this.frameBound();
	            this.state = 1757;
	            this.match(SqlBaseParser.AND);
	            this.state = 1758;
	            localctx.end = this.frameBound();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1760;
	            localctx.frameType = this.match(SqlBaseParser.ROWS);
	            this.state = 1761;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 1762;
	            localctx.start = this.frameBound();
	            this.state = 1763;
	            this.match(SqlBaseParser.AND);
	            this.state = 1764;
	            localctx.end = this.frameBound();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameBound() {
	    let localctx = new FrameBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SqlBaseParser.RULE_frameBound);
	    var _la = 0; // Token type
	    try {
	        this.state = 1777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UnboundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1768;
	            this.match(SqlBaseParser.UNBOUNDED);
	            this.state = 1769;
	            localctx.boundType = this.match(SqlBaseParser.PRECEDING);
	            break;

	        case 2:
	            localctx = new UnboundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1770;
	            this.match(SqlBaseParser.UNBOUNDED);
	            this.state = 1771;
	            localctx.boundType = this.match(SqlBaseParser.FOLLOWING);
	            break;

	        case 3:
	            localctx = new CurrentRowBoundContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1772;
	            this.match(SqlBaseParser.CURRENT);
	            this.state = 1773;
	            this.match(SqlBaseParser.ROW);
	            break;

	        case 4:
	            localctx = new BoundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1774;
	            this.expression();
	            this.state = 1775;
	            localctx.boundType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.FOLLOWING || _la===SqlBaseParser.PRECEDING)) {
	                localctx.boundType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainOption() {
	    let localctx = new ExplainOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SqlBaseParser.RULE_explainOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 1783;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.FORMAT:
	            localctx = new ExplainFormatContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1779;
	            this.match(SqlBaseParser.FORMAT);
	            this.state = 1780;
	            localctx.value = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.GRAPHVIZ || _la===SqlBaseParser.JSON || _la===SqlBaseParser.TEXT)) {
	                localctx.value = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case SqlBaseParser.TYPE:
	            localctx = new ExplainTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1781;
	            this.match(SqlBaseParser.TYPE);
	            this.state = 1782;
	            localctx.value = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.DISTRIBUTED || _la===SqlBaseParser.IO || _la===SqlBaseParser.LOGICAL || _la===SqlBaseParser.VALIDATE)) {
	                localctx.value = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SqlBaseParser.RULE_transactionMode);
	    var _la = 0; // Token type
	    try {
	        this.state = 1790;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.ISOLATION:
	            localctx = new IsolationLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1785;
	            this.match(SqlBaseParser.ISOLATION);
	            this.state = 1786;
	            this.match(SqlBaseParser.LEVEL);
	            this.state = 1787;
	            this.levelOfIsolation();
	            break;
	        case SqlBaseParser.READ:
	            localctx = new TransactionAccessModeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1788;
	            this.match(SqlBaseParser.READ);
	            this.state = 1789;
	            localctx.accessMode = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.ONLY || _la===SqlBaseParser.WRITE)) {
	                localctx.accessMode = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	levelOfIsolation() {
	    let localctx = new LevelOfIsolationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SqlBaseParser.RULE_levelOfIsolation);
	    try {
	        this.state = 1799;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ReadUncommittedContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1792;
	            this.match(SqlBaseParser.READ);
	            this.state = 1793;
	            this.match(SqlBaseParser.UNCOMMITTED);
	            break;

	        case 2:
	            localctx = new ReadCommittedContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1794;
	            this.match(SqlBaseParser.READ);
	            this.state = 1795;
	            this.match(SqlBaseParser.COMMITTED);
	            break;

	        case 3:
	            localctx = new RepeatableReadContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1796;
	            this.match(SqlBaseParser.REPEATABLE);
	            this.state = 1797;
	            this.match(SqlBaseParser.READ);
	            break;

	        case 4:
	            localctx = new SerializableContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1798;
	            this.match(SqlBaseParser.SERIALIZABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callArgument() {
	    let localctx = new CallArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SqlBaseParser.RULE_callArgument);
	    try {
	        this.state = 1806;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PositionalArgumentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1801;
	            this.expression();
	            break;

	        case 2:
	            localctx = new NamedArgumentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1802;
	            this.identifier();
	            this.state = 1803;
	            this.match(SqlBaseParser.T__8);
	            this.state = 1804;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilege() {
	    let localctx = new PrivilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SqlBaseParser.RULE_privilege);
	    try {
	        this.state = 1812;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.SELECT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1808;
	            this.match(SqlBaseParser.SELECT);
	            break;
	        case SqlBaseParser.DELETE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1809;
	            this.match(SqlBaseParser.DELETE);
	            break;
	        case SqlBaseParser.INSERT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1810;
	            this.match(SqlBaseParser.INSERT);
	            break;
	        case SqlBaseParser.ADD:
	        case SqlBaseParser.ADMIN:
	        case SqlBaseParser.ALL:
	        case SqlBaseParser.ANALYZE:
	        case SqlBaseParser.ANY:
	        case SqlBaseParser.ARRAY:
	        case SqlBaseParser.ASC:
	        case SqlBaseParser.AT:
	        case SqlBaseParser.BERNOULLI:
	        case SqlBaseParser.CALL:
	        case SqlBaseParser.CALLED:
	        case SqlBaseParser.CASCADE:
	        case SqlBaseParser.CATALOGS:
	        case SqlBaseParser.COLUMN:
	        case SqlBaseParser.COLUMNS:
	        case SqlBaseParser.COMMENT:
	        case SqlBaseParser.COMMIT:
	        case SqlBaseParser.COMMITTED:
	        case SqlBaseParser.CURRENT:
	        case SqlBaseParser.CURRENT_ROLE:
	        case SqlBaseParser.DATA:
	        case SqlBaseParser.DATE:
	        case SqlBaseParser.DAY:
	        case SqlBaseParser.DEFINER:
	        case SqlBaseParser.DESC:
	        case SqlBaseParser.DETERMINISTIC:
	        case SqlBaseParser.DISTRIBUTED:
	        case SqlBaseParser.EXCLUDING:
	        case SqlBaseParser.EXPLAIN:
	        case SqlBaseParser.EXTERNAL:
	        case SqlBaseParser.FILTER:
	        case SqlBaseParser.FIRST:
	        case SqlBaseParser.FOLLOWING:
	        case SqlBaseParser.FORMAT:
	        case SqlBaseParser.FUNCTION:
	        case SqlBaseParser.FUNCTIONS:
	        case SqlBaseParser.GRANT:
	        case SqlBaseParser.GRANTED:
	        case SqlBaseParser.GRANTS:
	        case SqlBaseParser.GRAPHVIZ:
	        case SqlBaseParser.HOUR:
	        case SqlBaseParser.IF:
	        case SqlBaseParser.IGNORE:
	        case SqlBaseParser.INCLUDING:
	        case SqlBaseParser.INPUT:
	        case SqlBaseParser.INTERVAL:
	        case SqlBaseParser.INVOKER:
	        case SqlBaseParser.IO:
	        case SqlBaseParser.ISOLATION:
	        case SqlBaseParser.JSON:
	        case SqlBaseParser.LANGUAGE:
	        case SqlBaseParser.LAST:
	        case SqlBaseParser.LATERAL:
	        case SqlBaseParser.LEVEL:
	        case SqlBaseParser.LIMIT:
	        case SqlBaseParser.LOGICAL:
	        case SqlBaseParser.MAP:
	        case SqlBaseParser.MATERIALIZED:
	        case SqlBaseParser.MINUTE:
	        case SqlBaseParser.MONTH:
	        case SqlBaseParser.NAME:
	        case SqlBaseParser.NFC:
	        case SqlBaseParser.NFD:
	        case SqlBaseParser.NFKC:
	        case SqlBaseParser.NFKD:
	        case SqlBaseParser.NO:
	        case SqlBaseParser.NONE:
	        case SqlBaseParser.NULLIF:
	        case SqlBaseParser.NULLS:
	        case SqlBaseParser.OFFSET:
	        case SqlBaseParser.ONLY:
	        case SqlBaseParser.OPTION:
	        case SqlBaseParser.ORDINALITY:
	        case SqlBaseParser.OUTPUT:
	        case SqlBaseParser.OVER:
	        case SqlBaseParser.PARTITION:
	        case SqlBaseParser.PARTITIONS:
	        case SqlBaseParser.POSITION:
	        case SqlBaseParser.PRECEDING:
	        case SqlBaseParser.PRIVILEGES:
	        case SqlBaseParser.PROPERTIES:
	        case SqlBaseParser.RANGE:
	        case SqlBaseParser.READ:
	        case SqlBaseParser.REFRESH:
	        case SqlBaseParser.RENAME:
	        case SqlBaseParser.REPEATABLE:
	        case SqlBaseParser.REPLACE:
	        case SqlBaseParser.RESET:
	        case SqlBaseParser.RESPECT:
	        case SqlBaseParser.RESTRICT:
	        case SqlBaseParser.RETURN:
	        case SqlBaseParser.RETURNS:
	        case SqlBaseParser.REVOKE:
	        case SqlBaseParser.ROLE:
	        case SqlBaseParser.ROLES:
	        case SqlBaseParser.ROLLBACK:
	        case SqlBaseParser.ROW:
	        case SqlBaseParser.ROWS:
	        case SqlBaseParser.SCHEMA:
	        case SqlBaseParser.SCHEMAS:
	        case SqlBaseParser.SECOND:
	        case SqlBaseParser.SECURITY:
	        case SqlBaseParser.SERIALIZABLE:
	        case SqlBaseParser.SESSION:
	        case SqlBaseParser.SET:
	        case SqlBaseParser.SETS:
	        case SqlBaseParser.SHOW:
	        case SqlBaseParser.SOME:
	        case SqlBaseParser.SQL:
	        case SqlBaseParser.START:
	        case SqlBaseParser.STATS:
	        case SqlBaseParser.SUBSTRING:
	        case SqlBaseParser.SYSTEM:
	        case SqlBaseParser.TABLES:
	        case SqlBaseParser.TABLESAMPLE:
	        case SqlBaseParser.TEMPORARY:
	        case SqlBaseParser.TEXT:
	        case SqlBaseParser.TIME:
	        case SqlBaseParser.TIMESTAMP:
	        case SqlBaseParser.TO:
	        case SqlBaseParser.TRANSACTION:
	        case SqlBaseParser.TRY_CAST:
	        case SqlBaseParser.TYPE:
	        case SqlBaseParser.UNBOUNDED:
	        case SqlBaseParser.UNCOMMITTED:
	        case SqlBaseParser.USE:
	        case SqlBaseParser.USER:
	        case SqlBaseParser.VALIDATE:
	        case SqlBaseParser.VERBOSE:
	        case SqlBaseParser.VIEW:
	        case SqlBaseParser.WORK:
	        case SqlBaseParser.WRITE:
	        case SqlBaseParser.YEAR:
	        case SqlBaseParser.ZONE:
	        case SqlBaseParser.IDENTIFIER:
	        case SqlBaseParser.DIGIT_IDENTIFIER:
	        case SqlBaseParser.QUOTED_IDENTIFIER:
	        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1811;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SqlBaseParser.RULE_qualifiedName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1814;
	        this.identifier();
	        this.state = 1819;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,232,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1815;
	                this.match(SqlBaseParser.T__0);
	                this.state = 1816;
	                this.identifier(); 
	            }
	            this.state = 1821;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,232,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantor() {
	    let localctx = new GrantorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SqlBaseParser.RULE_grantor);
	    try {
	        this.state = 1825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CurrentUserGrantorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1822;
	            this.match(SqlBaseParser.CURRENT_USER);
	            break;

	        case 2:
	            localctx = new CurrentRoleGrantorContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1823;
	            this.match(SqlBaseParser.CURRENT_ROLE);
	            break;

	        case 3:
	            localctx = new SpecifiedPrincipalContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1824;
	            this.principal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principal() {
	    let localctx = new PrincipalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SqlBaseParser.RULE_principal);
	    try {
	        this.state = 1832;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UserPrincipalContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1827;
	            this.match(SqlBaseParser.USER);
	            this.state = 1828;
	            this.identifier();
	            break;

	        case 2:
	            localctx = new RolePrincipalContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1829;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 1830;
	            this.identifier();
	            break;

	        case 3:
	            localctx = new UnspecifiedPrincipalContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1831;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roles() {
	    let localctx = new RolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SqlBaseParser.RULE_roles);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1834;
	        this.identifier();
	        this.state = 1839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__3) {
	            this.state = 1835;
	            this.match(SqlBaseParser.T__3);
	            this.state = 1836;
	            this.identifier();
	            this.state = 1841;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SqlBaseParser.RULE_identifier);
	    try {
	        this.state = 1847;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.IDENTIFIER:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1842;
	            this.match(SqlBaseParser.IDENTIFIER);
	            break;
	        case SqlBaseParser.QUOTED_IDENTIFIER:
	            localctx = new QuotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1843;
	            this.match(SqlBaseParser.QUOTED_IDENTIFIER);
	            break;
	        case SqlBaseParser.ADD:
	        case SqlBaseParser.ADMIN:
	        case SqlBaseParser.ALL:
	        case SqlBaseParser.ANALYZE:
	        case SqlBaseParser.ANY:
	        case SqlBaseParser.ARRAY:
	        case SqlBaseParser.ASC:
	        case SqlBaseParser.AT:
	        case SqlBaseParser.BERNOULLI:
	        case SqlBaseParser.CALL:
	        case SqlBaseParser.CALLED:
	        case SqlBaseParser.CASCADE:
	        case SqlBaseParser.CATALOGS:
	        case SqlBaseParser.COLUMN:
	        case SqlBaseParser.COLUMNS:
	        case SqlBaseParser.COMMENT:
	        case SqlBaseParser.COMMIT:
	        case SqlBaseParser.COMMITTED:
	        case SqlBaseParser.CURRENT:
	        case SqlBaseParser.CURRENT_ROLE:
	        case SqlBaseParser.DATA:
	        case SqlBaseParser.DATE:
	        case SqlBaseParser.DAY:
	        case SqlBaseParser.DEFINER:
	        case SqlBaseParser.DESC:
	        case SqlBaseParser.DETERMINISTIC:
	        case SqlBaseParser.DISTRIBUTED:
	        case SqlBaseParser.EXCLUDING:
	        case SqlBaseParser.EXPLAIN:
	        case SqlBaseParser.EXTERNAL:
	        case SqlBaseParser.FILTER:
	        case SqlBaseParser.FIRST:
	        case SqlBaseParser.FOLLOWING:
	        case SqlBaseParser.FORMAT:
	        case SqlBaseParser.FUNCTION:
	        case SqlBaseParser.FUNCTIONS:
	        case SqlBaseParser.GRANT:
	        case SqlBaseParser.GRANTED:
	        case SqlBaseParser.GRANTS:
	        case SqlBaseParser.GRAPHVIZ:
	        case SqlBaseParser.HOUR:
	        case SqlBaseParser.IF:
	        case SqlBaseParser.IGNORE:
	        case SqlBaseParser.INCLUDING:
	        case SqlBaseParser.INPUT:
	        case SqlBaseParser.INTERVAL:
	        case SqlBaseParser.INVOKER:
	        case SqlBaseParser.IO:
	        case SqlBaseParser.ISOLATION:
	        case SqlBaseParser.JSON:
	        case SqlBaseParser.LANGUAGE:
	        case SqlBaseParser.LAST:
	        case SqlBaseParser.LATERAL:
	        case SqlBaseParser.LEVEL:
	        case SqlBaseParser.LIMIT:
	        case SqlBaseParser.LOGICAL:
	        case SqlBaseParser.MAP:
	        case SqlBaseParser.MATERIALIZED:
	        case SqlBaseParser.MINUTE:
	        case SqlBaseParser.MONTH:
	        case SqlBaseParser.NAME:
	        case SqlBaseParser.NFC:
	        case SqlBaseParser.NFD:
	        case SqlBaseParser.NFKC:
	        case SqlBaseParser.NFKD:
	        case SqlBaseParser.NO:
	        case SqlBaseParser.NONE:
	        case SqlBaseParser.NULLIF:
	        case SqlBaseParser.NULLS:
	        case SqlBaseParser.OFFSET:
	        case SqlBaseParser.ONLY:
	        case SqlBaseParser.OPTION:
	        case SqlBaseParser.ORDINALITY:
	        case SqlBaseParser.OUTPUT:
	        case SqlBaseParser.OVER:
	        case SqlBaseParser.PARTITION:
	        case SqlBaseParser.PARTITIONS:
	        case SqlBaseParser.POSITION:
	        case SqlBaseParser.PRECEDING:
	        case SqlBaseParser.PRIVILEGES:
	        case SqlBaseParser.PROPERTIES:
	        case SqlBaseParser.RANGE:
	        case SqlBaseParser.READ:
	        case SqlBaseParser.REFRESH:
	        case SqlBaseParser.RENAME:
	        case SqlBaseParser.REPEATABLE:
	        case SqlBaseParser.REPLACE:
	        case SqlBaseParser.RESET:
	        case SqlBaseParser.RESPECT:
	        case SqlBaseParser.RESTRICT:
	        case SqlBaseParser.RETURN:
	        case SqlBaseParser.RETURNS:
	        case SqlBaseParser.REVOKE:
	        case SqlBaseParser.ROLE:
	        case SqlBaseParser.ROLES:
	        case SqlBaseParser.ROLLBACK:
	        case SqlBaseParser.ROW:
	        case SqlBaseParser.ROWS:
	        case SqlBaseParser.SCHEMA:
	        case SqlBaseParser.SCHEMAS:
	        case SqlBaseParser.SECOND:
	        case SqlBaseParser.SECURITY:
	        case SqlBaseParser.SERIALIZABLE:
	        case SqlBaseParser.SESSION:
	        case SqlBaseParser.SET:
	        case SqlBaseParser.SETS:
	        case SqlBaseParser.SHOW:
	        case SqlBaseParser.SOME:
	        case SqlBaseParser.SQL:
	        case SqlBaseParser.START:
	        case SqlBaseParser.STATS:
	        case SqlBaseParser.SUBSTRING:
	        case SqlBaseParser.SYSTEM:
	        case SqlBaseParser.TABLES:
	        case SqlBaseParser.TABLESAMPLE:
	        case SqlBaseParser.TEMPORARY:
	        case SqlBaseParser.TEXT:
	        case SqlBaseParser.TIME:
	        case SqlBaseParser.TIMESTAMP:
	        case SqlBaseParser.TO:
	        case SqlBaseParser.TRANSACTION:
	        case SqlBaseParser.TRY_CAST:
	        case SqlBaseParser.TYPE:
	        case SqlBaseParser.UNBOUNDED:
	        case SqlBaseParser.UNCOMMITTED:
	        case SqlBaseParser.USE:
	        case SqlBaseParser.USER:
	        case SqlBaseParser.VALIDATE:
	        case SqlBaseParser.VERBOSE:
	        case SqlBaseParser.VIEW:
	        case SqlBaseParser.WORK:
	        case SqlBaseParser.WRITE:
	        case SqlBaseParser.YEAR:
	        case SqlBaseParser.ZONE:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1844;
	            this.nonReserved();
	            break;
	        case SqlBaseParser.BACKQUOTED_IDENTIFIER:
	            localctx = new BackQuotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1845;
	            this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
	            break;
	        case SqlBaseParser.DIGIT_IDENTIFIER:
	            localctx = new DigitIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1846;
	            this.match(SqlBaseParser.DIGIT_IDENTIFIER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SqlBaseParser.RULE_number);
	    try {
	        this.state = 1852;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.DECIMAL_VALUE:
	            localctx = new DecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1849;
	            this.match(SqlBaseParser.DECIMAL_VALUE);
	            break;
	        case SqlBaseParser.DOUBLE_VALUE:
	            localctx = new DoubleLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1850;
	            this.match(SqlBaseParser.DOUBLE_VALUE);
	            break;
	        case SqlBaseParser.INTEGER_VALUE:
	            localctx = new IntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1851;
	            this.match(SqlBaseParser.INTEGER_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonReserved() {
	    let localctx = new NonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SqlBaseParser.RULE_nonReserved);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1854;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.ADMIN) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.BERNOULLI) | (1 << SqlBaseParser.CALL) | (1 << SqlBaseParser.CALLED) | (1 << SqlBaseParser.CASCADE) | (1 << SqlBaseParser.CATALOGS) | (1 << SqlBaseParser.COLUMN) | (1 << SqlBaseParser.COLUMNS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.COMMENT - 32)) | (1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMMITTED - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_ROLE - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATE - 32)) | (1 << (SqlBaseParser.DAY - 32)) | (1 << (SqlBaseParser.DEFINER - 32)) | (1 << (SqlBaseParser.DESC - 32)) | (1 << (SqlBaseParser.DETERMINISTIC - 32)) | (1 << (SqlBaseParser.DISTRIBUTED - 32)) | (1 << (SqlBaseParser.EXCLUDING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.FUNCTION - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.GRANT - 64)) | (1 << (SqlBaseParser.GRANTED - 64)) | (1 << (SqlBaseParser.GRANTS - 64)) | (1 << (SqlBaseParser.GRAPHVIZ - 64)) | (1 << (SqlBaseParser.HOUR - 64)) | (1 << (SqlBaseParser.IF - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.INCLUDING - 64)) | (1 << (SqlBaseParser.INPUT - 64)) | (1 << (SqlBaseParser.INTERVAL - 64)) | (1 << (SqlBaseParser.INVOKER - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.IO - 96)) | (1 << (SqlBaseParser.ISOLATION - 96)) | (1 << (SqlBaseParser.JSON - 96)) | (1 << (SqlBaseParser.LANGUAGE - 96)) | (1 << (SqlBaseParser.LAST - 96)) | (1 << (SqlBaseParser.LATERAL - 96)) | (1 << (SqlBaseParser.LEVEL - 96)) | (1 << (SqlBaseParser.LIMIT - 96)) | (1 << (SqlBaseParser.LOGICAL - 96)) | (1 << (SqlBaseParser.MAP - 96)) | (1 << (SqlBaseParser.MATERIALIZED - 96)) | (1 << (SqlBaseParser.MINUTE - 96)) | (1 << (SqlBaseParser.MONTH - 96)) | (1 << (SqlBaseParser.NAME - 96)) | (1 << (SqlBaseParser.NFC - 96)) | (1 << (SqlBaseParser.NFD - 96)) | (1 << (SqlBaseParser.NFKC - 96)) | (1 << (SqlBaseParser.NFKD - 96)) | (1 << (SqlBaseParser.NO - 96)) | (1 << (SqlBaseParser.NONE - 96)) | (1 << (SqlBaseParser.NULLIF - 96)) | (1 << (SqlBaseParser.NULLS - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.OFFSET - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.ORDINALITY - 128)) | (1 << (SqlBaseParser.OUTPUT - 128)) | (1 << (SqlBaseParser.OVER - 128)) | (1 << (SqlBaseParser.PARTITION - 128)) | (1 << (SqlBaseParser.PARTITIONS - 128)) | (1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.PRECEDING - 128)) | (1 << (SqlBaseParser.PRIVILEGES - 128)) | (1 << (SqlBaseParser.PROPERTIES - 128)) | (1 << (SqlBaseParser.RANGE - 128)) | (1 << (SqlBaseParser.READ - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.RENAME - 128)) | (1 << (SqlBaseParser.REPEATABLE - 128)) | (1 << (SqlBaseParser.REPLACE - 128)) | (1 << (SqlBaseParser.RESET - 128)) | (1 << (SqlBaseParser.RESPECT - 128)) | (1 << (SqlBaseParser.RESTRICT - 128)) | (1 << (SqlBaseParser.RETURN - 128)) | (1 << (SqlBaseParser.RETURNS - 128)) | (1 << (SqlBaseParser.REVOKE - 128)) | (1 << (SqlBaseParser.ROLE - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.ROLES - 160)) | (1 << (SqlBaseParser.ROLLBACK - 160)) | (1 << (SqlBaseParser.ROW - 160)) | (1 << (SqlBaseParser.ROWS - 160)) | (1 << (SqlBaseParser.SCHEMA - 160)) | (1 << (SqlBaseParser.SCHEMAS - 160)) | (1 << (SqlBaseParser.SECOND - 160)) | (1 << (SqlBaseParser.SECURITY - 160)) | (1 << (SqlBaseParser.SERIALIZABLE - 160)) | (1 << (SqlBaseParser.SESSION - 160)) | (1 << (SqlBaseParser.SET - 160)) | (1 << (SqlBaseParser.SETS - 160)) | (1 << (SqlBaseParser.SHOW - 160)) | (1 << (SqlBaseParser.SOME - 160)) | (1 << (SqlBaseParser.SQL - 160)) | (1 << (SqlBaseParser.START - 160)) | (1 << (SqlBaseParser.STATS - 160)) | (1 << (SqlBaseParser.SUBSTRING - 160)) | (1 << (SqlBaseParser.SYSTEM - 160)) | (1 << (SqlBaseParser.TABLES - 160)) | (1 << (SqlBaseParser.TABLESAMPLE - 160)) | (1 << (SqlBaseParser.TEMPORARY - 160)) | (1 << (SqlBaseParser.TEXT - 160)) | (1 << (SqlBaseParser.TIME - 160)) | (1 << (SqlBaseParser.TIMESTAMP - 160)) | (1 << (SqlBaseParser.TO - 160)) | (1 << (SqlBaseParser.TRANSACTION - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.TRY_CAST - 192)) | (1 << (SqlBaseParser.TYPE - 192)) | (1 << (SqlBaseParser.UNBOUNDED - 192)) | (1 << (SqlBaseParser.UNCOMMITTED - 192)) | (1 << (SqlBaseParser.USE - 192)) | (1 << (SqlBaseParser.USER - 192)) | (1 << (SqlBaseParser.VALIDATE - 192)) | (1 << (SqlBaseParser.VERBOSE - 192)) | (1 << (SqlBaseParser.VIEW - 192)) | (1 << (SqlBaseParser.WORK - 192)) | (1 << (SqlBaseParser.WRITE - 192)) | (1 << (SqlBaseParser.YEAR - 192)) | (1 << (SqlBaseParser.ZONE - 192)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SqlBaseParser.EOF = antlr4.Token.EOF;
SqlBaseParser.T__0 = 1;
SqlBaseParser.T__1 = 2;
SqlBaseParser.T__2 = 3;
SqlBaseParser.T__3 = 4;
SqlBaseParser.T__4 = 5;
SqlBaseParser.T__5 = 6;
SqlBaseParser.T__6 = 7;
SqlBaseParser.T__7 = 8;
SqlBaseParser.T__8 = 9;
SqlBaseParser.ADD = 10;
SqlBaseParser.ADMIN = 11;
SqlBaseParser.ALL = 12;
SqlBaseParser.ALTER = 13;
SqlBaseParser.ANALYZE = 14;
SqlBaseParser.AND = 15;
SqlBaseParser.ANY = 16;
SqlBaseParser.ARRAY = 17;
SqlBaseParser.AS = 18;
SqlBaseParser.ASC = 19;
SqlBaseParser.AT = 20;
SqlBaseParser.BERNOULLI = 21;
SqlBaseParser.BETWEEN = 22;
SqlBaseParser.BY = 23;
SqlBaseParser.CALL = 24;
SqlBaseParser.CALLED = 25;
SqlBaseParser.CASCADE = 26;
SqlBaseParser.CASE = 27;
SqlBaseParser.CAST = 28;
SqlBaseParser.CATALOGS = 29;
SqlBaseParser.COLUMN = 30;
SqlBaseParser.COLUMNS = 31;
SqlBaseParser.COMMENT = 32;
SqlBaseParser.COMMIT = 33;
SqlBaseParser.COMMITTED = 34;
SqlBaseParser.CONSTRAINT = 35;
SqlBaseParser.CREATE = 36;
SqlBaseParser.CROSS = 37;
SqlBaseParser.CUBE = 38;
SqlBaseParser.CURRENT = 39;
SqlBaseParser.CURRENT_DATE = 40;
SqlBaseParser.CURRENT_ROLE = 41;
SqlBaseParser.CURRENT_TIME = 42;
SqlBaseParser.CURRENT_TIMESTAMP = 43;
SqlBaseParser.CURRENT_USER = 44;
SqlBaseParser.DATA = 45;
SqlBaseParser.DATE = 46;
SqlBaseParser.DAY = 47;
SqlBaseParser.DEALLOCATE = 48;
SqlBaseParser.DEFINER = 49;
SqlBaseParser.DELETE = 50;
SqlBaseParser.DESC = 51;
SqlBaseParser.DESCRIBE = 52;
SqlBaseParser.DETERMINISTIC = 53;
SqlBaseParser.DISTINCT = 54;
SqlBaseParser.DISTRIBUTED = 55;
SqlBaseParser.DROP = 56;
SqlBaseParser.ELSE = 57;
SqlBaseParser.END = 58;
SqlBaseParser.ESCAPE = 59;
SqlBaseParser.EXCEPT = 60;
SqlBaseParser.EXCLUDING = 61;
SqlBaseParser.EXECUTE = 62;
SqlBaseParser.EXISTS = 63;
SqlBaseParser.EXPLAIN = 64;
SqlBaseParser.EXTRACT = 65;
SqlBaseParser.EXTERNAL = 66;
SqlBaseParser.FALSE = 67;
SqlBaseParser.FILTER = 68;
SqlBaseParser.FIRST = 69;
SqlBaseParser.FOLLOWING = 70;
SqlBaseParser.FOR = 71;
SqlBaseParser.FORMAT = 72;
SqlBaseParser.FROM = 73;
SqlBaseParser.FULL = 74;
SqlBaseParser.FUNCTION = 75;
SqlBaseParser.FUNCTIONS = 76;
SqlBaseParser.GRANT = 77;
SqlBaseParser.GRANTED = 78;
SqlBaseParser.GRANTS = 79;
SqlBaseParser.GRAPHVIZ = 80;
SqlBaseParser.GROUP = 81;
SqlBaseParser.GROUPING = 82;
SqlBaseParser.HAVING = 83;
SqlBaseParser.HOUR = 84;
SqlBaseParser.IF = 85;
SqlBaseParser.IGNORE = 86;
SqlBaseParser.IN = 87;
SqlBaseParser.INCLUDING = 88;
SqlBaseParser.INNER = 89;
SqlBaseParser.INPUT = 90;
SqlBaseParser.INSERT = 91;
SqlBaseParser.INTERSECT = 92;
SqlBaseParser.INTERVAL = 93;
SqlBaseParser.INTO = 94;
SqlBaseParser.INVOKER = 95;
SqlBaseParser.IO = 96;
SqlBaseParser.IS = 97;
SqlBaseParser.ISOLATION = 98;
SqlBaseParser.JSON = 99;
SqlBaseParser.JOIN = 100;
SqlBaseParser.LANGUAGE = 101;
SqlBaseParser.LAST = 102;
SqlBaseParser.LATERAL = 103;
SqlBaseParser.LEFT = 104;
SqlBaseParser.LEVEL = 105;
SqlBaseParser.LIKE = 106;
SqlBaseParser.LIMIT = 107;
SqlBaseParser.LOCALTIME = 108;
SqlBaseParser.LOCALTIMESTAMP = 109;
SqlBaseParser.LOGICAL = 110;
SqlBaseParser.MAP = 111;
SqlBaseParser.MATERIALIZED = 112;
SqlBaseParser.MINUTE = 113;
SqlBaseParser.MONTH = 114;
SqlBaseParser.NAME = 115;
SqlBaseParser.NATURAL = 116;
SqlBaseParser.NFC = 117;
SqlBaseParser.NFD = 118;
SqlBaseParser.NFKC = 119;
SqlBaseParser.NFKD = 120;
SqlBaseParser.NO = 121;
SqlBaseParser.NONE = 122;
SqlBaseParser.NORMALIZE = 123;
SqlBaseParser.NOT = 124;
SqlBaseParser.NULL = 125;
SqlBaseParser.NULLIF = 126;
SqlBaseParser.NULLS = 127;
SqlBaseParser.OFFSET = 128;
SqlBaseParser.ON = 129;
SqlBaseParser.ONLY = 130;
SqlBaseParser.OPTION = 131;
SqlBaseParser.OR = 132;
SqlBaseParser.ORDER = 133;
SqlBaseParser.ORDINALITY = 134;
SqlBaseParser.OUTER = 135;
SqlBaseParser.OUTPUT = 136;
SqlBaseParser.OVER = 137;
SqlBaseParser.PARTITION = 138;
SqlBaseParser.PARTITIONS = 139;
SqlBaseParser.POSITION = 140;
SqlBaseParser.PRECEDING = 141;
SqlBaseParser.PREPARE = 142;
SqlBaseParser.PRIVILEGES = 143;
SqlBaseParser.PROPERTIES = 144;
SqlBaseParser.RANGE = 145;
SqlBaseParser.READ = 146;
SqlBaseParser.RECURSIVE = 147;
SqlBaseParser.REFRESH = 148;
SqlBaseParser.RENAME = 149;
SqlBaseParser.REPEATABLE = 150;
SqlBaseParser.REPLACE = 151;
SqlBaseParser.RESET = 152;
SqlBaseParser.RESPECT = 153;
SqlBaseParser.RESTRICT = 154;
SqlBaseParser.RETURN = 155;
SqlBaseParser.RETURNS = 156;
SqlBaseParser.REVOKE = 157;
SqlBaseParser.RIGHT = 158;
SqlBaseParser.ROLE = 159;
SqlBaseParser.ROLES = 160;
SqlBaseParser.ROLLBACK = 161;
SqlBaseParser.ROLLUP = 162;
SqlBaseParser.ROW = 163;
SqlBaseParser.ROWS = 164;
SqlBaseParser.SCHEMA = 165;
SqlBaseParser.SCHEMAS = 166;
SqlBaseParser.SECOND = 167;
SqlBaseParser.SECURITY = 168;
SqlBaseParser.SELECT = 169;
SqlBaseParser.SERIALIZABLE = 170;
SqlBaseParser.SESSION = 171;
SqlBaseParser.SET = 172;
SqlBaseParser.SETS = 173;
SqlBaseParser.SHOW = 174;
SqlBaseParser.SOME = 175;
SqlBaseParser.SQL = 176;
SqlBaseParser.START = 177;
SqlBaseParser.STATS = 178;
SqlBaseParser.SUBSTRING = 179;
SqlBaseParser.SYSTEM = 180;
SqlBaseParser.TABLE = 181;
SqlBaseParser.TABLES = 182;
SqlBaseParser.TABLESAMPLE = 183;
SqlBaseParser.TEMPORARY = 184;
SqlBaseParser.TEXT = 185;
SqlBaseParser.THEN = 186;
SqlBaseParser.TIME = 187;
SqlBaseParser.TIMESTAMP = 188;
SqlBaseParser.TO = 189;
SqlBaseParser.TRANSACTION = 190;
SqlBaseParser.TRUE = 191;
SqlBaseParser.TRY_CAST = 192;
SqlBaseParser.TYPE = 193;
SqlBaseParser.UESCAPE = 194;
SqlBaseParser.UNBOUNDED = 195;
SqlBaseParser.UNCOMMITTED = 196;
SqlBaseParser.UNION = 197;
SqlBaseParser.UNNEST = 198;
SqlBaseParser.USE = 199;
SqlBaseParser.USER = 200;
SqlBaseParser.USING = 201;
SqlBaseParser.VALIDATE = 202;
SqlBaseParser.VALUES = 203;
SqlBaseParser.VERBOSE = 204;
SqlBaseParser.VIEW = 205;
SqlBaseParser.WHEN = 206;
SqlBaseParser.WHERE = 207;
SqlBaseParser.WITH = 208;
SqlBaseParser.WORK = 209;
SqlBaseParser.WRITE = 210;
SqlBaseParser.YEAR = 211;
SqlBaseParser.ZONE = 212;
SqlBaseParser.EQ = 213;
SqlBaseParser.NEQ = 214;
SqlBaseParser.LT = 215;
SqlBaseParser.LTE = 216;
SqlBaseParser.GT = 217;
SqlBaseParser.GTE = 218;
SqlBaseParser.PLUS = 219;
SqlBaseParser.MINUS = 220;
SqlBaseParser.ASTERISK = 221;
SqlBaseParser.SLASH = 222;
SqlBaseParser.PERCENT = 223;
SqlBaseParser.CONCAT = 224;
SqlBaseParser.STRING = 225;
SqlBaseParser.UNICODE_STRING = 226;
SqlBaseParser.BINARY_LITERAL = 227;
SqlBaseParser.INTEGER_VALUE = 228;
SqlBaseParser.DECIMAL_VALUE = 229;
SqlBaseParser.DOUBLE_VALUE = 230;
SqlBaseParser.IDENTIFIER = 231;
SqlBaseParser.DIGIT_IDENTIFIER = 232;
SqlBaseParser.QUOTED_IDENTIFIER = 233;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 234;
SqlBaseParser.TIME_WITH_TIME_ZONE = 235;
SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE = 236;
SqlBaseParser.DOUBLE_PRECISION = 237;
SqlBaseParser.SIMPLE_COMMENT = 238;
SqlBaseParser.BRACKETED_COMMENT = 239;
SqlBaseParser.WS = 240;
SqlBaseParser.UNRECOGNIZED = 241;
SqlBaseParser.DELIMITER = 242;

SqlBaseParser.RULE_singleStatement = 0;
SqlBaseParser.RULE_standaloneExpression = 1;
SqlBaseParser.RULE_standaloneRoutineBody = 2;
SqlBaseParser.RULE_statement = 3;
SqlBaseParser.RULE_query = 4;
SqlBaseParser.RULE_with = 5;
SqlBaseParser.RULE_tableElement = 6;
SqlBaseParser.RULE_columnDefinition = 7;
SqlBaseParser.RULE_likeClause = 8;
SqlBaseParser.RULE_properties = 9;
SqlBaseParser.RULE_property = 10;
SqlBaseParser.RULE_sqlParameterDeclaration = 11;
SqlBaseParser.RULE_routineCharacteristics = 12;
SqlBaseParser.RULE_routineCharacteristic = 13;
SqlBaseParser.RULE_alterRoutineCharacteristics = 14;
SqlBaseParser.RULE_alterRoutineCharacteristic = 15;
SqlBaseParser.RULE_routineBody = 16;
SqlBaseParser.RULE_returnStatement = 17;
SqlBaseParser.RULE_externalBodyReference = 18;
SqlBaseParser.RULE_language = 19;
SqlBaseParser.RULE_determinism = 20;
SqlBaseParser.RULE_nullCallClause = 21;
SqlBaseParser.RULE_externalRoutineName = 22;
SqlBaseParser.RULE_queryNoWith = 23;
SqlBaseParser.RULE_queryTerm = 24;
SqlBaseParser.RULE_queryPrimary = 25;
SqlBaseParser.RULE_sortItem = 26;
SqlBaseParser.RULE_querySpecification = 27;
SqlBaseParser.RULE_groupBy = 28;
SqlBaseParser.RULE_groupingElement = 29;
SqlBaseParser.RULE_groupingSet = 30;
SqlBaseParser.RULE_namedQuery = 31;
SqlBaseParser.RULE_setQuantifier = 32;
SqlBaseParser.RULE_selectItem = 33;
SqlBaseParser.RULE_relation = 34;
SqlBaseParser.RULE_joinType = 35;
SqlBaseParser.RULE_joinCriteria = 36;
SqlBaseParser.RULE_sampledRelation = 37;
SqlBaseParser.RULE_sampleType = 38;
SqlBaseParser.RULE_aliasedRelation = 39;
SqlBaseParser.RULE_columnAliases = 40;
SqlBaseParser.RULE_relationPrimary = 41;
SqlBaseParser.RULE_expression = 42;
SqlBaseParser.RULE_booleanExpression = 43;
SqlBaseParser.RULE_predicate = 44;
SqlBaseParser.RULE_valueExpression = 45;
SqlBaseParser.RULE_primaryExpression = 46;
SqlBaseParser.RULE_string = 47;
SqlBaseParser.RULE_nullTreatment = 48;
SqlBaseParser.RULE_timeZoneSpecifier = 49;
SqlBaseParser.RULE_comparisonOperator = 50;
SqlBaseParser.RULE_comparisonQuantifier = 51;
SqlBaseParser.RULE_booleanValue = 52;
SqlBaseParser.RULE_interval = 53;
SqlBaseParser.RULE_intervalField = 54;
SqlBaseParser.RULE_normalForm = 55;
SqlBaseParser.RULE_types = 56;
SqlBaseParser.RULE_type = 57;
SqlBaseParser.RULE_typeParameter = 58;
SqlBaseParser.RULE_baseType = 59;
SqlBaseParser.RULE_whenClause = 60;
SqlBaseParser.RULE_filter = 61;
SqlBaseParser.RULE_over = 62;
SqlBaseParser.RULE_windowFrame = 63;
SqlBaseParser.RULE_frameBound = 64;
SqlBaseParser.RULE_explainOption = 65;
SqlBaseParser.RULE_transactionMode = 66;
SqlBaseParser.RULE_levelOfIsolation = 67;
SqlBaseParser.RULE_callArgument = 68;
SqlBaseParser.RULE_privilege = 69;
SqlBaseParser.RULE_qualifiedName = 70;
SqlBaseParser.RULE_grantor = 71;
SqlBaseParser.RULE_principal = 72;
SqlBaseParser.RULE_roles = 73;
SqlBaseParser.RULE_identifier = 74;
SqlBaseParser.RULE_number = 75;
SqlBaseParser.RULE_nonReserved = 76;

class SingleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSingleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSingleStatement(this);
		}
	}


}



class StandaloneExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_standaloneExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStandaloneExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStandaloneExpression(this);
		}
	}


}



class StandaloneRoutineBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_standaloneRoutineBody;
    }

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStandaloneRoutineBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStandaloneRoutineBody(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplainContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXPLAIN() {
	    return this.getToken(SqlBaseParser.EXPLAIN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	VERBOSE() {
	    return this.getToken(SqlBaseParser.VERBOSE, 0);
	};

	explainOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExplainOptionContext);
	    } else {
	        return this.getTypedRuleContext(ExplainOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExplain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExplain(this);
		}
	}


}

SqlBaseParser.ExplainContext = ExplainContext;

class PrepareContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PREPARE() {
	    return this.getToken(SqlBaseParser.PREPARE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPrepare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPrepare(this);
		}
	}


}

SqlBaseParser.PrepareContext = PrepareContext;

class DropMaterializedViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropMaterializedView(this);
		}
	}


}

SqlBaseParser.DropMaterializedViewContext = DropMaterializedViewContext;

class UseContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.schema = null; // IdentifierContext;
        this.catalog = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	USE() {
	    return this.getToken(SqlBaseParser.USE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUse(this);
		}
	}


}

SqlBaseParser.UseContext = UseContext;

class DeallocateContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DEALLOCATE() {
	    return this.getToken(SqlBaseParser.DEALLOCATE, 0);
	};

	PREPARE() {
	    return this.getToken(SqlBaseParser.PREPARE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDeallocate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDeallocate(this);
		}
	}


}

SqlBaseParser.DeallocateContext = DeallocateContext;

class RenameTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.from = null; // QualifiedNameContext;
        this.to = null; // QualifiedNameContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRenameTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRenameTable(this);
		}
	}


}

SqlBaseParser.RenameTableContext = RenameTableContext;

class CommitContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMIT() {
	    return this.getToken(SqlBaseParser.COMMIT, 0);
	};

	WORK() {
	    return this.getToken(SqlBaseParser.WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCommit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCommit(this);
		}
	}


}

SqlBaseParser.CommitContext = CommitContext;

class CreateRoleContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	ADMIN() {
	    return this.getToken(SqlBaseParser.ADMIN, 0);
	};

	grantor() {
	    return this.getTypedRuleContext(GrantorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateRole(this);
		}
	}


}

SqlBaseParser.CreateRoleContext = CreateRoleContext;

class ShowCreateFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	types() {
	    return this.getTypedRuleContext(TypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCreateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCreateFunction(this);
		}
	}


}

SqlBaseParser.ShowCreateFunctionContext = ShowCreateFunctionContext;

class DropColumnContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null; // QualifiedNameContext;
        this.column = null; // QualifiedNameContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.IF);
	    } else {
	        return this.getToken(SqlBaseParser.IF, i);
	    }
	};


	EXISTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.EXISTS);
	    } else {
	        return this.getToken(SqlBaseParser.EXISTS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropColumn(this);
		}
	}


}

SqlBaseParser.DropColumnContext = DropColumnContext;

class DropViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropView(this);
		}
	}


}

SqlBaseParser.DropViewContext = DropViewContext;

class ShowTablesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null; // StringContext;
        this.escape = null; // StringContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowTables(this);
		}
	}


}

SqlBaseParser.ShowTablesContext = ShowTablesContext;

class ShowCatalogsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null; // StringContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CATALOGS() {
	    return this.getToken(SqlBaseParser.CATALOGS, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCatalogs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCatalogs(this);
		}
	}


}

SqlBaseParser.ShowCatalogsContext = ShowCatalogsContext;

class ShowRolesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	ROLES() {
	    return this.getToken(SqlBaseParser.ROLES, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowRoles(this);
		}
	}


}

SqlBaseParser.ShowRolesContext = ShowRolesContext;

class RenameColumnContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null; // QualifiedNameContext;
        this.from = null; // IdentifierContext;
        this.to = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.IF);
	    } else {
	        return this.getToken(SqlBaseParser.IF, i);
	    }
	};


	EXISTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.EXISTS);
	    } else {
	        return this.getToken(SqlBaseParser.EXISTS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRenameColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRenameColumn(this);
		}
	}


}

SqlBaseParser.RenameColumnContext = RenameColumnContext;

class RevokeRolesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	roles() {
	    return this.getTypedRuleContext(RolesContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	principal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrincipalContext);
	    } else {
	        return this.getTypedRuleContext(PrincipalContext,i);
	    }
	};

	ADMIN() {
	    return this.getToken(SqlBaseParser.ADMIN, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	GRANTED() {
	    return this.getToken(SqlBaseParser.GRANTED, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	grantor() {
	    return this.getTypedRuleContext(GrantorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRevokeRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRevokeRoles(this);
		}
	}


}

SqlBaseParser.RevokeRolesContext = RevokeRolesContext;

class ShowCreateTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCreateTable(this);
		}
	}


}

SqlBaseParser.ShowCreateTableContext = ShowCreateTableContext;

class ShowColumnsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowColumns(this);
		}
	}


}

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

class ShowRoleGrantsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	GRANTS() {
	    return this.getToken(SqlBaseParser.GRANTS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowRoleGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowRoleGrants(this);
		}
	}


}

SqlBaseParser.ShowRoleGrantsContext = ShowRoleGrantsContext;

class AddColumnContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.tableName = null; // QualifiedNameContext;
        this.column = null; // ColumnDefinitionContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.IF);
	    } else {
	        return this.getToken(SqlBaseParser.IF, i);
	    }
	};


	EXISTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.EXISTS);
	    } else {
	        return this.getToken(SqlBaseParser.EXISTS, i);
	    }
	};


	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAddColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAddColumn(this);
		}
	}


}

SqlBaseParser.AddColumnContext = AddColumnContext;

class ResetSessionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterResetSession(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitResetSession(this);
		}
	}


}

SqlBaseParser.ResetSessionContext = ResetSessionContext;

class InsertIntoContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInsertInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInsertInto(this);
		}
	}


}

SqlBaseParser.InsertIntoContext = InsertIntoContext;

class ShowSessionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowSession(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowSession(this);
		}
	}


}

SqlBaseParser.ShowSessionContext = ShowSessionContext;

class CreateSchemaContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateSchema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateSchema(this);
		}
	}


}

SqlBaseParser.CreateSchemaContext = CreateSchemaContext;

class ExecuteContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXECUTE() {
	    return this.getToken(SqlBaseParser.EXECUTE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExecute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExecute(this);
		}
	}


}

SqlBaseParser.ExecuteContext = ExecuteContext;

class RenameSchemaContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRenameSchema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRenameSchema(this);
		}
	}


}

SqlBaseParser.RenameSchemaContext = RenameSchemaContext;

class DropRoleContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropRole(this);
		}
	}


}

SqlBaseParser.DropRoleContext = DropRoleContext;

class AnalyzeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAnalyze(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAnalyze(this);
		}
	}


}

SqlBaseParser.AnalyzeContext = AnalyzeContext;

class SetRoleContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.role = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	NONE() {
	    return this.getToken(SqlBaseParser.NONE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSetRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSetRole(this);
		}
	}


}

SqlBaseParser.SetRoleContext = SetRoleContext;

class CreateFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.functionName = null; // QualifiedNameContext;
        this.returnType = null; // TypeContext;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	RETURNS() {
	    return this.getToken(SqlBaseParser.RETURNS, 0);
	};

	routineCharacteristics() {
	    return this.getTypedRuleContext(RoutineCharacteristicsContext,0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	sqlParameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(SqlParameterDeclarationContext,i);
	    }
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateFunction(this);
		}
	}


}

SqlBaseParser.CreateFunctionContext = CreateFunctionContext;

class ShowGrantsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	GRANTS() {
	    return this.getToken(SqlBaseParser.GRANTS, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowGrants(this);
		}
	}


}

SqlBaseParser.ShowGrantsContext = ShowGrantsContext;

class DropSchemaContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropSchema(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropSchema(this);
		}
	}


}

SqlBaseParser.DropSchemaContext = DropSchemaContext;

class ShowCreateViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCreateView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCreateView(this);
		}
	}


}

SqlBaseParser.ShowCreateViewContext = ShowCreateViewContext;

class CreateTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	tableElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableElementContext);
	    } else {
	        return this.getTypedRuleContext(TableElementContext,i);
	    }
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateTable(this);
		}
	}


}

SqlBaseParser.CreateTableContext = CreateTableContext;

class StartTransactionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStartTransaction(this);
		}
	}


}

SqlBaseParser.StartTransactionContext = StartTransactionContext;

class CreateTableAsSelectContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.WITH);
	    } else {
	        return this.getToken(SqlBaseParser.WITH, i);
	    }
	};


	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	DATA() {
	    return this.getToken(SqlBaseParser.DATA, 0);
	};

	NO() {
	    return this.getToken(SqlBaseParser.NO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateTableAsSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateTableAsSelect(this);
		}
	}


}

SqlBaseParser.CreateTableAsSelectContext = CreateTableAsSelectContext;

class ShowStatsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	STATS() {
	    return this.getToken(SqlBaseParser.STATS, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowStats(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowStats(this);
		}
	}


}

SqlBaseParser.ShowStatsContext = ShowStatsContext;

class DropFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	types() {
	    return this.getTypedRuleContext(TypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropFunction(this);
		}
	}


}

SqlBaseParser.DropFunctionContext = DropFunctionContext;

class RevokeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.grantee = null; // PrincipalContext;
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	principal() {
	    return this.getTypedRuleContext(PrincipalContext,0);
	};

	privilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivilegeContext);
	    } else {
	        return this.getTypedRuleContext(PrivilegeContext,i);
	    }
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	GRANT() {
	    return this.getToken(SqlBaseParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRevoke(this);
		}
	}


}

SqlBaseParser.RevokeContext = RevokeContext;

class CreateTypeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	sqlParameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(SqlParameterDeclarationContext,i);
	    }
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateType(this);
		}
	}


}

SqlBaseParser.CreateTypeContext = CreateTypeContext;

class DeleteContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDelete(this);
		}
	}


}

SqlBaseParser.DeleteContext = DeleteContext;

class DescribeInputContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	INPUT() {
	    return this.getToken(SqlBaseParser.INPUT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDescribeInput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDescribeInput(this);
		}
	}


}

SqlBaseParser.DescribeInputContext = DescribeInputContext;

class ShowStatsForQueryContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	STATS() {
	    return this.getToken(SqlBaseParser.STATS, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowStatsForQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowStatsForQuery(this);
		}
	}


}

SqlBaseParser.ShowStatsForQueryContext = ShowStatsForQueryContext;

class StatementDefaultContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStatementDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStatementDefault(this);
		}
	}


}

SqlBaseParser.StatementDefaultContext = StatementDefaultContext;

class CreateMaterializedViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateMaterializedView(this);
		}
	}


}

SqlBaseParser.CreateMaterializedViewContext = CreateMaterializedViewContext;

class AlterFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	alterRoutineCharacteristics() {
	    return this.getTypedRuleContext(AlterRoutineCharacteristicsContext,0);
	};

	types() {
	    return this.getTypedRuleContext(TypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAlterFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAlterFunction(this);
		}
	}


}

SqlBaseParser.AlterFunctionContext = AlterFunctionContext;

class SetSessionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSetSession(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSetSession(this);
		}
	}


}

SqlBaseParser.SetSessionContext = SetSessionContext;

class CreateViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	SECURITY() {
	    return this.getToken(SqlBaseParser.SECURITY, 0);
	};

	DEFINER() {
	    return this.getToken(SqlBaseParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(SqlBaseParser.INVOKER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCreateView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCreateView(this);
		}
	}


}

SqlBaseParser.CreateViewContext = CreateViewContext;

class ShowSchemasContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null; // StringContext;
        this.escape = null; // StringContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SCHEMAS() {
	    return this.getToken(SqlBaseParser.SCHEMAS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowSchemas(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowSchemas(this);
		}
	}


}

SqlBaseParser.ShowSchemasContext = ShowSchemasContext;

class DropTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDropTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDropTable(this);
		}
	}


}

SqlBaseParser.DropTableContext = DropTableContext;

class RollbackContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROLLBACK() {
	    return this.getToken(SqlBaseParser.ROLLBACK, 0);
	};

	WORK() {
	    return this.getToken(SqlBaseParser.WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRollback(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRollback(this);
		}
	}


}

SqlBaseParser.RollbackContext = RollbackContext;

class GrantRolesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRANT() {
	    return this.getToken(SqlBaseParser.GRANT, 0);
	};

	roles() {
	    return this.getTypedRuleContext(RolesContext,0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	principal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrincipalContext);
	    } else {
	        return this.getTypedRuleContext(PrincipalContext,i);
	    }
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	ADMIN() {
	    return this.getToken(SqlBaseParser.ADMIN, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	GRANTED() {
	    return this.getToken(SqlBaseParser.GRANTED, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	grantor() {
	    return this.getTypedRuleContext(GrantorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGrantRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGrantRoles(this);
		}
	}


}

SqlBaseParser.GrantRolesContext = GrantRolesContext;

class CallContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CALL() {
	    return this.getToken(SqlBaseParser.CALL, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	callArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CallArgumentContext);
	    } else {
	        return this.getTypedRuleContext(CallArgumentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCall(this);
		}
	}


}

SqlBaseParser.CallContext = CallContext;

class RefreshMaterializedViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRefreshMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRefreshMaterializedView(this);
		}
	}


}

SqlBaseParser.RefreshMaterializedViewContext = RefreshMaterializedViewContext;

class ShowCreateMaterializedViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowCreateMaterializedView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowCreateMaterializedView(this);
		}
	}


}

SqlBaseParser.ShowCreateMaterializedViewContext = ShowCreateMaterializedViewContext;

class ShowFunctionsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null; // StringContext;
        this.escape = null; // StringContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterShowFunctions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitShowFunctions(this);
		}
	}


}

SqlBaseParser.ShowFunctionsContext = ShowFunctionsContext;

class DescribeOutputContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	OUTPUT() {
	    return this.getToken(SqlBaseParser.OUTPUT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDescribeOutput(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDescribeOutput(this);
		}
	}


}

SqlBaseParser.DescribeOutputContext = DescribeOutputContext;

class GrantContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.grantee = null; // PrincipalContext;
        super.copyFrom(ctx);
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.GRANT);
	    } else {
	        return this.getToken(SqlBaseParser.GRANT, i);
	    }
	};


	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	principal() {
	    return this.getTypedRuleContext(PrincipalContext,0);
	};

	privilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivilegeContext);
	    } else {
	        return this.getTypedRuleContext(PrivilegeContext,i);
	    }
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGrant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGrant(this);
		}
	}


}

SqlBaseParser.GrantContext = GrantContext;

class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_query;
    }

	queryNoWith() {
	    return this.getTypedRuleContext(QueryNoWithContext,0);
	};

	with() {
	    return this.getTypedRuleContext(WithContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQuery(this);
		}
	}


}



class WithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_with;
    }

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	namedQuery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedQueryContext);
	    } else {
	        return this.getTypedRuleContext(NamedQueryContext,i);
	    }
	};

	RECURSIVE() {
	    return this.getToken(SqlBaseParser.RECURSIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitWith(this);
		}
	}


}



class TableElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableElement;
    }

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	likeClause() {
	    return this.getTypedRuleContext(LikeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableElement(this);
		}
	}


}



class ColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columnDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitColumnDefinition(this);
		}
	}


}



class LikeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_likeClause;
        this.optionType = null; // Token
    }

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	PROPERTIES() {
	    return this.getToken(SqlBaseParser.PROPERTIES, 0);
	};

	INCLUDING() {
	    return this.getToken(SqlBaseParser.INCLUDING, 0);
	};

	EXCLUDING() {
	    return this.getToken(SqlBaseParser.EXCLUDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLikeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLikeClause(this);
		}
	}


}



class PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_properties;
    }

	property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyContext);
	    } else {
	        return this.getTypedRuleContext(PropertyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitProperties(this);
		}
	}


}



class PropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_property;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitProperty(this);
		}
	}


}



class SqlParameterDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sqlParameterDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSqlParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSqlParameterDeclaration(this);
		}
	}


}



class RoutineCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_routineCharacteristics;
    }

	routineCharacteristic = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineCharacteristicContext);
	    } else {
	        return this.getTypedRuleContext(RoutineCharacteristicContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRoutineCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRoutineCharacteristics(this);
		}
	}


}



class RoutineCharacteristicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_routineCharacteristic;
    }

	LANGUAGE() {
	    return this.getToken(SqlBaseParser.LANGUAGE, 0);
	};

	language() {
	    return this.getTypedRuleContext(LanguageContext,0);
	};

	determinism() {
	    return this.getTypedRuleContext(DeterminismContext,0);
	};

	nullCallClause() {
	    return this.getTypedRuleContext(NullCallClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRoutineCharacteristic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRoutineCharacteristic(this);
		}
	}


}



class AlterRoutineCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_alterRoutineCharacteristics;
    }

	alterRoutineCharacteristic = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterRoutineCharacteristicContext);
	    } else {
	        return this.getTypedRuleContext(AlterRoutineCharacteristicContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAlterRoutineCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAlterRoutineCharacteristics(this);
		}
	}


}



class AlterRoutineCharacteristicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_alterRoutineCharacteristic;
    }

	nullCallClause() {
	    return this.getTypedRuleContext(NullCallClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAlterRoutineCharacteristic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAlterRoutineCharacteristic(this);
		}
	}


}



class RoutineBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_routineBody;
    }

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	externalBodyReference() {
	    return this.getTypedRuleContext(ExternalBodyReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRoutineBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRoutineBody(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(SqlBaseParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ExternalBodyReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_externalBodyReference;
    }

	EXTERNAL() {
	    return this.getToken(SqlBaseParser.EXTERNAL, 0);
	};

	NAME() {
	    return this.getToken(SqlBaseParser.NAME, 0);
	};

	externalRoutineName() {
	    return this.getTypedRuleContext(ExternalRoutineNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExternalBodyReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExternalBodyReference(this);
		}
	}


}



class LanguageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_language;
    }

	SQL() {
	    return this.getToken(SqlBaseParser.SQL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLanguage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLanguage(this);
		}
	}


}



class DeterminismContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_determinism;
    }

	DETERMINISTIC() {
	    return this.getToken(SqlBaseParser.DETERMINISTIC, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDeterminism(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDeterminism(this);
		}
	}


}



class NullCallClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nullCallClause;
    }

	RETURNS() {
	    return this.getToken(SqlBaseParser.RETURNS, 0);
	};

	NULL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.NULL);
	    } else {
	        return this.getToken(SqlBaseParser.NULL, i);
	    }
	};


	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	INPUT() {
	    return this.getToken(SqlBaseParser.INPUT, 0);
	};

	CALLED() {
	    return this.getToken(SqlBaseParser.CALLED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNullCallClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNullCallClause(this);
		}
	}


}



class ExternalRoutineNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_externalRoutineName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExternalRoutineName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExternalRoutineName(this);
		}
	}


}



class QueryNoWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryNoWith;
        this.offset = null; // Token
        this.limit = null; // Token
    }

	queryTerm() {
	    return this.getTypedRuleContext(QueryTermContext,0);
	};

	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	OFFSET() {
	    return this.getToken(SqlBaseParser.OFFSET, 0);
	};

	LIMIT() {
	    return this.getToken(SqlBaseParser.LIMIT, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
	    }
	};


	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQueryNoWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQueryNoWith(this);
		}
	}


}



class QueryTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryTerm;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class QueryTermDefaultContext extends QueryTermContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	queryPrimary() {
	    return this.getTypedRuleContext(QueryPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQueryTermDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQueryTermDefault(this);
		}
	}


}

SqlBaseParser.QueryTermDefaultContext = QueryTermDefaultContext;

class SetOperationContext extends QueryTermContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // QueryTermContext;
        this.operator = null; // Token;
        this.right = null; // QueryTermContext;
        super.copyFrom(ctx);
    }

	queryTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryTermContext);
	    } else {
	        return this.getTypedRuleContext(QueryTermContext,i);
	    }
	};

	INTERSECT() {
	    return this.getToken(SqlBaseParser.INTERSECT, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	UNION() {
	    return this.getToken(SqlBaseParser.UNION, 0);
	};

	EXCEPT() {
	    return this.getToken(SqlBaseParser.EXCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSetOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSetOperation(this);
		}
	}


}

SqlBaseParser.SetOperationContext = SetOperationContext;

class QueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	queryNoWith() {
	    return this.getTypedRuleContext(QueryNoWithContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubquery(this);
		}
	}


}

SqlBaseParser.SubqueryContext = SubqueryContext;

class QueryPrimaryDefaultContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQueryPrimaryDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQueryPrimaryDefault(this);
		}
	}


}

SqlBaseParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;

class TableContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTable(this);
		}
	}


}

SqlBaseParser.TableContext = TableContext;

class InlineTableContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUES() {
	    return this.getToken(SqlBaseParser.VALUES, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInlineTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInlineTable(this);
		}
	}


}

SqlBaseParser.InlineTableContext = InlineTableContext;

class SortItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sortItem;
        this.ordering = null; // Token
        this.nullOrdering = null; // Token
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	ASC() {
	    return this.getToken(SqlBaseParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSortItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSortItem(this);
		}
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_querySpecification;
        this.where = null; // BooleanExpressionContext
        this.having = null; // BooleanExpressionContext
    }

	SELECT() {
	    return this.getToken(SqlBaseParser.SELECT, 0);
	};

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationContext);
	    } else {
	        return this.getTypedRuleContext(RelationContext,i);
	    }
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	GROUP() {
	    return this.getToken(SqlBaseParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	groupBy() {
	    return this.getTypedRuleContext(GroupByContext,0);
	};

	HAVING() {
	    return this.getToken(SqlBaseParser.HAVING, 0);
	};

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQuerySpecification(this);
		}
	}


}



class GroupByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_groupBy;
    }

	groupingElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingElementContext);
	    } else {
	        return this.getTypedRuleContext(GroupingElementContext,i);
	    }
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGroupBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGroupBy(this);
		}
	}


}



class GroupingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_groupingElement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MultipleGroupingSetsContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GROUPING() {
	    return this.getToken(SqlBaseParser.GROUPING, 0);
	};

	SETS() {
	    return this.getToken(SqlBaseParser.SETS, 0);
	};

	groupingSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingSetContext);
	    } else {
	        return this.getTypedRuleContext(GroupingSetContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterMultipleGroupingSets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitMultipleGroupingSets(this);
		}
	}


}

SqlBaseParser.MultipleGroupingSetsContext = MultipleGroupingSetsContext;

class SingleGroupingSetContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	groupingSet() {
	    return this.getTypedRuleContext(GroupingSetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSingleGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSingleGroupingSet(this);
		}
	}


}

SqlBaseParser.SingleGroupingSetContext = SingleGroupingSetContext;

class CubeContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CUBE() {
	    return this.getToken(SqlBaseParser.CUBE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCube(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCube(this);
		}
	}


}

SqlBaseParser.CubeContext = CubeContext;

class RollupContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROLLUP() {
	    return this.getToken(SqlBaseParser.ROLLUP, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRollup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRollup(this);
		}
	}


}

SqlBaseParser.RollupContext = RollupContext;

class GroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_groupingSet;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGroupingSet(this);
		}
	}


}



class NamedQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedQuery;
        this.name = null; // IdentifierContext
    }

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNamedQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNamedQuery(this);
		}
	}


}



class SetQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_setQuantifier;
    }

	DISTINCT() {
	    return this.getToken(SqlBaseParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSetQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSetQuantifier(this);
		}
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_selectItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectAllContext extends SelectItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSelectAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSelectAll(this);
		}
	}


}

SqlBaseParser.SelectAllContext = SelectAllContext;

class SelectSingleContext extends SelectItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSelectSingle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSelectSingle(this);
		}
	}


}

SqlBaseParser.SelectSingleContext = SelectSingleContext;

class RelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_relation;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RelationDefaultContext extends RelationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sampledRelation() {
	    return this.getTypedRuleContext(SampledRelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRelationDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRelationDefault(this);
		}
	}


}

SqlBaseParser.RelationDefaultContext = RelationDefaultContext;

class JoinRelationContext extends RelationContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // RelationContext;
        this.right = null; // SampledRelationContext;
        this.rightRelation = null; // RelationContext;
        super.copyFrom(ctx);
    }

	relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationContext);
	    } else {
	        return this.getTypedRuleContext(RelationContext,i);
	    }
	};

	CROSS() {
	    return this.getToken(SqlBaseParser.CROSS, 0);
	};

	JOIN() {
	    return this.getToken(SqlBaseParser.JOIN, 0);
	};

	joinType() {
	    return this.getTypedRuleContext(JoinTypeContext,0);
	};

	joinCriteria() {
	    return this.getTypedRuleContext(JoinCriteriaContext,0);
	};

	NATURAL() {
	    return this.getToken(SqlBaseParser.NATURAL, 0);
	};

	sampledRelation() {
	    return this.getTypedRuleContext(SampledRelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterJoinRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitJoinRelation(this);
		}
	}


}

SqlBaseParser.JoinRelationContext = JoinRelationContext;

class JoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_joinType;
    }

	INNER() {
	    return this.getToken(SqlBaseParser.INNER, 0);
	};

	LEFT() {
	    return this.getToken(SqlBaseParser.LEFT, 0);
	};

	OUTER() {
	    return this.getToken(SqlBaseParser.OUTER, 0);
	};

	RIGHT() {
	    return this.getToken(SqlBaseParser.RIGHT, 0);
	};

	FULL() {
	    return this.getToken(SqlBaseParser.FULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterJoinType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitJoinType(this);
		}
	}


}



class JoinCriteriaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    }

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterJoinCriteria(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitJoinCriteria(this);
		}
	}


}



class SampledRelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sampledRelation;
        this.percentage = null; // ExpressionContext
    }

	aliasedRelation() {
	    return this.getTypedRuleContext(AliasedRelationContext,0);
	};

	TABLESAMPLE() {
	    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
	};

	sampleType() {
	    return this.getTypedRuleContext(SampleTypeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSampledRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSampledRelation(this);
		}
	}


}



class SampleTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sampleType;
    }

	BERNOULLI() {
	    return this.getToken(SqlBaseParser.BERNOULLI, 0);
	};

	SYSTEM() {
	    return this.getToken(SqlBaseParser.SYSTEM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSampleType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSampleType(this);
		}
	}


}



class AliasedRelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_aliasedRelation;
    }

	relationPrimary() {
	    return this.getTypedRuleContext(RelationPrimaryContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAliasedRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAliasedRelation(this);
		}
	}


}



class ColumnAliasesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columnAliases;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterColumnAliases(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitColumnAliases(this);
		}
	}


}



class RelationPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryRelationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubqueryRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubqueryRelation(this);
		}
	}


}

SqlBaseParser.SubqueryRelationContext = SubqueryRelationContext;

class ParenthesizedRelationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	relation() {
	    return this.getTypedRuleContext(RelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterParenthesizedRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitParenthesizedRelation(this);
		}
	}


}

SqlBaseParser.ParenthesizedRelationContext = ParenthesizedRelationContext;

class UnnestContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNNEST() {
	    return this.getToken(SqlBaseParser.UNNEST, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	ORDINALITY() {
	    return this.getToken(SqlBaseParser.ORDINALITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnnest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnnest(this);
		}
	}


}

SqlBaseParser.UnnestContext = UnnestContext;

class LateralContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LATERAL() {
	    return this.getToken(SqlBaseParser.LATERAL, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLateral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLateral(this);
		}
	}


}

SqlBaseParser.LateralContext = LateralContext;

class TableNameContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTableName(this);
		}
	}


}

SqlBaseParser.TableNameContext = TableNameContext;

class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_expression;
    }

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExpression(this);
		}
	}


}



class BooleanExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LogicalNotContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLogicalNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLogicalNot(this);
		}
	}


}

SqlBaseParser.LogicalNotContext = LogicalNotContext;

class PredicatedContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this._valueExpression = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPredicated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPredicated(this);
		}
	}


}

SqlBaseParser.PredicatedContext = PredicatedContext;

class LogicalBinaryContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // BooleanExpressionContext;
        this.operator = null; // Token;
        this.right = null; // BooleanExpressionContext;
        super.copyFrom(ctx);
    }

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLogicalBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLogicalBinary(this);
		}
	}


}

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, value) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_predicate;
        this.value = null
        this.value = value || null;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}

}


class ComparisonContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.right = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitComparison(this);
		}
	}


}

SqlBaseParser.ComparisonContext = ComparisonContext;

class LikeContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null; // ValueExpressionContext;
        this.escape = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLike(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLike(this);
		}
	}


}

SqlBaseParser.LikeContext = LikeContext;

class InSubqueryContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInSubquery(this);
		}
	}


}

SqlBaseParser.InSubqueryContext = InSubqueryContext;

class DistinctFromContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.right = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	DISTINCT() {
	    return this.getToken(SqlBaseParser.DISTINCT, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDistinctFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDistinctFrom(this);
		}
	}


}

SqlBaseParser.DistinctFromContext = DistinctFromContext;

class InListContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInList(this);
		}
	}


}

SqlBaseParser.InListContext = InListContext;

class NullPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNullPredicate(this);
		}
	}


}

SqlBaseParser.NullPredicateContext = NullPredicateContext;

class BetweenContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.lower = null; // ValueExpressionContext;
        this.upper = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBetween(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBetween(this);
		}
	}


}

SqlBaseParser.BetweenContext = BetweenContext;

class QuantifiedComparisonContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	comparisonQuantifier() {
	    return this.getTypedRuleContext(ComparisonQuantifierContext,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQuantifiedComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQuantifiedComparison(this);
		}
	}


}

SqlBaseParser.QuantifiedComparisonContext = QuantifiedComparisonContext;

class ValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ValueExpressionDefaultContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterValueExpressionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitValueExpressionDefault(this);
		}
	}


}

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

class ConcatenationContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ValueExpressionContext;
        this.right = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	CONCAT() {
	    return this.getToken(SqlBaseParser.CONCAT, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterConcatenation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitConcatenation(this);
		}
	}


}

SqlBaseParser.ConcatenationContext = ConcatenationContext;

class ArithmeticBinaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ValueExpressionContext;
        this.operator = null; // Token;
        this.right = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	SLASH() {
	    return this.getToken(SqlBaseParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(SqlBaseParser.PERCENT, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterArithmeticBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitArithmeticBinary(this);
		}
	}


}

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

class ArithmeticUnaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterArithmeticUnary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitArithmeticUnary(this);
		}
	}


}

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

class AtTimeZoneContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	AT() {
	    return this.getToken(SqlBaseParser.AT, 0);
	};

	timeZoneSpecifier() {
	    return this.getTypedRuleContext(TimeZoneSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterAtTimeZone(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitAtTimeZone(this);
		}
	}


}

SqlBaseParser.AtTimeZoneContext = AtTimeZoneContext;

class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DereferenceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.base = null; // PrimaryExpressionContext;
        this.fieldName = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDereference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDereference(this);
		}
	}


}

SqlBaseParser.DereferenceContext = DereferenceContext;

class TypeConstructorContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	DOUBLE_PRECISION() {
	    return this.getToken(SqlBaseParser.DOUBLE_PRECISION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTypeConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTypeConstructor(this);
		}
	}


}

SqlBaseParser.TypeConstructorContext = TypeConstructorContext;

class SpecialDateTimeFunctionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        this.precision = null; // Token;
        super.copyFrom(ctx);
    }

	CURRENT_DATE() {
	    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(SqlBaseParser.CURRENT_TIME, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
	};

	LOCALTIME() {
	    return this.getToken(SqlBaseParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(SqlBaseParser.LOCALTIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSpecialDateTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSpecialDateTimeFunction(this);
		}
	}


}

SqlBaseParser.SpecialDateTimeFunctionContext = SpecialDateTimeFunctionContext;

class SubstringContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SUBSTRING() {
	    return this.getToken(SqlBaseParser.SUBSTRING, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubstring(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubstring(this);
		}
	}


}

SqlBaseParser.SubstringContext = SubstringContext;

class CastContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CAST() {
	    return this.getToken(SqlBaseParser.CAST, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	TRY_CAST() {
	    return this.getToken(SqlBaseParser.TRY_CAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCast(this);
		}
	}


}

SqlBaseParser.CastContext = CastContext;

class LambdaContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterLambda(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitLambda(this);
		}
	}


}

SqlBaseParser.LambdaContext = LambdaContext;

class ParenthesizedExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}


}

SqlBaseParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class ParameterContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }


	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitParameter(this);
		}
	}


}

SqlBaseParser.ParameterContext = ParameterContext;

class NormalizeContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NORMALIZE() {
	    return this.getToken(SqlBaseParser.NORMALIZE, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNormalize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNormalize(this);
		}
	}


}

SqlBaseParser.NormalizeContext = NormalizeContext;

class IntervalLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitIntervalLiteral(this);
		}
	}


}

SqlBaseParser.IntervalLiteralContext = IntervalLiteralContext;

class NumericLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}

SqlBaseParser.NumericLiteralContext = NumericLiteralContext;

class BooleanLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}

SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext;

class SimpleCaseContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(SqlBaseParser.CASE, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(SqlBaseParser.ELSE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSimpleCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSimpleCase(this);
		}
	}


}

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

class ColumnReferenceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterColumnReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitColumnReference(this);
		}
	}


}

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

class NullLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}

SqlBaseParser.NullLiteralContext = NullLiteralContext;

class RowConstructorContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRowConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRowConstructor(this);
		}
	}


}

SqlBaseParser.RowConstructorContext = RowConstructorContext;

class SubscriptContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null; // PrimaryExpressionContext;
        this.index = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubscript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubscript(this);
		}
	}


}

SqlBaseParser.SubscriptContext = SubscriptContext;

class SubqueryExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSubqueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSubqueryExpression(this);
		}
	}


}

SqlBaseParser.SubqueryExpressionContext = SubqueryExpressionContext;

class BinaryLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BINARY_LITERAL() {
	    return this.getToken(SqlBaseParser.BINARY_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBinaryLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBinaryLiteral(this);
		}
	}


}

SqlBaseParser.BinaryLiteralContext = BinaryLiteralContext;

class CurrentUserContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	CURRENT_USER() {
	    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCurrentUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCurrentUser(this);
		}
	}


}

SqlBaseParser.CurrentUserContext = CurrentUserContext;

class ExtractContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXTRACT() {
	    return this.getToken(SqlBaseParser.EXTRACT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExtract(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExtract(this);
		}
	}


}

SqlBaseParser.ExtractContext = ExtractContext;

class StringLiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}

SqlBaseParser.StringLiteralContext = StringLiteralContext;

class ArrayConstructorContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterArrayConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitArrayConstructor(this);
		}
	}


}

SqlBaseParser.ArrayConstructorContext = ArrayConstructorContext;

class FunctionCallContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	filter() {
	    return this.getTypedRuleContext(FilterContext,0);
	};

	over() {
	    return this.getTypedRuleContext(OverContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	nullTreatment() {
	    return this.getTypedRuleContext(NullTreatmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}

SqlBaseParser.FunctionCallContext = FunctionCallContext;

class ExistsContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExists(this);
		}
	}


}

SqlBaseParser.ExistsContext = ExistsContext;

class PositionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	POSITION() {
	    return this.getToken(SqlBaseParser.POSITION, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPosition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPosition(this);
		}
	}


}

SqlBaseParser.PositionContext = PositionContext;

class SearchedCaseContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(SqlBaseParser.CASE, 0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(SqlBaseParser.ELSE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSearchedCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSearchedCase(this);
		}
	}


}

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

class GroupingOperationContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GROUPING() {
	    return this.getToken(SqlBaseParser.GROUPING, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterGroupingOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitGroupingOperation(this);
		}
	}


}

SqlBaseParser.GroupingOperationContext = GroupingOperationContext;

class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_string;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnicodeStringLiteralContext extends StringContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNICODE_STRING() {
	    return this.getToken(SqlBaseParser.UNICODE_STRING, 0);
	};

	UESCAPE() {
	    return this.getToken(SqlBaseParser.UESCAPE, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnicodeStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnicodeStringLiteral(this);
		}
	}


}

SqlBaseParser.UnicodeStringLiteralContext = UnicodeStringLiteralContext;

class BasicStringLiteralContext extends StringContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBasicStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBasicStringLiteral(this);
		}
	}


}

SqlBaseParser.BasicStringLiteralContext = BasicStringLiteralContext;

class NullTreatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nullTreatment;
    }

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	RESPECT() {
	    return this.getToken(SqlBaseParser.RESPECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNullTreatment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNullTreatment(this);
		}
	}


}



class TimeZoneSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_timeZoneSpecifier;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TimeZoneIntervalContext extends TimeZoneSpecifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTimeZoneInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTimeZoneInterval(this);
		}
	}


}

SqlBaseParser.TimeZoneIntervalContext = TimeZoneIntervalContext;

class TimeZoneStringContext extends TimeZoneSpecifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTimeZoneString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTimeZoneString(this);
		}
	}


}

SqlBaseParser.TimeZoneStringContext = TimeZoneStringContext;

class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_comparisonOperator;
    }

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(SqlBaseParser.NEQ, 0);
	};

	LT() {
	    return this.getToken(SqlBaseParser.LT, 0);
	};

	LTE() {
	    return this.getToken(SqlBaseParser.LTE, 0);
	};

	GT() {
	    return this.getToken(SqlBaseParser.GT, 0);
	};

	GTE() {
	    return this.getToken(SqlBaseParser.GTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitComparisonOperator(this);
		}
	}


}



class ComparisonQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_comparisonQuantifier;
    }

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	SOME() {
	    return this.getToken(SqlBaseParser.SOME, 0);
	};

	ANY() {
	    return this.getToken(SqlBaseParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterComparisonQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitComparisonQuantifier(this);
		}
	}


}



class BooleanValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_booleanValue;
    }

	TRUE() {
	    return this.getToken(SqlBaseParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(SqlBaseParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBooleanValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBooleanValue(this);
		}
	}


}



class IntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_interval;
        this.sign = null; // Token
        this.from = null; // IntervalFieldContext
        this.to = null; // IntervalFieldContext
    }

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	intervalField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalFieldContext);
	    } else {
	        return this.getTypedRuleContext(IntervalFieldContext,i);
	    }
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitInterval(this);
		}
	}


}



class IntervalFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_intervalField;
    }

	YEAR() {
	    return this.getToken(SqlBaseParser.YEAR, 0);
	};

	MONTH() {
	    return this.getToken(SqlBaseParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(SqlBaseParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(SqlBaseParser.HOUR, 0);
	};

	MINUTE() {
	    return this.getToken(SqlBaseParser.MINUTE, 0);
	};

	SECOND() {
	    return this.getToken(SqlBaseParser.SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterIntervalField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitIntervalField(this);
		}
	}


}



class NormalFormContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_normalForm;
    }

	NFD() {
	    return this.getToken(SqlBaseParser.NFD, 0);
	};

	NFC() {
	    return this.getToken(SqlBaseParser.NFC, 0);
	};

	NFKD() {
	    return this.getToken(SqlBaseParser.NFKD, 0);
	};

	NFKC() {
	    return this.getToken(SqlBaseParser.NFKC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNormalForm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNormalForm(this);
		}
	}


}



class TypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_types;
    }

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTypes(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_type;
        this.from = null; // IntervalFieldContext
        this.to = null; // IntervalFieldContext
    }

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	LT() {
	    return this.getToken(SqlBaseParser.LT, 0);
	};

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	GT() {
	    return this.getToken(SqlBaseParser.GT, 0);
	};

	MAP() {
	    return this.getToken(SqlBaseParser.MAP, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	baseType() {
	    return this.getTypedRuleContext(BaseTypeContext,0);
	};

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	intervalField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalFieldContext);
	    } else {
	        return this.getTypedRuleContext(IntervalFieldContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitType(this);
		}
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_typeParameter;
    }

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTypeParameter(this);
		}
	}


}



class BaseTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_baseType;
    }

	TIME_WITH_TIME_ZONE() {
	    return this.getToken(SqlBaseParser.TIME_WITH_TIME_ZONE, 0);
	};

	TIMESTAMP_WITH_TIME_ZONE() {
	    return this.getToken(SqlBaseParser.TIMESTAMP_WITH_TIME_ZONE, 0);
	};

	DOUBLE_PRECISION() {
	    return this.getToken(SqlBaseParser.DOUBLE_PRECISION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBaseType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBaseType(this);
		}
	}


}



class WhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_whenClause;
        this.condition = null; // ExpressionContext
        this.result = null; // ExpressionContext
    }

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(SqlBaseParser.THEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitWhenClause(this);
		}
	}


}



class FilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_filter;
    }

	FILTER() {
	    return this.getToken(SqlBaseParser.FILTER, 0);
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitFilter(this);
		}
	}


}



class OverContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_over;
        this._expression = null; // ExpressionContext
        this.partition = []; // of ExpressionContexts
    }

	OVER() {
	    return this.getToken(SqlBaseParser.OVER, 0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	windowFrame() {
	    return this.getTypedRuleContext(WindowFrameContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterOver(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitOver(this);
		}
	}


}



class WindowFrameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_windowFrame;
        this.frameType = null; // Token
        this.start = null; // FrameBoundContext
        this.end = null; // FrameBoundContext
    }

	RANGE() {
	    return this.getToken(SqlBaseParser.RANGE, 0);
	};

	frameBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FrameBoundContext);
	    } else {
	        return this.getTypedRuleContext(FrameBoundContext,i);
	    }
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterWindowFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitWindowFrame(this);
		}
	}


}



class FrameBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_frameBound;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoundedFrameContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        this.boundType = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBoundedFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBoundedFrame(this);
		}
	}


}

SqlBaseParser.BoundedFrameContext = BoundedFrameContext;

class UnboundedFrameContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        this.boundType = null; // Token;
        super.copyFrom(ctx);
    }

	UNBOUNDED() {
	    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnboundedFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnboundedFrame(this);
		}
	}


}

SqlBaseParser.UnboundedFrameContext = UnboundedFrameContext;

class CurrentRowBoundContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCurrentRowBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCurrentRowBound(this);
		}
	}


}

SqlBaseParser.CurrentRowBoundContext = CurrentRowBoundContext;

class ExplainOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_explainOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplainFormatContext extends ExplainOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null; // Token;
        super.copyFrom(ctx);
    }

	FORMAT() {
	    return this.getToken(SqlBaseParser.FORMAT, 0);
	};

	TEXT() {
	    return this.getToken(SqlBaseParser.TEXT, 0);
	};

	GRAPHVIZ() {
	    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
	};

	JSON() {
	    return this.getToken(SqlBaseParser.JSON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExplainFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExplainFormat(this);
		}
	}


}

SqlBaseParser.ExplainFormatContext = ExplainFormatContext;

class ExplainTypeContext extends ExplainOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null; // Token;
        super.copyFrom(ctx);
    }

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	LOGICAL() {
	    return this.getToken(SqlBaseParser.LOGICAL, 0);
	};

	DISTRIBUTED() {
	    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
	};

	VALIDATE() {
	    return this.getToken(SqlBaseParser.VALIDATE, 0);
	};

	IO() {
	    return this.getToken(SqlBaseParser.IO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterExplainType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitExplainType(this);
		}
	}


}

SqlBaseParser.ExplainTypeContext = ExplainTypeContext;

class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_transactionMode;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TransactionAccessModeContext extends TransactionModeContext {

    constructor(parser, ctx) {
        super(parser);
        this.accessMode = null; // Token;
        super.copyFrom(ctx);
    }

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	WRITE() {
	    return this.getToken(SqlBaseParser.WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterTransactionAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitTransactionAccessMode(this);
		}
	}


}

SqlBaseParser.TransactionAccessModeContext = TransactionAccessModeContext;

class IsolationLevelContext extends TransactionModeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ISOLATION() {
	    return this.getToken(SqlBaseParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(SqlBaseParser.LEVEL, 0);
	};

	levelOfIsolation() {
	    return this.getTypedRuleContext(LevelOfIsolationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterIsolationLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitIsolationLevel(this);
		}
	}


}

SqlBaseParser.IsolationLevelContext = IsolationLevelContext;

class LevelOfIsolationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_levelOfIsolation;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ReadUncommittedContext extends LevelOfIsolationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterReadUncommitted(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitReadUncommitted(this);
		}
	}


}

SqlBaseParser.ReadUncommittedContext = ReadUncommittedContext;

class SerializableContext extends LevelOfIsolationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SERIALIZABLE() {
	    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSerializable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSerializable(this);
		}
	}


}

SqlBaseParser.SerializableContext = SerializableContext;

class ReadCommittedContext extends LevelOfIsolationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	COMMITTED() {
	    return this.getToken(SqlBaseParser.COMMITTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterReadCommitted(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitReadCommitted(this);
		}
	}


}

SqlBaseParser.ReadCommittedContext = ReadCommittedContext;

class RepeatableReadContext extends LevelOfIsolationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPEATABLE() {
	    return this.getToken(SqlBaseParser.REPEATABLE, 0);
	};

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRepeatableRead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRepeatableRead(this);
		}
	}


}

SqlBaseParser.RepeatableReadContext = RepeatableReadContext;

class CallArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_callArgument;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PositionalArgumentContext extends CallArgumentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPositionalArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPositionalArgument(this);
		}
	}


}

SqlBaseParser.PositionalArgumentContext = PositionalArgumentContext;

class NamedArgumentContext extends CallArgumentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNamedArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNamedArgument(this);
		}
	}


}

SqlBaseParser.NamedArgumentContext = NamedArgumentContext;

class PrivilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_privilege;
    }

	SELECT() {
	    return this.getToken(SqlBaseParser.SELECT, 0);
	};

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterPrivilege(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitPrivilege(this);
		}
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_qualifiedName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQualifiedName(this);
		}
	}


}



class GrantorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_grantor;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CurrentUserGrantorContext extends GrantorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT_USER() {
	    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCurrentUserGrantor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCurrentUserGrantor(this);
		}
	}


}

SqlBaseParser.CurrentUserGrantorContext = CurrentUserGrantorContext;

class SpecifiedPrincipalContext extends GrantorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	principal() {
	    return this.getTypedRuleContext(PrincipalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterSpecifiedPrincipal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitSpecifiedPrincipal(this);
		}
	}


}

SqlBaseParser.SpecifiedPrincipalContext = SpecifiedPrincipalContext;

class CurrentRoleGrantorContext extends GrantorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT_ROLE() {
	    return this.getToken(SqlBaseParser.CURRENT_ROLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterCurrentRoleGrantor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitCurrentRoleGrantor(this);
		}
	}


}

SqlBaseParser.CurrentRoleGrantorContext = CurrentRoleGrantorContext;

class PrincipalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_principal;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnspecifiedPrincipalContext extends PrincipalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnspecifiedPrincipal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnspecifiedPrincipal(this);
		}
	}


}

SqlBaseParser.UnspecifiedPrincipalContext = UnspecifiedPrincipalContext;

class UserPrincipalContext extends PrincipalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUserPrincipal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUserPrincipal(this);
		}
	}


}

SqlBaseParser.UserPrincipalContext = UserPrincipalContext;

class RolePrincipalContext extends PrincipalContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRolePrincipal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRolePrincipal(this);
		}
	}


}

SqlBaseParser.RolePrincipalContext = RolePrincipalContext;

class RolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_roles;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterRoles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitRoles(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_identifier;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BackQuotedIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BACKQUOTED_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterBackQuotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitBackQuotedIdentifier(this);
		}
	}


}

SqlBaseParser.BackQuotedIdentifierContext = BackQuotedIdentifierContext;

class QuotedIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	QUOTED_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterQuotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitQuotedIdentifier(this);
		}
	}


}

SqlBaseParser.QuotedIdentifierContext = QuotedIdentifierContext;

class DigitIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DIGIT_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDigitIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDigitIdentifier(this);
		}
	}


}

SqlBaseParser.DigitIdentifierContext = DigitIdentifierContext;

class UnquotedIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IDENTIFIER() {
	    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
	};

	nonReserved() {
	    return this.getTypedRuleContext(NonReservedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterUnquotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitUnquotedIdentifier(this);
		}
	}


}

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_number;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DecimalLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL_VALUE() {
	    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}


}

SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext;

class DoubleLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOUBLE_VALUE() {
	    return this.getToken(SqlBaseParser.DOUBLE_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterDoubleLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitDoubleLiteral(this);
		}
	}


}

SqlBaseParser.DoubleLiteralContext = DoubleLiteralContext;

class IntegerLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}

SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext;

class NonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    }

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	ADMIN() {
	    return this.getToken(SqlBaseParser.ADMIN, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	ANY() {
	    return this.getToken(SqlBaseParser.ANY, 0);
	};

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	ASC() {
	    return this.getToken(SqlBaseParser.ASC, 0);
	};

	AT() {
	    return this.getToken(SqlBaseParser.AT, 0);
	};

	BERNOULLI() {
	    return this.getToken(SqlBaseParser.BERNOULLI, 0);
	};

	CALL() {
	    return this.getToken(SqlBaseParser.CALL, 0);
	};

	CALLED() {
	    return this.getToken(SqlBaseParser.CALLED, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	CATALOGS() {
	    return this.getToken(SqlBaseParser.CATALOGS, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	COMMIT() {
	    return this.getToken(SqlBaseParser.COMMIT, 0);
	};

	COMMITTED() {
	    return this.getToken(SqlBaseParser.COMMITTED, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	CURRENT_ROLE() {
	    return this.getToken(SqlBaseParser.CURRENT_ROLE, 0);
	};

	DATA() {
	    return this.getToken(SqlBaseParser.DATA, 0);
	};

	DATE() {
	    return this.getToken(SqlBaseParser.DATE, 0);
	};

	DAY() {
	    return this.getToken(SqlBaseParser.DAY, 0);
	};

	DEFINER() {
	    return this.getToken(SqlBaseParser.DEFINER, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	DETERMINISTIC() {
	    return this.getToken(SqlBaseParser.DETERMINISTIC, 0);
	};

	DISTRIBUTED() {
	    return this.getToken(SqlBaseParser.DISTRIBUTED, 0);
	};

	EXCLUDING() {
	    return this.getToken(SqlBaseParser.EXCLUDING, 0);
	};

	EXPLAIN() {
	    return this.getToken(SqlBaseParser.EXPLAIN, 0);
	};

	EXTERNAL() {
	    return this.getToken(SqlBaseParser.EXTERNAL, 0);
	};

	FILTER() {
	    return this.getToken(SqlBaseParser.FILTER, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	FORMAT() {
	    return this.getToken(SqlBaseParser.FORMAT, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
	};

	GRANT() {
	    return this.getToken(SqlBaseParser.GRANT, 0);
	};

	GRANTED() {
	    return this.getToken(SqlBaseParser.GRANTED, 0);
	};

	GRANTS() {
	    return this.getToken(SqlBaseParser.GRANTS, 0);
	};

	GRAPHVIZ() {
	    return this.getToken(SqlBaseParser.GRAPHVIZ, 0);
	};

	HOUR() {
	    return this.getToken(SqlBaseParser.HOUR, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	INCLUDING() {
	    return this.getToken(SqlBaseParser.INCLUDING, 0);
	};

	INPUT() {
	    return this.getToken(SqlBaseParser.INPUT, 0);
	};

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	INVOKER() {
	    return this.getToken(SqlBaseParser.INVOKER, 0);
	};

	IO() {
	    return this.getToken(SqlBaseParser.IO, 0);
	};

	ISOLATION() {
	    return this.getToken(SqlBaseParser.ISOLATION, 0);
	};

	JSON() {
	    return this.getToken(SqlBaseParser.JSON, 0);
	};

	LANGUAGE() {
	    return this.getToken(SqlBaseParser.LANGUAGE, 0);
	};

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	LATERAL() {
	    return this.getToken(SqlBaseParser.LATERAL, 0);
	};

	LEVEL() {
	    return this.getToken(SqlBaseParser.LEVEL, 0);
	};

	LIMIT() {
	    return this.getToken(SqlBaseParser.LIMIT, 0);
	};

	LOGICAL() {
	    return this.getToken(SqlBaseParser.LOGICAL, 0);
	};

	MAP() {
	    return this.getToken(SqlBaseParser.MAP, 0);
	};

	MATERIALIZED() {
	    return this.getToken(SqlBaseParser.MATERIALIZED, 0);
	};

	MINUTE() {
	    return this.getToken(SqlBaseParser.MINUTE, 0);
	};

	MONTH() {
	    return this.getToken(SqlBaseParser.MONTH, 0);
	};

	NAME() {
	    return this.getToken(SqlBaseParser.NAME, 0);
	};

	NFC() {
	    return this.getToken(SqlBaseParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(SqlBaseParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(SqlBaseParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(SqlBaseParser.NFKD, 0);
	};

	NO() {
	    return this.getToken(SqlBaseParser.NO, 0);
	};

	NONE() {
	    return this.getToken(SqlBaseParser.NONE, 0);
	};

	NULLIF() {
	    return this.getToken(SqlBaseParser.NULLIF, 0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	OFFSET() {
	    return this.getToken(SqlBaseParser.OFFSET, 0);
	};

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	ORDINALITY() {
	    return this.getToken(SqlBaseParser.ORDINALITY, 0);
	};

	OUTPUT() {
	    return this.getToken(SqlBaseParser.OUTPUT, 0);
	};

	OVER() {
	    return this.getToken(SqlBaseParser.OVER, 0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	PARTITIONS() {
	    return this.getToken(SqlBaseParser.PARTITIONS, 0);
	};

	POSITION() {
	    return this.getToken(SqlBaseParser.POSITION, 0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	PRIVILEGES() {
	    return this.getToken(SqlBaseParser.PRIVILEGES, 0);
	};

	PROPERTIES() {
	    return this.getToken(SqlBaseParser.PROPERTIES, 0);
	};

	RANGE() {
	    return this.getToken(SqlBaseParser.RANGE, 0);
	};

	READ() {
	    return this.getToken(SqlBaseParser.READ, 0);
	};

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	REPEATABLE() {
	    return this.getToken(SqlBaseParser.REPEATABLE, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	RESPECT() {
	    return this.getToken(SqlBaseParser.RESPECT, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	RETURN() {
	    return this.getToken(SqlBaseParser.RETURN, 0);
	};

	RETURNS() {
	    return this.getToken(SqlBaseParser.RETURNS, 0);
	};

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ROLES() {
	    return this.getToken(SqlBaseParser.ROLES, 0);
	};

	ROLLBACK() {
	    return this.getToken(SqlBaseParser.ROLLBACK, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	SCHEMAS() {
	    return this.getToken(SqlBaseParser.SCHEMAS, 0);
	};

	SECOND() {
	    return this.getToken(SqlBaseParser.SECOND, 0);
	};

	SECURITY() {
	    return this.getToken(SqlBaseParser.SECURITY, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(SqlBaseParser.SERIALIZABLE, 0);
	};

	SESSION() {
	    return this.getToken(SqlBaseParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	SETS() {
	    return this.getToken(SqlBaseParser.SETS, 0);
	};

	SQL() {
	    return this.getToken(SqlBaseParser.SQL, 0);
	};

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SOME() {
	    return this.getToken(SqlBaseParser.SOME, 0);
	};

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	STATS() {
	    return this.getToken(SqlBaseParser.STATS, 0);
	};

	SUBSTRING() {
	    return this.getToken(SqlBaseParser.SUBSTRING, 0);
	};

	SYSTEM() {
	    return this.getToken(SqlBaseParser.SYSTEM, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	TEXT() {
	    return this.getToken(SqlBaseParser.TEXT, 0);
	};

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(SqlBaseParser.TIMESTAMP, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	TRY_CAST() {
	    return this.getToken(SqlBaseParser.TRY_CAST, 0);
	};

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	UNBOUNDED() {
	    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(SqlBaseParser.UNCOMMITTED, 0);
	};

	USE() {
	    return this.getToken(SqlBaseParser.USE, 0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	VALIDATE() {
	    return this.getToken(SqlBaseParser.VALIDATE, 0);
	};

	VERBOSE() {
	    return this.getToken(SqlBaseParser.VERBOSE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	WORK() {
	    return this.getToken(SqlBaseParser.WORK, 0);
	};

	WRITE() {
	    return this.getToken(SqlBaseParser.WRITE, 0);
	};

	YEAR() {
	    return this.getToken(SqlBaseParser.YEAR, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.enterNonReserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SqlBaseListener ) {
	        listener.exitNonReserved(this);
		}
	}


}




SqlBaseParser.SingleStatementContext = SingleStatementContext; 
SqlBaseParser.StandaloneExpressionContext = StandaloneExpressionContext; 
SqlBaseParser.StandaloneRoutineBodyContext = StandaloneRoutineBodyContext; 
SqlBaseParser.StatementContext = StatementContext; 
SqlBaseParser.QueryContext = QueryContext; 
SqlBaseParser.WithContext = WithContext; 
SqlBaseParser.TableElementContext = TableElementContext; 
SqlBaseParser.ColumnDefinitionContext = ColumnDefinitionContext; 
SqlBaseParser.LikeClauseContext = LikeClauseContext; 
SqlBaseParser.PropertiesContext = PropertiesContext; 
SqlBaseParser.PropertyContext = PropertyContext; 
SqlBaseParser.SqlParameterDeclarationContext = SqlParameterDeclarationContext; 
SqlBaseParser.RoutineCharacteristicsContext = RoutineCharacteristicsContext; 
SqlBaseParser.RoutineCharacteristicContext = RoutineCharacteristicContext; 
SqlBaseParser.AlterRoutineCharacteristicsContext = AlterRoutineCharacteristicsContext; 
SqlBaseParser.AlterRoutineCharacteristicContext = AlterRoutineCharacteristicContext; 
SqlBaseParser.RoutineBodyContext = RoutineBodyContext; 
SqlBaseParser.ReturnStatementContext = ReturnStatementContext; 
SqlBaseParser.ExternalBodyReferenceContext = ExternalBodyReferenceContext; 
SqlBaseParser.LanguageContext = LanguageContext; 
SqlBaseParser.DeterminismContext = DeterminismContext; 
SqlBaseParser.NullCallClauseContext = NullCallClauseContext; 
SqlBaseParser.ExternalRoutineNameContext = ExternalRoutineNameContext; 
SqlBaseParser.QueryNoWithContext = QueryNoWithContext; 
SqlBaseParser.QueryTermContext = QueryTermContext; 
SqlBaseParser.QueryPrimaryContext = QueryPrimaryContext; 
SqlBaseParser.SortItemContext = SortItemContext; 
SqlBaseParser.QuerySpecificationContext = QuerySpecificationContext; 
SqlBaseParser.GroupByContext = GroupByContext; 
SqlBaseParser.GroupingElementContext = GroupingElementContext; 
SqlBaseParser.GroupingSetContext = GroupingSetContext; 
SqlBaseParser.NamedQueryContext = NamedQueryContext; 
SqlBaseParser.SetQuantifierContext = SetQuantifierContext; 
SqlBaseParser.SelectItemContext = SelectItemContext; 
SqlBaseParser.RelationContext = RelationContext; 
SqlBaseParser.JoinTypeContext = JoinTypeContext; 
SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext; 
SqlBaseParser.SampledRelationContext = SampledRelationContext; 
SqlBaseParser.SampleTypeContext = SampleTypeContext; 
SqlBaseParser.AliasedRelationContext = AliasedRelationContext; 
SqlBaseParser.ColumnAliasesContext = ColumnAliasesContext; 
SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext; 
SqlBaseParser.ExpressionContext = ExpressionContext; 
SqlBaseParser.BooleanExpressionContext = BooleanExpressionContext; 
SqlBaseParser.PredicateContext = PredicateContext; 
SqlBaseParser.ValueExpressionContext = ValueExpressionContext; 
SqlBaseParser.PrimaryExpressionContext = PrimaryExpressionContext; 
SqlBaseParser.StringContext = StringContext; 
SqlBaseParser.NullTreatmentContext = NullTreatmentContext; 
SqlBaseParser.TimeZoneSpecifierContext = TimeZoneSpecifierContext; 
SqlBaseParser.ComparisonOperatorContext = ComparisonOperatorContext; 
SqlBaseParser.ComparisonQuantifierContext = ComparisonQuantifierContext; 
SqlBaseParser.BooleanValueContext = BooleanValueContext; 
SqlBaseParser.IntervalContext = IntervalContext; 
SqlBaseParser.IntervalFieldContext = IntervalFieldContext; 
SqlBaseParser.NormalFormContext = NormalFormContext; 
SqlBaseParser.TypesContext = TypesContext; 
SqlBaseParser.TypeContext = TypeContext; 
SqlBaseParser.TypeParameterContext = TypeParameterContext; 
SqlBaseParser.BaseTypeContext = BaseTypeContext; 
SqlBaseParser.WhenClauseContext = WhenClauseContext; 
SqlBaseParser.FilterContext = FilterContext; 
SqlBaseParser.OverContext = OverContext; 
SqlBaseParser.WindowFrameContext = WindowFrameContext; 
SqlBaseParser.FrameBoundContext = FrameBoundContext; 
SqlBaseParser.ExplainOptionContext = ExplainOptionContext; 
SqlBaseParser.TransactionModeContext = TransactionModeContext; 
SqlBaseParser.LevelOfIsolationContext = LevelOfIsolationContext; 
SqlBaseParser.CallArgumentContext = CallArgumentContext; 
SqlBaseParser.PrivilegeContext = PrivilegeContext; 
SqlBaseParser.QualifiedNameContext = QualifiedNameContext; 
SqlBaseParser.GrantorContext = GrantorContext; 
SqlBaseParser.PrincipalContext = PrincipalContext; 
SqlBaseParser.RolesContext = RolesContext; 
SqlBaseParser.IdentifierContext = IdentifierContext; 
SqlBaseParser.NumberContext = NumberContext; 
SqlBaseParser.NonReservedContext = NonReservedContext; 

module.exports = SqlBaseParser;